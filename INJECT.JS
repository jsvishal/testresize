window.__vwo__editify__inject = true;
window.isCodeEditorEnabled = true;
window.accountId = 370724;
window.loadingAppName = "app";
vwoOverrideAMD();
function postMessageHandshake() {
    return true;
}
function vwoOverrideAMD() {
    window.vwoRequirejs = window.requirejs;
    window.vwoRequire = window.require;
    window.vwoDefine = window.define;
    window.requirejs = undefined;
    window.require = undefined;
    window.define = undefined;
}
function vwoRestoreAMD() {
    window.requirejs = window.vwoRequirejs;
    window.require = window.vwoRequire;
    window.define = window.vwoDefine;
    delete window.vwoRequirejs;
    delete window.vwoRequire;
    delete window.vwoDefine;
}
/** vim: et:ts=4:sw=4:sts=4
 * @license RequireJS 2.1.22 Copyright (c) 2010-2015, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/requirejs for details
 */
//Not using strict: uneven strict support in browsers, #392, and causes
//problems with requirejs.exec()/transpiler plugins that may not be strict.
/*jslint regexp: true, nomen: true, sloppy: true */
/*global window, navigator, document, importScripts, setTimeout, opera */

var requirejs, require, define;
(function(global) {
    var req, s, head, baseElement, dataMain, src, interactiveScript, currentlyAddingScript, mainScript, subPath, version = '2.1.22', commentRegExp = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg, cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g, jsSuffixRegExp = /\.js$/, currDirRegExp = /^\.\//, op = Object.prototype, ostring = op.toString, hasOwn = op.hasOwnProperty, ap = Array.prototype, isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document), isWebWorker = !isBrowser && typeof importScripts !== 'undefined', //PS3 indicates loaded and complete, but need to wait for complete
    //specifically. Sequence is 'loading', 'loaded', execution,
    // then 'complete'. The UA check is unfortunate, but not sure how
    //to feature test w/o causing perf issues.
    readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ? /^complete$/ : /^(complete|loaded)$/, defContextName = '_', //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
    isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]', contexts = {}, cfg = {}, globalDefQueue = [], useInteractive = false;

    function isFunction(it) {
        return ostring.call(it) === '[object Function]';
    }

    function isArray(it) {
        return ostring.call(it) === '[object Array]';
    }

    /**
     * Helper function for iterating over an array. If the func returns
     * a true value, it will break out of the loop.
     */
    function each(ary, func) {
        if (ary) {
            var i;
            for (i = 0; i < ary.length; i += 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    /**
     * Helper function for iterating over an array backwards. If the func
     * returns a true value, it will break out of the loop.
     */
    function eachReverse(ary, func) {
        if (ary) {
            var i;
            for (i = ary.length - 1; i > -1; i -= 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    function getOwn(obj, prop) {
        return hasProp(obj, prop) && obj[prop];
    }

    /**
     * Cycles over properties in an object and calls a function for each
     * property value. If the function returns a truthy value, then the
     * iteration is stopped.
     */
    function eachProp(obj, func) {
        var prop;
        for (prop in obj) {
            if (hasProp(obj, prop)) {
                if (func(obj[prop], prop)) {
                    break;
                }
            }
        }
    }

    /**
     * Simple function to mix in properties from source into target,
     * but only if target does not already have a property of the same name.
     */
    function mixin(target, source, force, deepStringMixin) {
        if (source) {
            eachProp(source, function(value, prop) {
                if (force || !hasProp(target, prop)) {
                    if (deepStringMixin && typeof value === 'object' && value && !isArray(value) && !isFunction(value) && !(value instanceof RegExp)) {

                        if (!target[prop]) {
                            target[prop] = {};
                        }
                        mixin(target[prop], value, force, deepStringMixin);
                    } else {
                        target[prop] = value;
                    }
                }
            });
        }
        return target;
    }

    //Similar to Function.prototype.bind, but the 'this' object is specified
    //first, since it is easier to read/figure out what 'this' will be.
    function bind(obj, fn) {
        return function() {
            return fn.apply(obj, arguments);
        }
        ;
    }

    function scripts() {
        return document.getElementsByTagName('script');
    }

    function defaultOnError(err) {
        throw err;
    }

    //Allow getting a global that is expressed in
    //dot notation, like 'a.b.c'.
    function getGlobal(value) {
        if (!value) {
            return value;
        }
        var g = global;
        each(value.split('.'), function(part) {
            g = g[part];
        });
        return g;
    }

    /**
     * Constructs an error with a pointer to an URL with more information.
     * @param {String} id the error ID that maps to an ID on a web page.
     * @param {String} message human readable error.
     * @param {Error} [err] the original error, if there is one.
     *
     * @returns {Error}
     */
    function makeError(id, msg, err, requireModules) {
        var e = new Error(msg + '\nhttp://requirejs.org/docs/errors.html#' + id);
        e.requireType = id;
        e.requireModules = requireModules;
        if (err) {
            e.originalError = err;
        }
        return e;
    }

    if (typeof define !== 'undefined') {
        //If a define is already in play via another AMD loader,
        //do not overwrite.
        return;
    }

    if (typeof requirejs !== 'undefined') {
        if (isFunction(requirejs)) {
            //Do not overwrite an existing requirejs instance.
            return;
        }
        cfg = requirejs;
        requirejs = undefined;
    }

    //Allow for a require config object
    if (typeof require !== 'undefined' && !isFunction(require)) {
        //assume it is a config object.
        cfg = require;
        require = undefined;
    }

    function newContext(contextName) {
        var inCheckLoaded, Module, context, handlers, checkLoadedTimeoutId, config = {
            //Defaults. Do not set a default for map
            //config to speed up normalize(), which
            //will run faster if there is no default.
            waitSeconds: 7,
            baseUrl: './',
            paths: {},
            bundles: {},
            pkgs: {},
            shim: {},
            config: {}
        }, registry = {}, //registry of just enabled modules, to speed
        //cycle breaking code when lots of modules
        //are registered, but not activated.
        enabledRegistry = {}, undefEvents = {}, defQueue = [], defined = {}, urlFetched = {}, bundlesMap = {}, requireCounter = 1, unnormalizedCounter = 1;

        /**
         * Trims the . and .. from an array of path segments.
         * It will keep a leading path segment if a .. will become
         * the first path segment, to help with module name lookups,
         * which act like paths, but can be remapped. But the end result,
         * all paths that use this function should look normalized.
         * NOTE: this method MODIFIES the input array.
         * @param {Array} ary the array of path segments.
         */
        function trimDots(ary) {
            var i, part;
            for (i = 0; i < ary.length; i++) {
                part = ary[i];
                if (part === '.') {
                    ary.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    // If at the start, or previous value is still ..,
                    // keep them so that when converted to a path it may
                    // still work when converted to a path, even though
                    // as an ID it is less than ideal. In larger point
                    // releases, may be better to just kick out an error.
                    if (i === 0 || (i === 1 && ary[2] === '..') || ary[i - 1] === '..') {
                        continue;
                    } else if (i > 0) {
                        ary.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
        }

        /**
         * Given a relative module name, like ./something, normalize it to
         * a real name that can be mapped to a path.
         * @param {String} name the relative name
         * @param {String} baseName a real name that the name arg is relative
         * to.
         * @param {Boolean} applyMap apply the map config to the value. Should
         * only be done if this normalization is for a dependency ID.
         * @returns {String} normalized name
         */
        function normalize(name, baseName, applyMap) {
            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex, foundMap, foundI, foundStarMap, starI, normalizedBaseParts, baseParts = (baseName && baseName.split('/')), map = config.map, starMap = map && map['*'];

            //Adjust any relative paths.
            if (name) {
                name = name.split('/');
                lastIndex = name.length - 1;

                // If wanting node ID compatibility, strip .js from end
                // of IDs. Have to do this here, and not in nameToUrl
                // because node allows either .js or non .js to map
                // to same file.
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                // Starts with a '.' so need the baseName
                if (name[0].charAt(0) === '.' && baseParts) {
                    //Convert baseName to array, and lop off the last part,
                    //so that . matches that 'directory' and not name of the baseName's
                    //module. For instance, baseName of 'one/two/three', maps to
                    //'one/two/three.js', but we want the directory, 'one/two' for
                    //this normalization.
                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                    name = normalizedBaseParts.concat(name);
                }

                trimDots(name);
                name = name.join('/');
            }

            //Apply map config if available.
            if (applyMap && map && (baseParts || starMap)) {
                nameParts = name.split('/');

                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join('/');

                    if (baseParts) {
                        //Find the longest baseName segment match in the config.
                        //So, do joins on the biggest to smallest lengths of baseParts.
                        for (j = baseParts.length; j > 0; j -= 1) {
                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));

                            //baseName segment has config, find if it has one for
                            //this name.
                            if (mapValue) {
                                mapValue = getOwn(mapValue, nameSegment);
                                if (mapValue) {
                                    //Match, update name to the new value.
                                    foundMap = mapValue;
                                    foundI = i;
                                    break outerLoop;
                                }
                            }
                        }
                    }

                    //Check for a star map match, but just hold on to it,
                    //if there is a shorter segment match later in a matching
                    //config, then favor over this star map.
                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
                        foundStarMap = getOwn(starMap, nameSegment);
                        starI = i;
                    }
                }

                if (!foundMap && foundStarMap) {
                    foundMap = foundStarMap;
                    foundI = starI;
                }

                if (foundMap) {
                    nameParts.splice(0, foundI, foundMap);
                    name = nameParts.join('/');
                }
            }

            // If the name points to a package's name, use
            // the package main instead.
            pkgMain = getOwn(config.pkgs, name);

            return pkgMain ? pkgMain : name;
        }

        function removeScript(name) {
            if (isBrowser) {
                each(scripts(), function(scriptNode) {
                    if (scriptNode.getAttribute('data-requiremodule') === name && scriptNode.getAttribute('data-requirecontext') === context.contextName) {
                        scriptNode.parentNode.removeChild(scriptNode);
                        return true;
                    }
                });
            }
        }

        function hasPathFallback(id) {
            var pathConfig = getOwn(config.paths, id);
            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
                //Pop off the first array value, since it failed, and
                //retry
                pathConfig.shift();
                context.require.undef(id);

                //Custom require that does not do map translation, since
                //ID is "absolute", already mapped/resolved.
                context.makeRequire(null, {
                    skipMap: true
                })([id]);

                return true;
            }
        }

        //Turns a plugin!resource to [plugin, resource]
        //with the plugin being undefined if the name
        //did not have a plugin prefix.
        function splitPrefix(name) {
            var prefix, index = name ? name.indexOf('!') : -1;
            if (index > -1) {
                prefix = name.substring(0, index);
                name = name.substring(index + 1, name.length);
            }
            return [prefix, name];
        }

        /**
         * Creates a module mapping that includes plugin prefix, module
         * name, and path. If parentModuleMap is provided it will
         * also normalize the name via require.normalize()
         *
         * @param {String} name the module name
         * @param {String} [parentModuleMap] parent module map
         * for the module name, used to resolve relative names.
         * @param {Boolean} isNormalized: is the ID already normalized.
         * This is true if this call is done for a define() module ID.
         * @param {Boolean} applyMap: apply the map config to the ID.
         * Should only be true if this map is for a dependency.
         *
         * @returns {Object}
         */
        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
            var url, pluginModule, suffix, nameParts, prefix = null, parentName = parentModuleMap ? parentModuleMap.name : null, originalName = name, isDefine = true, normalizedName = '';

            //If no name, then it means it is a require call, generate an
            //internal name.
            if (!name) {
                isDefine = false;
                name = '_@r' + (requireCounter += 1);
            }

            nameParts = splitPrefix(name);
            prefix = nameParts[0];
            name = nameParts[1];

            if (prefix) {
                prefix = normalize(prefix, parentName, applyMap);
                pluginModule = getOwn(defined, prefix);
            }

            //Account for relative paths if there is a base name.
            if (name) {
                if (prefix) {
                    if (pluginModule && pluginModule.normalize) {
                        //Plugin is loaded, use its normalize method.
                        normalizedName = pluginModule.normalize(name, function(name) {
                            return normalize(name, parentName, applyMap);
                        });
                    } else {
                        // If nested plugin references, then do not try to
                        // normalize, as it will not normalize correctly. This
                        // places a restriction on resourceIds, and the longer
                        // term solution is not to normalize until plugins are
                        // loaded and all normalizations to allow for async
                        // loading of a loader plugin. But for now, fixes the
                        // common uses. Details in #1131
                        normalizedName = name.indexOf('!') === -1 ? normalize(name, parentName, applyMap) : name;
                    }
                } else {
                    //A regular module.
                    normalizedName = normalize(name, parentName, applyMap);

                    //Normalized name may be a plugin ID due to map config
                    //application in normalize. The map config values must
                    //already be normalized, so do not need to redo that part.
                    nameParts = splitPrefix(normalizedName);
                    prefix = nameParts[0];
                    normalizedName = nameParts[1];
                    isNormalized = true;

                    url = context.nameToUrl(normalizedName);
                }
            }

            //If the id is a plugin id that cannot be determined if it needs
            //normalization, stamp it with a unique ID so two matching relative
            //ids that may conflict can be separate.
            suffix = prefix && !pluginModule && !isNormalized ? '_unnormalized' + (unnormalizedCounter += 1) : '';

            return {
                prefix: prefix,
                name: normalizedName,
                parentMap: parentModuleMap,
                unnormalized: !!suffix,
                url: url,
                originalName: originalName,
                isDefine: isDefine,
                id: (prefix ? prefix + '!' + normalizedName : normalizedName) + suffix
            };
        }

        function getModule(depMap) {
            var id = depMap.id
              , mod = getOwn(registry, id);

            if (!mod) {
                mod = registry[id] = new context.Module(depMap);
            }

            return mod;
        }

        function on(depMap, name, fn) {
            var id = depMap.id
              , mod = getOwn(registry, id);

            if (hasProp(defined, id) && (!mod || mod.defineEmitComplete)) {
                if (name === 'defined') {
                    fn(defined[id]);
                }
            } else {
                mod = getModule(depMap);
                if (mod.error && name === 'error') {
                    fn(mod.error);
                } else {
                    mod.on(name, fn);
                }
            }
        }

        function onError(err, errback) {
            var ids = err.requireModules
              , notified = false;

            if (errback) {
                errback(err);
            } else {
                each(ids, function(id) {
                    var mod = getOwn(registry, id);
                    if (mod) {
                        //Set error on module, so it skips timeout checks.
                        mod.error = err;
                        if (mod.events.error) {
                            notified = true;
                            mod.emit('error', err);
                        }
                    }
                });

                if (!notified) {
                    req.onError(err);
                }
            }
        }

        /**
         * Internal method to transfer globalQueue items to this context's
         * defQueue.
         */
        function takeGlobalQueue() {
            //Push all the globalDefQueue items into the context's defQueue
            if (globalDefQueue.length) {
                each(globalDefQueue, function(queueItem) {
                    var id = queueItem[0];
                    if (typeof id === 'string') {
                        context.defQueueMap[id] = true;
                    }
                    defQueue.push(queueItem);
                });
                globalDefQueue = [];
            }
        }

        handlers = {
            'require': function(mod) {
                if (mod.require) {
                    return mod.require;
                } else {
                    return (mod.require = context.makeRequire(mod.map));
                }
            },
            'exports': function(mod) {
                mod.usingExports = true;
                if (mod.map.isDefine) {
                    if (mod.exports) {
                        return (defined[mod.map.id] = mod.exports);
                    } else {
                        return (mod.exports = defined[mod.map.id] = {});
                    }
                }
            },
            'module': function(mod) {
                if (mod.module) {
                    return mod.module;
                } else {
                    return (mod.module = {
                        id: mod.map.id,
                        uri: mod.map.url,
                        config: function() {
                            return getOwn(config.config, mod.map.id) || {};
                        },
                        exports: mod.exports || (mod.exports = {})
                    });
                }
            }
        };

        function cleanRegistry(id) {
            //Clean up machinery used for waiting modules.
            delete registry[id];
            delete enabledRegistry[id];
        }

        function breakCycle(mod, traced, processed) {
            var id = mod.map.id;

            if (mod.error) {
                mod.emit('error', mod.error);
            } else {
                traced[id] = true;
                each(mod.depMaps, function(depMap, i) {
                    var depId = depMap.id
                      , dep = getOwn(registry, depId);

                    //Only force things that have not completed
                    //being defined, so still in the registry,
                    //and only if it has not been matched up
                    //in the module already.
                    if (dep && !mod.depMatched[i] && !processed[depId]) {
                        if (getOwn(traced, depId)) {
                            mod.defineDep(i, defined[depId]);
                            mod.check();
                            //pass false?
                        } else {
                            breakCycle(dep, traced, processed);
                        }
                    }
                });
                processed[id] = true;
            }
        }

        function checkLoaded() {
            var err, usingPathFallback, waitInterval = config.waitSeconds * 1000, //It is possible to disable the wait interval by using waitSeconds of 0.
            expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(), noLoads = [], reqCalls = [], stillLoading = false, needCycleCheck = true;

            //Do not bother if this call was a result of a cycle break.
            if (inCheckLoaded) {
                return;
            }

            inCheckLoaded = true;

            //Figure out the state of all the modules.
            eachProp(enabledRegistry, function(mod) {
                var map = mod.map
                  , modId = map.id;

                //Skip things that are not enabled or in error state.
                if (!mod.enabled) {
                    return;
                }

                if (!map.isDefine) {
                    reqCalls.push(mod);
                }

                if (!mod.error) {
                    //If the module should be executed, and it has not
                    //been inited and time is up, remember it.
                    if (!mod.inited && expired) {
                        if (hasPathFallback(modId)) {
                            usingPathFallback = true;
                            stillLoading = true;
                        } else {
                            noLoads.push(modId);
                            removeScript(modId);
                        }
                    } else if (!mod.inited && mod.fetched && map.isDefine) {
                        stillLoading = true;
                        if (!map.prefix) {
                            //No reason to keep looking for unfinished
                            //loading. If the only stillLoading is a
                            //plugin resource though, keep going,
                            //because it may be that a plugin resource
                            //is waiting on a non-plugin cycle.
                            return (needCycleCheck = false);
                        }
                    }
                }
            });

            if (expired && noLoads.length) {
                //If wait time expired, throw error of unloaded modules.
                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
                err.contextName = context.contextName;
                return onError(err);
            }

            //Not expired, check for a cycle.
            if (needCycleCheck) {
                each(reqCalls, function(mod) {
                    breakCycle(mod, {}, {});
                });
            }

            //If still waiting on loads, and the waiting load is something
            //other than a plugin resource, or there are still outstanding
            //scripts, then just try back later.
            if ((!expired || usingPathFallback) && stillLoading) {
                //Something is still waiting to load. Wait for it, but only
                //if a timeout is not already in effect.
                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
                    checkLoadedTimeoutId = setTimeout(function() {
                        checkLoadedTimeoutId = 0;
                        checkLoaded();
                    }, 50);
                }
            }

            inCheckLoaded = false;
        }

        Module = function(map) {
            this.events = getOwn(undefEvents, map.id) || {};
            this.map = map;
            this.shim = getOwn(config.shim, map.id);
            this.depExports = [];
            this.depMaps = [];
            this.depMatched = [];
            this.pluginMaps = {};
            this.depCount = 0;

            /* this.exports this.factory
               this.depMaps = [],
               this.enabled, this.fetched
            */
        }
        ;

        Module.prototype = {
            init: function(depMaps, factory, errback, options) {
                options = options || {};

                //Do not do more inits if already done. Can happen if there
                //are multiple define calls for the same module. That is not
                //a normal, common case, but it is also not unexpected.
                if (this.inited) {
                    return;
                }

                this.factory = factory;

                if (errback) {
                    //Register for errors on this module.
                    this.on('error', errback);
                } else if (this.events.error) {
                    //If no errback already, but there are error listeners
                    //on this module, set up an errback to pass to the deps.
                    errback = bind(this, function(err) {
                        this.emit('error', err);
                    });
                }

                //Do a copy of the dependency array, so that
                //source inputs are not modified. For example
                //"shim" deps are passed in here directly, and
                //doing a direct modification of the depMaps array
                //would affect that config.
                this.depMaps = depMaps && depMaps.slice(0);

                this.errback = errback;

                //Indicate this module has be initialized
                this.inited = true;

                this.ignore = options.ignore;

                //Could have option to init this module in enabled mode,
                //or could have been previously marked as enabled. However,
                //the dependencies are not known until init is called. So
                //if enabled previously, now trigger dependencies as enabled.
                if (options.enabled || this.enabled) {
                    //Enable this module and dependencies.
                    //Will call this.check()
                    this.enable();
                } else {
                    this.check();
                }
            },

            defineDep: function(i, depExports) {
                //Because of cycles, defined callback for a given
                //export can be called more than once.
                if (!this.depMatched[i]) {
                    this.depMatched[i] = true;
                    this.depCount -= 1;
                    this.depExports[i] = depExports;
                }
            },

            fetch: function() {
                if (this.fetched) {
                    return;
                }
                this.fetched = true;

                context.startTime = (new Date()).getTime();

                var map = this.map;

                //If the manager is for a plugin managed resource,
                //ask the plugin to load it now.
                if (this.shim) {
                    context.makeRequire(this.map, {
                        enableBuildCallback: true
                    })(this.shim.deps || [], bind(this, function() {
                        return map.prefix ? this.callPlugin() : this.load();
                    }));
                } else {
                    //Regular dependency.
                    return map.prefix ? this.callPlugin() : this.load();
                }
            },

            load: function() {
                var url = this.map.url;

                //Regular dependency.
                if (!urlFetched[url]) {
                    urlFetched[url] = true;
                    context.load(this.map.id, url);
                }
            },

            /**
             * Checks if the module is ready to define itself, and if so,
             * define it.
             */
            check: function() {
                if (!this.enabled || this.enabling) {
                    return;
                }

                var err, cjsModule, id = this.map.id, depExports = this.depExports, exports = this.exports, factory = this.factory;

                if (!this.inited) {
                    // Only fetch if not already in the defQueue.
                    if (!hasProp(context.defQueueMap, id)) {
                        this.fetch();
                    }
                } else if (this.error) {
                    this.emit('error', this.error);
                } else if (!this.defining) {
                    //The factory could trigger another require call
                    //that would result in checking this module to
                    //define itself again. If already in the process
                    //of doing that, skip this work.
                    this.defining = true;

                    if (this.depCount < 1 && !this.defined) {
                        if (isFunction(factory)) {
                            try {
                                exports = context.execCb(id, factory, depExports, exports);
                            } catch (e) {
                                err = e;
                            }

                            // Favor return value over exports. If node/cjs in play,
                            // then will not have a return value anyway. Favor
                            // module.exports assignment over exports object.
                            if (this.map.isDefine && exports === undefined) {
                                cjsModule = this.module;
                                if (cjsModule) {
                                    exports = cjsModule.exports;
                                } else if (this.usingExports) {
                                    //exports already set the defined value.
                                    exports = this.exports;
                                }
                            }

                            if (err) {
                                // If there is an error listener, favor passing
                                // to that instead of throwing an error. However,
                                // only do it for define()'d  modules. require
                                // errbacks should not be called for failures in
                                // their callbacks (#699). However if a global
                                // onError is set, use that.
                                if ((this.events.error && this.map.isDefine) || req.onError !== defaultOnError) {
                                    err.requireMap = this.map;
                                    err.requireModules = this.map.isDefine ? [this.map.id] : null;
                                    err.requireType = this.map.isDefine ? 'define' : 'require';
                                    return onError((this.error = err));
                                } else if (typeof console !== 'undefined' && console.error) {
                                    // Log the error for debugging. If promises could be
                                    // used, this would be different, but making do.
                                    console.error(err);
                                } else {
                                    // Do not want to completely lose the error. While this
                                    // will mess up processing and lead to similar results
                                    // as bug 1440, it at least surfaces the error.
                                    req.onError(err);
                                }
                            }
                        } else {
                            //Just a literal value
                            exports = factory;
                        }

                        this.exports = exports;

                        if (this.map.isDefine && !this.ignore) {
                            defined[id] = exports;

                            if (req.onResourceLoad) {
                                var resLoadMaps = [];
                                each(this.depMaps, function(depMap) {
                                    resLoadMaps.push(depMap.normalizedMap || depMap);
                                });
                                req.onResourceLoad(context, this.map, resLoadMaps);
                            }
                        }

                        //Clean up
                        cleanRegistry(id);

                        this.defined = true;
                    }

                    //Finished the define stage. Allow calling check again
                    //to allow define notifications below in the case of a
                    //cycle.
                    this.defining = false;

                    if (this.defined && !this.defineEmitted) {
                        this.defineEmitted = true;
                        this.emit('defined', this.exports);
                        this.defineEmitComplete = true;
                    }

                }
            },

            callPlugin: function() {
                var map = this.map
                  , id = map.id
                  , //Map already normalized the prefix.
                pluginMap = makeModuleMap(map.prefix);

                //Mark this as a dependency for this plugin, so it
                //can be traced for cycles.
                this.depMaps.push(pluginMap);

                on(pluginMap, 'defined', bind(this, function(plugin) {
                    var load, normalizedMap, normalizedMod, bundleId = getOwn(bundlesMap, this.map.id), name = this.map.name, parentName = this.map.parentMap ? this.map.parentMap.name : null, localRequire = context.makeRequire(map.parentMap, {
                        enableBuildCallback: true
                    });

                    //If current map is not normalized, wait for that
                    //normalized name to load instead of continuing.
                    if (this.map.unnormalized) {
                        //Normalize the ID if the plugin allows it.
                        if (plugin.normalize) {
                            name = plugin.normalize(name, function(name) {
                                return normalize(name, parentName, true);
                            }) || '';
                        }

                        //prefix and name should already be normalized, no need
                        //for applying map config again either.
                        normalizedMap = makeModuleMap(map.prefix + '!' + name, this.map.parentMap);
                        on(normalizedMap, 'defined', bind(this, function(value) {
                            this.map.normalizedMap = normalizedMap;
                            this.init([], function() {
                                return value;
                            }, null, {
                                enabled: true,
                                ignore: true
                            });
                        }));

                        normalizedMod = getOwn(registry, normalizedMap.id);
                        if (normalizedMod) {
                            //Mark this as a dependency for this plugin, so it
                            //can be traced for cycles.
                            this.depMaps.push(normalizedMap);

                            if (this.events.error) {
                                normalizedMod.on('error', bind(this, function(err) {
                                    this.emit('error', err);
                                }));
                            }
                            normalizedMod.enable();
                        }

                        return;
                    }

                    //If a paths config, then just load that file instead to
                    //resolve the plugin, as it is built into that paths layer.
                    if (bundleId) {
                        this.map.url = context.nameToUrl(bundleId);
                        this.load();
                        return;
                    }

                    load = bind(this, function(value) {
                        this.init([], function() {
                            return value;
                        }, null, {
                            enabled: true
                        });
                    });

                    load.error = bind(this, function(err) {
                        this.inited = true;
                        this.error = err;
                        err.requireModules = [id];

                        //Remove temp unnormalized modules for this module,
                        //since they will never be resolved otherwise now.
                        eachProp(registry, function(mod) {
                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
                                cleanRegistry(mod.map.id);
                            }
                        });

                        onError(err);
                    });

                    //Allow plugins to load other code without having to know the
                    //context or how to 'complete' the load.
                    load.fromText = bind(this, function(text, textAlt) {
                        /*jslint evil: true */
                        var moduleName = map.name
                          , moduleMap = makeModuleMap(moduleName)
                          , hasInteractive = useInteractive;

                        //As of 2.1.0, support just passing the text, to reinforce
                        //fromText only being called once per resource. Still
                        //support old style of passing moduleName but discard
                        //that moduleName in favor of the internal ref.
                        if (textAlt) {
                            text = textAlt;
                        }

                        //Turn off interactive script matching for IE for any define
                        //calls in the text, then turn it back on at the end.
                        if (hasInteractive) {
                            useInteractive = false;
                        }

                        //Prime the system by creating a module instance for
                        //it.
                        getModule(moduleMap);

                        //Transfer any config to this other module.
                        if (hasProp(config.config, id)) {
                            config.config[moduleName] = config.config[id];
                        }

                        try {
                            req.exec(text);
                        } catch (e) {
                            return onError(makeError('fromtexteval', 'fromText eval for ' + id + ' failed: ' + e, e, [id]));
                        }

                        if (hasInteractive) {
                            useInteractive = true;
                        }

                        //Mark this as a dependency for the plugin
                        //resource
                        this.depMaps.push(moduleMap);

                        //Support anonymous modules.
                        context.completeLoad(moduleName);

                        //Bind the value of that module to the value for this
                        //resource ID.
                        localRequire([moduleName], load);
                    });

                    //Use parentName here since the plugin's name is not reliable,
                    //could be some weird string with no path that actually wants to
                    //reference the parentName's path.
                    plugin.load(map.name, localRequire, load, config);
                }));

                context.enable(pluginMap, this);
                this.pluginMaps[pluginMap.id] = pluginMap;
            },

            enable: function() {
                enabledRegistry[this.map.id] = this;
                this.enabled = true;

                //Set flag mentioning that the module is enabling,
                //so that immediate calls to the defined callbacks
                //for dependencies do not trigger inadvertent load
                //with the depCount still being zero.
                this.enabling = true;

                //Enable each dependency
                each(this.depMaps, bind(this, function(depMap, i) {
                    var id, mod, handler;

                    if (typeof depMap === 'string') {
                        //Dependency needs to be converted to a depMap
                        //and wired up to this module.
                        depMap = makeModuleMap(depMap, (this.map.isDefine ? this.map : this.map.parentMap), false, !this.skipMap);
                        this.depMaps[i] = depMap;

                        handler = getOwn(handlers, depMap.id);

                        if (handler) {
                            this.depExports[i] = handler(this);
                            return;
                        }

                        this.depCount += 1;

                        on(depMap, 'defined', bind(this, function(depExports) {
                            if (this.undefed) {
                                return;
                            }
                            this.defineDep(i, depExports);
                            this.check();
                        }));

                        if (this.errback) {
                            on(depMap, 'error', bind(this, this.errback));
                        } else if (this.events.error) {
                            // No direct errback on this module, but something
                            // else is listening for errors, so be sure to
                            // propagate the error correctly.
                            on(depMap, 'error', bind(this, function(err) {
                                this.emit('error', err);
                            }));
                        }
                    }

                    id = depMap.id;
                    mod = registry[id];

                    //Skip special modules like 'require', 'exports', 'module'
                    //Also, don't call enable if it is already enabled,
                    //important in circular dependency cases.
                    if (!hasProp(handlers, id) && mod && !mod.enabled) {
                        context.enable(depMap, this);
                    }
                }));

                //Enable each plugin that is used in
                //a dependency
                eachProp(this.pluginMaps, bind(this, function(pluginMap) {
                    var mod = getOwn(registry, pluginMap.id);
                    if (mod && !mod.enabled) {
                        context.enable(pluginMap, this);
                    }
                }));

                this.enabling = false;

                this.check();
            },

            on: function(name, cb) {
                var cbs = this.events[name];
                if (!cbs) {
                    cbs = this.events[name] = [];
                }
                cbs.push(cb);
            },

            emit: function(name, evt) {
                each(this.events[name], function(cb) {
                    cb(evt);
                });
                if (name === 'error') {
                    //Now that the error handler was triggered, remove
                    //the listeners, since this broken Module instance
                    //can stay around for a while in the registry.
                    delete this.events[name];
                }
            }
        };

        function callGetModule(args) {
            //Skip modules already defined.
            if (!hasProp(defined, args[0])) {
                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
            }
        }

        function removeListener(node, func, name, ieName) {
            //Favor detachEvent because of IE9
            //issue, see attachEvent/addEventListener comment elsewhere
            //in this file.
            if (node.detachEvent && !isOpera) {
                //Probably IE. If not it will throw an error, which will be
                //useful to know.
                if (ieName) {
                    node.detachEvent(ieName, func);
                }
            } else {
                node.removeEventListener(name, func, false);
            }
        }

        /**
         * Given an event from a script node, get the requirejs info from it,
         * and then removes the event listeners on the node.
         * @param {Event} evt
         * @returns {Object}
         */
        function getScriptData(evt) {
            //Using currentTarget instead of target for Firefox 2.0's sake. Not
            //all old browsers will be supported, but this one was easy enough
            //to support and still makes sense.
            var node = evt.currentTarget || evt.srcElement;

            //Remove the listeners once here.
            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
            removeListener(node, context.onScriptError, 'error');

            return {
                node: node,
                id: node && node.getAttribute('data-requiremodule')
            };
        }

        function intakeDefines() {
            var args;

            //Any defined modules in the global queue, intake them now.
            takeGlobalQueue();

            //Make sure any remaining defQueue items get properly processed.
            while (defQueue.length) {
                args = defQueue.shift();
                if (args[0] === null) {
                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' + args[args.length - 1]));
                } else {
                    //args are id, deps, factory. Should be normalized by the
                    //define() function.
                    callGetModule(args);
                }
            }
            context.defQueueMap = {};
        }

        context = {
            config: config,
            contextName: contextName,
            registry: registry,
            defined: defined,
            urlFetched: urlFetched,
            defQueue: defQueue,
            defQueueMap: {},
            Module: Module,
            makeModuleMap: makeModuleMap,
            nextTick: req.nextTick,
            onError: onError,

            /**
             * Set a configuration for the context.
             * @param {Object} cfg config object to integrate.
             */
            configure: function(cfg) {
                //Make sure the baseUrl ends in a slash.
                if (cfg.baseUrl) {
                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
                        cfg.baseUrl += '/';
                    }
                }

                //Save off the paths since they require special processing,
                //they are additive.
                var shim = config.shim
                  , objs = {
                    paths: true,
                    bundles: true,
                    config: true,
                    map: true
                };

                eachProp(cfg, function(value, prop) {
                    if (objs[prop]) {
                        if (!config[prop]) {
                            config[prop] = {};
                        }
                        mixin(config[prop], value, true, true);
                    } else {
                        config[prop] = value;
                    }
                });

                //Reverse map the bundles
                if (cfg.bundles) {
                    eachProp(cfg.bundles, function(value, prop) {
                        each(value, function(v) {
                            if (v !== prop) {
                                bundlesMap[v] = prop;
                            }
                        });
                    });
                }

                //Merge shim
                if (cfg.shim) {
                    eachProp(cfg.shim, function(value, id) {
                        //Normalize the structure
                        if (isArray(value)) {
                            value = {
                                deps: value
                            };
                        }
                        if ((value.exports || value.init) && !value.exportsFn) {
                            value.exportsFn = context.makeShimExports(value);
                        }
                        shim[id] = value;
                    });
                    config.shim = shim;
                }

                //Adjust packages if necessary.
                if (cfg.packages) {
                    each(cfg.packages, function(pkgObj) {
                        var location, name;

                        pkgObj = typeof pkgObj === 'string' ? {
                            name: pkgObj
                        } : pkgObj;

                        name = pkgObj.name;
                        location = pkgObj.location;
                        if (location) {
                            config.paths[name] = pkgObj.location;
                        }

                        //Save pointer to main module ID for pkg name.
                        //Remove leading dot in main, so main paths are normalized,
                        //and remove any trailing .js, since different package
                        //envs have different conventions: some use a module name,
                        //some use a file name.
                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main').replace(currDirRegExp, '').replace(jsSuffixRegExp, '');
                    });
                }

                //If there are any "waiting to execute" modules in the registry,
                //update the maps for them, since their info, like URLs to load,
                //may have changed.
                eachProp(registry, function(mod, id) {
                    //If module already has init called, since it is too
                    //late to modify them, and ignore unnormalized ones
                    //since they are transient.
                    if (!mod.inited && !mod.map.unnormalized) {
                        mod.map = makeModuleMap(id, null, true);
                    }
                });

                //If a deps array or a config callback is specified, then call
                //require with those args. This is useful when require is defined as a
                //config object before require.js is loaded.
                if (cfg.deps || cfg.callback) {
                    context.require(cfg.deps || [], cfg.callback);
                }
            },

            makeShimExports: function(value) {
                function fn() {
                    var ret;
                    if (value.init) {
                        ret = value.init.apply(global, arguments);
                    }
                    return ret || (value.exports && getGlobal(value.exports));
                }
                return fn;
            },

            makeRequire: function(relMap, options) {
                options = options || {};

                function localRequire(deps, callback, errback) {
                    var id, map, requireMod;

                    if (options.enableBuildCallback && callback && isFunction(callback)) {
                        callback.__requireJsBuild = true;
                    }

                    if (typeof deps === 'string') {
                        if (isFunction(callback)) {
                            //Invalid call
                            return onError(makeError('requireargs', 'Invalid require call'), errback);
                        }

                        //If require|exports|module are requested, get the
                        //value for them from the special handlers. Caveat:
                        //this only works while module is being defined.
                        if (relMap && hasProp(handlers, deps)) {
                            return handlers[deps](registry[relMap.id]);
                        }

                        //Synchronous access to one module. If require.get is
                        //available (as in the Node adapter), prefer that.
                        if (req.get) {
                            return req.get(context, deps, relMap, localRequire);
                        }

                        //Normalize module name, if it contains . or ..
                        map = makeModuleMap(deps, relMap, false, true);
                        id = map.id;

                        if (!hasProp(defined, id)) {
                            return onError(makeError('notloaded', 'Module name "' + id + '" has not been loaded yet for context: ' + contextName + (relMap ? '' : '. Use require([])')));
                        }
                        return defined[id];
                    }

                    //Grab defines waiting in the global queue.
                    intakeDefines();

                    //Mark all the dependencies as needing to be loaded.
                    context.nextTick(function() {
                        //Some defines could have been added since the
                        //require call, collect them.
                        intakeDefines();

                        requireMod = getModule(makeModuleMap(null, relMap));

                        //Store if map config should be applied to this require
                        //call for dependencies.
                        requireMod.skipMap = options.skipMap;

                        requireMod.init(deps, callback, errback, {
                            enabled: true
                        });

                        checkLoaded();
                    });

                    return localRequire;
                }

                mixin(localRequire, {
                    isBrowser: isBrowser,

                    /**
                     * Converts a module name + .extension into an URL path.
                     * *Requires* the use of a module name. It does not support using
                     * plain URLs like nameToUrl.
                     */
                    toUrl: function(moduleNamePlusExt) {
                        var ext, index = moduleNamePlusExt.lastIndexOf('.'), segment = moduleNamePlusExt.split('/')[0], isRelative = segment === '.' || segment === '..';

                        //Have a file extension alias, and it is not the
                        //dots from a relative path.
                        if (index !== -1 && (!isRelative || index > 1)) {
                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
                        }

                        return context.nameToUrl(normalize(moduleNamePlusExt, relMap && relMap.id, true), ext, true);
                    },

                    defined: function(id) {
                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);
                    },

                    specified: function(id) {
                        id = makeModuleMap(id, relMap, false, true).id;
                        return hasProp(defined, id) || hasProp(registry, id);
                    }
                });

                //Only allow undef on top level require calls
                if (!relMap) {
                    localRequire.undef = function(id) {
                        //Bind any waiting define() calls to this context,
                        //fix for #408
                        takeGlobalQueue();

                        var map = makeModuleMap(id, relMap, true)
                          , mod = getOwn(registry, id);

                        mod.undefed = true;
                        removeScript(id);

                        delete defined[id];
                        delete urlFetched[map.url];
                        delete undefEvents[id];

                        //Clean queued defines too. Go backwards
                        //in array so that the splices do not
                        //mess up the iteration.
                        eachReverse(defQueue, function(args, i) {
                            if (args[0] === id) {
                                defQueue.splice(i, 1);
                            }
                        });
                        delete context.defQueueMap[id];

                        if (mod) {
                            //Hold on to listeners in case the
                            //module will be attempted to be reloaded
                            //using a different config.
                            if (mod.events.defined) {
                                undefEvents[id] = mod.events;
                            }

                            cleanRegistry(id);
                        }
                    }
                    ;
                }

                return localRequire;
            },

            /**
             * Called to enable a module if it is still in the registry
             * awaiting enablement. A second arg, parent, the parent module,
             * is passed in for context, when this method is overridden by
             * the optimizer. Not shown here to keep code compact.
             */
            enable: function(depMap) {
                var mod = getOwn(registry, depMap.id);
                if (mod) {
                    getModule(depMap).enable();
                }
            },

            /**
             * Internal method used by environment adapters to complete a load event.
             * A load event could be a script load or just a load pass from a synchronous
             * load call.
             * @param {String} moduleName the name of the module to potentially complete.
             */
            completeLoad: function(moduleName) {
                var found, args, mod, shim = getOwn(config.shim, moduleName) || {}, shExports = shim.exports;

                takeGlobalQueue();

                while (defQueue.length) {
                    args = defQueue.shift();
                    if (args[0] === null) {
                        args[0] = moduleName;
                        //If already found an anonymous module and bound it
                        //to this name, then this is some other anon module
                        //waiting for its completeLoad to fire.
                        if (found) {
                            break;
                        }
                        found = true;
                    } else if (args[0] === moduleName) {
                        //Found matching define call for this script!
                        found = true;
                    }

                    callGetModule(args);
                }
                context.defQueueMap = {};

                //Do this after the cycle of callGetModule in case the result
                //of those calls/init calls changes the registry.
                mod = getOwn(registry, moduleName);

                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {
                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
                        if (hasPathFallback(moduleName)) {
                            return;
                        } else {
                            return onError(makeError('nodefine', 'No define call for ' + moduleName, null, [moduleName]));
                        }
                    } else {
                        //A script that does not call define(), so just simulate
                        //the call for it.
                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);
                    }
                }

                checkLoaded();
            },

            /**
             * Converts a module name to a file path. Supports cases where
             * moduleName may actually be just an URL.
             * Note that it **does not** call normalize on the moduleName,
             * it is assumed to have already been normalized. This is an
             * internal API, not a public one. Use toUrl for the public API.
             */
            nameToUrl: function(moduleName, ext, skipExt) {
                var paths, syms, i, parentModule, url, parentPath, bundleId, pkgMain = getOwn(config.pkgs, moduleName);

                if (pkgMain) {
                    moduleName = pkgMain;
                }

                bundleId = getOwn(bundlesMap, moduleName);

                if (bundleId) {
                    return context.nameToUrl(bundleId, ext, skipExt);
                }

                //If a colon is in the URL, it indicates a protocol is used and it is just
                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
                //or ends with .js, then assume the user meant to use an url and not a module id.
                //The slash is important for protocol-less URLs as well as full paths.
                if (req.jsExtRegExp.test(moduleName)) {
                    //Just a plain path, not module name lookup, so just return it.
                    //Add extension if it is included. This is a bit wonky, only non-.js things pass
                    //an extension, this method probably needs to be reworked.
                    url = moduleName + (ext || '');
                } else {
                    //A module that needs to be converted to a path.
                    paths = config.paths;

                    syms = moduleName.split('/');
                    //For each module name segment, see if there is a path
                    //registered for it. Start with most specific name
                    //and work up from it.
                    for (i = syms.length; i > 0; i -= 1) {
                        parentModule = syms.slice(0, i).join('/');

                        parentPath = getOwn(paths, parentModule);
                        if (parentPath) {
                            //If an array, it means there are a few choices,
                            //Choose the one that is desired
                            if (isArray(parentPath)) {
                                parentPath = parentPath[0];
                            }
                            syms.splice(0, i, parentPath);
                            break;
                        }
                    }

                    //Join the path parts together, then figure out if baseUrl is needed.
                    url = syms.join('/');
                    url += (ext || (/^data\:|\?/.test(url) || skipExt ? '' : '.js'));
                    url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : config.baseUrl) + url;
                }

                return config.urlArgs ? url + ((url.indexOf('?') === -1 ? '?' : '&') + config.urlArgs) : url;
            },

            //Delegates to req.load. Broken out as a separate function to
            //allow overriding in the optimizer.
            load: function(id, url) {
                req.load(context, id, url);
            },

            /**
             * Executes a module callback function. Broken out as a separate function
             * solely to allow the build system to sequence the files in the built
             * layer in the right sequence.
             *
             * @private
             */
            execCb: function(name, callback, args, exports) {
                return callback.apply(exports, args);
            },

            /**
             * callback for script loads, used to check status of loading.
             *
             * @param {Event} evt the event from the browser for the script
             * that was loaded.
             */
            onScriptLoad: function(evt) {
                //Using currentTarget instead of target for Firefox 2.0's sake. Not
                //all old browsers will be supported, but this one was easy enough
                //to support and still makes sense.
                if (evt.type === 'load' || (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
                    //Reset interactive script so a script node is not held onto for
                    //to long.
                    interactiveScript = null;

                    //Pull out the name of the module and the context.
                    var data = getScriptData(evt);
                    context.completeLoad(data.id);
                }
            },

            /**
             * Callback for script errors.
             */
            onScriptError: function(evt) {
                var data = getScriptData(evt);
                if (!hasPathFallback(data.id)) {
                    var parents = [];
                    eachProp(registry, function(value, key) {
                        if (key.indexOf('_@r') !== 0) {
                            each(value.depMaps, function(depMap) {
                                if (depMap.id === data.id) {
                                    parents.push(key);
                                }
                                return true;
                            });
                        }
                    });
                    return onError(makeError('scripterror', 'Script error for "' + data.id + (parents.length ? '", needed by: ' + parents.join(', ') : '"'), evt, [data.id]));
                }
            }
        };

        context.require = context.makeRequire();
        return context;
    }

    /**
     * Main entry point.
     *
     * If the only argument to require is a string, then the module that
     * is represented by that string is fetched for the appropriate context.
     *
     * If the first argument is an array, then it will be treated as an array
     * of dependency string names to fetch. An optional function callback can
     * be specified to execute when all of those dependencies are available.
     *
     * Make a local req variable to help Caja compliance (it assumes things
     * on a require that are not standardized), and to give a short
     * name for minification/local scope use.
     */
    req = requirejs = function(deps, callback, errback, optional) {

        //Find the right context, use default
        var context, config, contextName = defContextName;

        // Determine if have config object in the call.
        if (!isArray(deps) && typeof deps !== 'string') {
            // deps is a config object
            config = deps;
            if (isArray(callback)) {
                // Adjust args if there are dependencies
                deps = callback;
                callback = errback;
                errback = optional;
            } else {
                deps = [];
            }
        }

        if (config && config.context) {
            contextName = config.context;
        }

        context = getOwn(contexts, contextName);
        if (!context) {
            context = contexts[contextName] = req.s.newContext(contextName);
        }

        if (config) {
            context.configure(config);
        }

        return context.require(deps, callback, errback);
    }
    ;

    /**
     * Support require.config() to make it easier to cooperate with other
     * AMD loaders on globally agreed names.
     */
    req.config = function(config) {
        return req(config);
    }
    ;

    /**
     * Execute something after the current tick
     * of the event loop. Override for other envs
     * that have a better solution than setTimeout.
     * @param  {Function} fn function to execute later.
     */
    req.nextTick = typeof setTimeout !== 'undefined' ? function(fn) {
        setTimeout(fn, 4);
    }
    : function(fn) {
        fn();
    }
    ;

    /**
     * Export require as a global, but only if it does not already exist.
     */
    if (!require) {
        require = req;
    }

    req.version = version;

    //Used to filter out dependencies that are already paths.
    req.jsExtRegExp = /^\/|:|\?|\.js$/;
    req.isBrowser = isBrowser;
    s = req.s = {
        contexts: contexts,
        newContext: newContext
    };

    //Create default context.
    req({});

    //Exports some context-sensitive methods on global require.
    each(['toUrl', 'undef', 'defined', 'specified'], function(prop) {
        //Reference from contexts instead of early binding to default context,
        //so that during builds, the latest instance of the default context
        //with its config gets used.
        req[prop] = function() {
            var ctx = contexts[defContextName];
            return ctx.require[prop].apply(ctx, arguments);
        }
        ;
    });

    if (isBrowser) {
        head = s.head = document.getElementsByTagName('head')[0];
        //If BASE tag is in play, using appendChild is a problem for IE6.
        //When that browser dies, this can be removed. Details in this jQuery bug:
        //http://dev.jquery.com/ticket/2709
        baseElement = document.getElementsByTagName('base')[0];
        if (baseElement) {
            head = s.head = baseElement.parentNode;
        }
    }

    /**
     * Any errors that require explicitly generates will be passed to this
     * function. Intercept/override it if you want custom error handling.
     * @param {Error} err the error object.
     */
    req.onError = defaultOnError;

    /**
     * Creates the node for the load command. Only used in browser envs.
     */
    req.createNode = function(config, moduleName, url) {
        var node = config.xhtml ? document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') : document.createElement('script');
        node.type = config.scriptType || 'text/javascript';
        node.charset = 'utf-8';
        node.async = true;
        return node;
    }
    ;

    /**
     * Does the request to load a module for the browser case.
     * Make this a separate function to allow other environments
     * to override it.
     *
     * @param {Object} context the require context to find state.
     * @param {String} moduleName the name of the module.
     * @param {Object} url the URL to the module.
     */
    req.load = function(context, moduleName, url) {
        var config = (context && context.config) || {}, node;
        if (isBrowser) {
            //In the browser so use a script tag
            node = req.createNode(config, moduleName, url);
            if (config.onNodeCreated) {
                config.onNodeCreated(node, config, moduleName, url);
            }

            node.setAttribute('data-requirecontext', context.contextName);
            node.setAttribute('data-requiremodule', moduleName);

            //Set up load listener. Test attachEvent first because IE9 has
            //a subtle issue in its addEventListener and script onload firings
            //that do not match the behavior of all other browsers with
            //addEventListener support, which fire the onload event for a
            //script right after the script execution. See:
            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
            //UNFORTUNATELY Opera implements attachEvent but does not follow the script
            //script execution mode.
            if (node.attachEvent && //Check if node.attachEvent is artificially added by custom script or
            //natively supported by browser
            //read https://github.com/jrburke/requirejs/issues/187
            //if we can NOT find [native code] then it must NOT natively supported.
            //in IE8, node.attachEvent does not have toString()
            //Note the test for "[native code" with no closing brace, see:
            //https://github.com/jrburke/requirejs/issues/273
            !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) && !isOpera) {
                //Probably IE. IE (at least 6-8) do not fire
                //script onload right after executing the script, so
                //we cannot tie the anonymous define call to a name.
                //However, IE reports the script as being in 'interactive'
                //readyState at the time of the define call.
                useInteractive = true;

                node.attachEvent('onreadystatechange', context.onScriptLoad);
                //It would be great to add an error handler here to catch
                //404s in IE9+. However, onreadystatechange will fire before
                //the error handler, so that does not help. If addEventListener
                //is used, then IE will fire error before load, but we cannot
                //use that pathway given the connect.microsoft.com issue
                //mentioned above about not doing the 'script execute,
                //then fire the script load event listener before execute
                //next script' that other browsers do.
                //Best hope: IE10 fixes the issues,
                //and then destroys all installs of IE 6-9.
                //node.attachEvent('onerror', context.onScriptError);
            } else {
                node.addEventListener('load', context.onScriptLoad, false);
                node.addEventListener('error', context.onScriptError, false);
            }
            node.src = url;

            //For some cache cases in IE 6-8, the script executes before the end
            //of the appendChild execution, so to tie an anonymous define
            //call to the module name (which is stored on the node), hold on
            //to a reference to this node, but clear after the DOM insertion.
            currentlyAddingScript = node;
            if (baseElement) {
                head.insertBefore(node, baseElement);
            } else {
                head.appendChild(node);
            }
            currentlyAddingScript = null;

            return node;
        } else if (isWebWorker) {
            try {
                //In a web worker, use importScripts. This is not a very
                //efficient use of importScripts, importScripts will block until
                //its script is downloaded and evaluated. However, if web workers
                //are in play, the expectation is that a build has been done so
                //that only one script needs to be loaded anyway. This may need
                //to be reevaluated if other use cases become common.
                importScripts(url);

                //Account for anonymous modules
                context.completeLoad(moduleName);
            } catch (e) {
                context.onError(makeError('importscripts', 'importScripts failed for ' + moduleName + ' at ' + url, e, [moduleName]));
            }
        }
    }
    ;

    function getInteractiveScript() {
        if (interactiveScript && interactiveScript.readyState === 'interactive') {
            return interactiveScript;
        }

        eachReverse(scripts(), function(script) {
            if (script.readyState === 'interactive') {
                return (interactiveScript = script);
            }
        });
        return interactiveScript;
    }

    //Look for a data-main script attribute, which could also adjust the baseUrl.
    if (isBrowser && !cfg.skipDataMain) {
        //Figure out baseUrl. Get it from the script tag with require.js in it.
        eachReverse(scripts(), function(script) {
            //Set the 'head' where we can append children by
            //using the script's parent.
            if (!head) {
                head = script.parentNode;
            }

            //Look for a data-main attribute to set main script for the page
            //to load. If it is there, the path to data main becomes the
            //baseUrl, if it is not already set.
            dataMain = script.getAttribute('data-main');
            if (dataMain) {
                //Preserve dataMain in case it is a path (i.e. contains '?')
                mainScript = dataMain;

                //Set final baseUrl if there is not already an explicit one.
                if (!cfg.baseUrl) {
                    //Pull off the directory of data-main for use as the
                    //baseUrl.
                    src = mainScript.split('/');
                    mainScript = src.pop();
                    subPath = src.length ? src.join('/') + '/' : './';

                    cfg.baseUrl = subPath;
                }

                //Strip off any trailing .js since mainScript is now
                //like a module name.
                mainScript = mainScript.replace(jsSuffixRegExp, '');

                //If mainScript is still a path, fall back to dataMain
                if (req.jsExtRegExp.test(mainScript)) {
                    mainScript = dataMain;
                }

                //Put the data-main script in the files to load.
                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];

                return true;
            }
        });
    }

    /**
     * The function that handles definitions of modules. Differs from
     * require() in that a string for the module should be the first argument,
     * and the function to execute after dependencies are loaded should
     * return a value to define the module corresponding to the first argument's
     * name.
     */
    define = function(name, deps, callback) {
        var node, context;

        //Allow for anonymous modules
        if (typeof name !== 'string') {
            //Adjust args appropriately
            callback = deps;
            deps = name;
            name = null;
        }

        //This module may not have dependencies
        if (!isArray(deps)) {
            callback = deps;
            deps = null;
        }

        //If no name, and callback is a function, then figure out if it a
        //CommonJS thing with dependencies.
        if (!deps && isFunction(callback)) {
            deps = [];
            //Remove comments from the callback string,
            //look for require calls, and pull them into the dependencies,
            //but only if there are function args.
            if (callback.length) {
                callback.toString().replace(commentRegExp, '').replace(cjsRequireRegExp, function(match, dep) {
                    deps.push(dep);
                });

                //May be a CommonJS thing even without require calls, but still
                //could use exports, and module. Avoid doing exports and module
                //work though if it just needs require.
                //REQUIRES the function to expect the CommonJS variables in the
                //order listed below.
                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
            }
        }

        //If in IE 6-8 and hit an anonymous define() call, do the interactive
        //work.
        if (useInteractive) {
            node = currentlyAddingScript || getInteractiveScript();
            if (node) {
                if (!name) {
                    name = node.getAttribute('data-requiremodule');
                }
                context = contexts[node.getAttribute('data-requirecontext')];
            }
        }

        //Always save off evaluating the def call until the script onload handler.
        //This allows multiple modules to be in a file without prematurely
        //tracing dependencies, and allows for anonymous module support,
        //where the module name is not known until the script onload event
        //occurs. If no context, use the global queue, and get it processed
        //in the onscript load callback.
        if (context) {
            context.defQueue.push([name, deps, callback]);
            context.defQueueMap[name] = true;
        } else {
            globalDefQueue.push([name, deps, callback]);
        }
    }
    ;

    define.amd = {
        jQuery: true
    };

    /**
     * Executes the text. Normally just uses eval, but can be modified
     * to use a better, environment-specific call. Only used for transpiling
     * loader plugins, not for plain JS modules.
     * @param {String} text the text to execute/evaluate.
     */
    req.exec = function(text) {
        /*jslint evil: true */
        return eval(text);
    }
    ;

    //Set up with config info.
    req(cfg);
}(this));

define("require-js", function() {});

define('designer/FrameContext', [], function() {
    'use strict';

    function forEach(obj, fn) {
        var keys = Object.keys(obj), key;
        while ((key = keys.shift())) {
            fn(obj[key], key, obj);
        }
    }

    var slice = [].slice, $;

    // We have two contexts for Editor.
    var FrameContextEnum = {
        CHILD_FRAME: 'childFrame',
        PARENT_FRAME: 'parentFrame',
        TOP_WINDOW_FRAME: 'topWindowFrame'
    };

    /**
	 * A singleton / service to create multi-context services. Multi-context
	 * services are isomorphic objects present in two different contexts trying
	 * to communicate with each other.
	 *
	 * In Editor's terminology, it is an object that has some part of code in the
	 * parent frame and some part in the child frame. But both the parts co-exist
	 * together as a multi-context service registered with frameContext, for clarity
	 * and consistency.
	 */
    function FrameContext() {
        switch (this.getCurrentContext()) {
        case FrameContextEnum.TOP_WINDOW_FRAME:
            window.topFrameInjected.frameContext = this;
            break;
        case FrameContextEnum.CHILD_FRAME:
            window.VWOInjected.frameContext = this;
            break;
        case FrameContextEnum.PARENT_FRAME:
            window.frameContext = this;
            break;
        }
    }

    FrameContext.prototype.isChildFrame = function(considerTopFrame) {
        var currentContext = this.getCurrentContext();
        if (considerTopFrame) {
            return currentContext === FrameContextEnum.CHILD_FRAME || currentContext === FrameContextEnum.TOP_WINDOW_FRAME;
        } else {
            return currentContext === FrameContextEnum.CHILD_FRAME;
        }
    }
    ;

    FrameContext.prototype.isParentFrame = function() {
        return this.getCurrentContext() === FrameContextEnum.PARENT_FRAME;
    }
    ;
    FrameContext.prototype.isTopFrame = function() {
        return this.getCurrentContext() === FrameContextEnum.TOP_WINDOW_FRAME;
    }
    ;

    // What context are we currently in?
    FrameContext.prototype.getCurrentContext = function() {
        if (window.topFrameInjected) {
            return FrameContextEnum.TOP_WINDOW_FRAME;
        } else if (window.VWOInjected) {
            return FrameContextEnum.CHILD_FRAME;
        } else {
            return FrameContextEnum.PARENT_FRAME;
        }
    }
    ;

    /**
	 * Calls the postmessage request function asking to call a function in the
	 * other context (frame). The parameters are same as the request function defined
	 * in postmessage.js.
	 *
	 * @return {$.Promise} Returns a promise that will be fulfilled after a response is
	 *                     received from the other frame for this request.
	 */
    FrameContext.prototype.request = function() {
        var args = [].slice.call(arguments);
        switch (this.getCurrentContext()) {
            // since parent frame requests code to be executed in the child frame,
            // request calls are prefixed with VWOInjected.frameContext.services in the parent frame
            // and frameContext.services in child frame
        case FrameContextEnum.CHILD_FRAME:
            if (args[0].indexOf(FrameContextEnum.TOP_WINDOW_FRAME) > -1) {
                args[0] = 'topFrameInjected.frameContext.services.' + args[0].replace(FrameContextEnum.TOP_WINDOW_FRAME + '.', '');
            } else {
                args[0] = 'frameContext.services.' + args[0].replace(FrameContextEnum.PARENT_FRAME + '.', '');
            }
            return window.VWOInjected.request.apply(null, args);
        case FrameContextEnum.PARENT_FRAME:
            if (args[0].indexOf(FrameContextEnum.TOP_WINDOW_FRAME) > -1) {
                args[0] = 'topFrameInjected.frameContext.services.' + args[0].replace(FrameContextEnum.TOP_WINDOW_FRAME + '.', '');
            } else {
                args[0] = 'VWOInjected.frameContext.services.' + args[0].replace(FrameContextEnum.CHILD_FRAME + '.', '');
            }
            return window.request.apply(null, args);
        case FrameContextEnum.TOP_WINDOW_FRAME:
            if (args[0].indexOf(FrameContextEnum.PARENT_FRAME) > -1) {
                args[0] = 'frameContext.services.' + args[0].replace(FrameContextEnum.PARENT_FRAME + '.', '');
            } else {
                args[0] = 'VWOInjected.frameContext.services.' + args[0].replace(FrameContextEnum.CHILD_FRAME + '.', '');
            }
            return window.topFrameInjected.request.apply(null, args);
        }
    }
    ;

    /**
	 * Registers a multi-context service.
	 *
	 * @param  {String} serviceName       The name of the service. Needed to uniquely identify it.
	 * @param  {Object} serviceDefinition An object containing properties / methods belonging to each
	 *                                    of the contexts. The key is the context, and the value is
	 *                                    an object containing methods that go in that context.
	 * @return {Object}                   Returns the service just registered.
	 *
	 * @example
	 *
	 * frameContext.registerService('myService', {
	 *     // some code that will execute in the parent frame
	 *     parentFrame: {
	 *         hello: function() {
	 *             this.childFrame.bye();
	 *         }
	 *     },
	 *     // some code that will execute in the child frame
	 *     childFrame: {
	 *         bye: function() {
	 *             this.parentFrame.hello();
	 *         }
	 *     }
	 * });
	 *
	 */
    FrameContext.prototype.registerService = function(serviceName, serviceDefinition) {
        var self = this, service;
        this.services = this.services || {};
        // save service definitions as well, in case someone wants to access them to
        // extend and create new services
        this.serviceDefinitions = this.serviceDefinitions || {};
        this.serviceDefinitions[serviceName] = serviceDefinition;
        service = this.services[serviceName] = serviceDefinition[this.getCurrentContext()];
        if (!service) {
            return;
        }
        forEach(serviceDefinition, function(contextDefinition, contextName) {
            function convertFunctionsToPromiseCalls(obj, parentPath) {
                if (!obj) {
                    return;
                }
                obj = $.extend({}, obj);
                forEach(obj, function(prop, name) {
                    if (typeof prop === 'function') {
                        var functionPath;
                        if (parentPath) {
                            functionPath = [contextName, serviceName, parentPath, name].join('.');
                        } else {
                            functionPath = [contextName, serviceName, name].join('.');
                        }
                        // the context function is actually delegated to another context using require.
                        obj[name] = function externalContextFn() {
                            return self.request.apply(self, [functionPath].concat(slice.call(arguments)));
                        }
                        ;
                    } else if (typeof prop === 'object') {
                        obj[name] = convertFunctionsToPromiseCalls(prop, parentPath ? [parentPath, name].join('.') : name);
                    }
                });
                return obj;
            }
            // current context functions are already a part of the service
            if (contextName === self.getCurrentContext()) {
                return;
            }

            // if the definition is a context object, use context logic to convert all functions
            // in that context to promise calls
            if (contextDefinition && typeof contextDefinition === 'object') {
                service[contextName] = {};
                // for every context, define a pseudo-context that contains a hashmap of functions in that
                // context stubbed as promise calls that implicitly call request in the other context
                service[contextName] = convertFunctionsToPromiseCalls(contextDefinition);
            } else {
                // otherwise, just copy over the properties / methods to the current context
                service[contextName] = contextDefinition;
            }
        });
        return service;
    }
    ;

    // This is a singleton. Construct an object before exporting.
    var frameContext = new FrameContext();

    /* eslint camelcase: "off" */
    $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;

    return frameContext;
});

define('designer/operations/BaseOperation', ['designer/FrameContext', 'require'], function(frameContext, require) {
    'use strict';

    var operationManager;

    /* eslint camelcase: "off" */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;

    // required manually because of cyclic issues
    require(['designer/OperationManager'], function(_operationManager_) {
        operationManager = _operationManager_;
    });

    // A base operation is a simple object that every other operation extends from.
    var baseOperation = {
        // Each operation has a name. This is used internally to refer to the operation.
        name: null,
        // The type of the operation. Used to identify similar operations to compress
        // later.
        type: null,
        // The operation title. This is what is used to display in the
        title: null,
        // The code is shared between the parent frame and the child frame.
        topWindowFrame: {
        },
        parentFrame: {
            // Initialize the operation. Inheriting operations should override this.
            initialize: function() {
                this.el = VWOEditor.el;

                VWOEditor.el.currentOp = this.name;

                VWOEditor.el.jq.cleanAndReapplyClass(VWOEditor.el.elClass);
                VWOEditor.updateList();

                //Save control html
                var self = this;
                this.el.jq.outerHTML().then(function(controlValue) {
                    self.el.jq.cleanContent(self.el.elClass, controlValue).then(function(cleanedHTML) {
                        self.el.controlDataToPersist = {
                            html: cleanedHTML.replace(/vwo-el-id=".*"/g, '')
                        };
                    });
                });

                this.activate();
            },
            // Triggered by the child frame as operation progresses.
            onProgress: function() {},

            /**
			 * Save this operation's details on the given element by calling el.endOperation.
			 * Also call VWOEditor.close thereafter to close the context menu / widget.
			 *
			 * @param {VWOElement} el    The element to persist the operation to.
			 * @param {Object}     group The group details to add this operation into.
			 *                           Includes group name, title, id and stack
			 *                           (sequence of the applied operations)
			 */
            persist: function(el, group) {
                el = el || this.el || VWOEditor.el;
                var self = this;

                // hack
                el.currentOp = this.name;

                // endOperation saves the operation in the appropriate variation's stack
                var d = el.endOperation(undefined, group).then(function() {
                    VWOEditor.close();
                });
                self.deactivate();
                return d;
            },

            activate: function() {
                operationManager.activateOperation(this);
            },

            deactivate: function() {
                operationManager.deactivateOperation(this);
            },

            cancel: function(el) {
                el = el || this.el || VWOEditor.el;
                var promise = this.childFrame.apply(el, null, el.changes[this.name] || el.control[this.name], true);

                delete el.tempChanges[this.name];

                this.deactivate();
                return promise;
            },

            update: function(params) {
                var el = this.el || VWOEditor.el;
                // TODO: Instead of assigning params to tempchanges, it shud be rather
                // merged with temchanges. Test it.
                el.tempChanges[this.name] = params;

                // TODO: More code in VWOElement.update
            },

            updateUI: function() {
                VWOEditor.refreshCoalHighlights();

                var activeOperations = operationManager.activeOperations, activeOperation;
                for (var operationName in activeOperations) {
                    if (activeOperations.hasOwnProperty(operationName)) {
                        activeOperation = activeOperations[operationName];

                        // if op has handles, update their position, for ex: rearrange and move/resize ops
                        if (activeOperation.hasHandles) {
                            activeOperation.childFrame.updateHandles(this.el, this.options);
                        }
                    }
                }
            }
        },
        childFrame: {
            // Perform any child-frame specific initialization.
            initialize: function() {},
            getControl: function() {},
            /**
			 * Does the element provided already have control set for this operation?
			 *
			 * @param  {VWOElement}  el The element to verify control for.
			 * @return {Boolean}        Does it have control set?
			 */
            hasControl: function(el) {
                return !!el.control && el.control.hasOwnProperty(this.name);
            },
            /**
			 * Well, if the control for an element has not been set on the element itself,
			 * this function goes ahead and does that for you.
			 *
			 * @param  {VWOElement} el       The element we're talking about.
			 * @return {VWOElement}          Guess what, this returns the element itself.
			 */
            saveControl: function(el, propList) {
                var jq = $('.' + el.elClass);

                if (!jq.length) {
                    jq = $(el.shortSelectorPath || el.XPath);
                }

                if (jq.length === 0) {
                    return el;
                }

                var operation = el.currentOp = this.name;

                el.XPath = jq.XPath() || el.XPath;

                if (el.control && el.control.hasOwnProperty(operation)) {
                    return el;
                }

                var params = {};
                params[this.name] = this.getControl(jq, el, propList);
                el.control = $.extend(true, el.control, params);

                return el;
            },
            /**
			 * Pretty serious stuff here. Gotta apply this operation on the given element. This function
			 * does a lot of preperatory work before applying the given changes, and when its done,
			 * it does some post-processing work. The actual change application is delegated to
			 * the applyChanges function.
			 *
			 * @param  {VWOElement}  el        The element in consideration.
			 * @param  {String}      xpath     The selector path of the element to get it by. This exists here
			 *                                 just for legacy reasons and could very well be a property of el
			 *                                 itself.
			 *                                 TODO: as things are standardized, remove this parameter.
			 * @param  {Object}      changes   A hashmap containing the changes to apply on the element.
			 * @param  {Boolean}     isControl Are the given set of changes being applied actually control settings?
			 *                                 If so, the behaviour of certain operations might change.
			 */
            apply: function(el, xpath, changes, isControl) {
                if (!el.isSectionPathModified) {
                    // strip down the selector path first, just in case
                    xpath = window.VWOInjected.processXpath(xpath);
                }

                var getJqFromClass = true;

                var angularWebsite = $('[ng-version]')[0];
                if (angularWebsite && /^6.*$/i.test(angularWebsite.getAttribute('ng-version'))) {
                    getJqFromClass = false;
                }

                var jq = getJqFromClass ? $('.' + el.elClass) : $('');

                // Try to fetch node from xpaths available
                if (jq.length === 0) {
                    /* Try and fetch jq from xpath, if that fails try fetching using processXpath
						i.e if XPATH = DIV + SCRIPT + SCRIPT + DIV#id + A:first-child, chances are that script tags will
						not be there when we try to apply
						whereas elemeent with ProcessXpath = DIV#id + A:first-child will be present as it is independent of script tags
					*/
                    jq = $(el.shortSelectorPath);

                    jq.addClass(el.elClass);
                }

                // the element could not be found so we better return
                if (jq.length === 0) {
                    return;
                }

                // if control isnt there, populate it
                if (!el.control[this.name]) {
                    this.saveControl(el, this.name);
                }

                changes = changes || el.control[this.name];

                // TODO: Move `el` as first params.
                this.applyChanges(jq, changes, isControl, el);

                // do not update jq incase of 'after' type op control
                jq = $('.' + el.elClass);
                if (jq.length === 0) {
                    jq = $(xpath).addClass(el.elClass);
                }
            },
            /**
			 * For a given element, applies its control settings. The control settings
			 * are automatically retrieved from the element itself and are presumed to have
			 * been set before hand for this to work correctly.
			 *
			 * @param  {VWOElement}  el        The element in consideration.
			 * @param  {String}      xpath     The selector path of the element to get it by. This exists here
			 *                                 just for legacy reasons and could very well be a property of el
			 *                                 itself.
			 *                                 TODO: as things are standardized, remove this parameter.
			 */
            applyControl: function(el, xpath) {
                return this.apply(el, xpath, el.control[this.name], true);
            },
            /**
			 * Actually apply the changes on the element. This behaviour is different for
			 * each operation and must be implemented by the operation inheriting this object.
			 */
            applyChanges: function() {}
        }
    };

    return frameContext.registerService('baseOperation', baseOperation);
});

define('designer/inject/utils', [], function() {
    var utils = {};

    utils.getBodyOffset = function() {
        if (window.getComputedStyle(document.body).getPropertyValue('position') !== 'static') {
            return {
                left: vwoe_$('body')[0].getBoundingClientRect().left + vwoe_$(document).scrollLeft(),
                top: vwoe_$('body')[0].getBoundingClientRect().top + vwoe_$(document).scrollTop()
            };
        } else {
            return {
                left: 0,
                top: 0
            }
        }
    }
    ;

    //Method for adding elements on User website - Code Editor button, Notifier
    utils.addEditorElementsOnWebsite = function(mode, isCodeEditorEnabled) {
        if (window === top) {
            if (isCodeEditorEnabled) {
                //Edit code button
                vwo_$('body').append('<a id="vwo-js-global-code" class="global-code-button  btn  text--center  caps vwo-editor-element" href="javascript:void(0)" title="Edit Code">' + '<span class="global-code-button-text vwo-editor-element">Edit Code</span>' + '</a>');

                //Click of Edit Code Button
                vwo_$("#vwo-js-global-code").click(function() {
                    if (mode === 'desktop') {
                        VWOInjected.frameContext.services.topFrameManager.parentFrame.showCodeEditor();
                        VWOInjected.frameContext.services.topFrameManager.blockPointerEventsThroughEditorFrame();
                    } else if (mode === 'mobile') {
                        topFrameInjected.frameContext.services.topFrameManager.parentFrame.showCodeEditor();
                        topFrameInjected.frameContext.services.topFrameManager.blockPointerEventsThroughEditorFrame();
                    }
                });
            }

            //Notifier
            vwo_$('body').append('<div class="notification-bar top vwo-editor-element" style="display: none;">' + '<span class="vwo-editor-element"></span><i class="icon  icon--cross  notification-bar__close-btn vwo-editor-element"></i>' + '</div>');

            //Click of close button in  notifier
            vwo_$(".vwo-editor-element.notification-bar__close-btn").click(function() {
                if (mode === 'desktop') {
                    VWOInjected.frameContext.services.topFrameManager.hideNotification();
                    VWOInjected.frameContext.services.topFrameManager.parentFrame.hideNotification();
                } else if (mode === 'mobile') {
                    topFrameInjected.frameContext.services.topFrameManager.hideNotification();
                    topFrameInjected.frameContext.services.topFrameManager.parentFrame.hideNotification();
                }
            })
        }
    }
    ;

    utils.registerUnloadHandler = function(mode, accountId, loadingAppName) {
        if (window === top) {
            window.setEditorCookie = function() {
                var cookieName = '_vis_editor'
                  , appVersion = 4
                  , cookieValue = appVersion + '_' + accountId + '_' + (loadingAppName || 'app')
                  , expires = Date.now() + 90000
                  , path = '/';

                var cookie = {
                    name: cookieName,
                    value: cookieValue,
                    expires: expires,
                    path: path
                };
                cookie.expires = cookie.expires / 1000;
                cookie.isDeleted = +cookie.isDeleted;

                var cookies = [cookie];

                document.cookie = cookie.name + '=' + cookie.value + '; expires=' + (new Date(cookie.expires)).toGMTString() + '; path=' + cookie.path + '; domain=.vwo.com';

                var domains = ['dev.visualwebsiteoptimizer.com', 'cdn.vwo-analytics.com'];
                domains.forEach(function(domain) {
                    var img = new Image();
                    img.src = '//' + domain + '/cdc?cookies=' + JSON.stringify(cookies) + '&accountId=' + accountId + '&r=' + Math.random();
                });
            }
            ;

            window.onbeforeunload = function(e) {
                if (mode === 'desktop' && VWOInjected.hasUnsavedChanges && VWOInjected.interactionMode !== 'browse') {
                    //VWOInjected.frameContext.services.topFrameManager.parentFrame.setEditorCookie();
                    window.setEditorCookie();
                    return 'You have unsaved changes which will be lost if you navigate away.';
                } else if (mode === 'mobile' && topFrameInjected.hasUnsavedChanges) {
                    //topFrameInjected.frameContext.services.topFrameManager.parentFrame.setEditorCookie();
                    window.setEditorCookie();
                    return 'You have unsaved changes which will be lost if you navigate away.';
                }
            }
            ;
        }
    }
    ;

    utils.registerUserUploadsHandler = function(mode) {
        if (window === top) {
            window.addEventListener('message', function(e) {
                if (e.origin.indexOf('useruploads.vwo.com') > -1) {
                    console.log(e);
                    if (mode === 'desktop') {
                        VWOInjected.frameContext.services.topFrameManager.parentFrame.handleUserUploadEvent(e.data);
                    } else if (mode === 'mobile') {
                        topFrameInjected.frameContext.services.topFrameManager.parentFrame.handleUserUploadEvent(e.data);
                    }
                }
            })
        }
    }
    ;

    utils.getBody = function() {
        return vwo_$('body')[0];
    }
    ;

    utils.getDocumentElement = function() {
        return document.documentElement;
    }
    ;

    utils.getDocHeight = function() {
        var $body = this.getBody();
        var $root = this.getDocumentElement();
        return Math.max(Math.max($body.scrollHeight, $root.scrollHeight), Math.max($body.offsetHeight, $root.offsetHeight), Math.max($body.clientHeight, $root.clientHeight));
    }
    ;

    //This method is on the assumption that the editor proxy url will of the form -
    //https://app.vwo.com/editorProxy/aHR0cHM6Ly9kZXZlbG9wZXIub2t0YS5jb20=/pricing/ or /editorProxy/aHR0cHM6Ly9kZXZlbG9wZXIub2t0YS5jb20=/
    utils.getOriginalUrlFromProxyUrl = function(proxyUrl) {
        var originalUrl = '';

        //Check if the input parameter is a valid proxy url
        if (proxyUrl && proxyUrl.indexOf('/editorProxy') !== -1 && /^((http:|https:)*(\/\/)*(app\.vwo\.com)*\/editorProxy\/.*)$/.test(proxyUrl)) {

            //Replace the url part upto editorProxy/ with '' to get the base64 encoded url string
            proxyUrl = proxyUrl.replace(/^((http:|https:)*(\/\/)*(app\.vwo\.com)*\/editorProxy\/)/, '');

            var tokens = proxyUrl.split('/');
            originalUrl = window.atob(tokens[0]);
            tokens.shift();
            originalUrl += '/' + tokens.join('/');
        } else {
            originalUrl = proxyUrl;
        }
        return originalUrl;
    }
    ;

    //With the implementation of vwoCss in the operations, the operations in existing campaigns continue to use css method
    // and new operations after the change will start using vwoCss method. We need to support both implementations
    // If the changes to apply have !important added to them, apply those changes using vwoCss method as native jquery css method wont consider the !important attribute
    utils.applyCssChanges = function(jq, changes) {
        (changes && JSON.stringify(changes).indexOf('!important') > -1) ? jq.vwoCss(changes) : jq.css(changes);
    }
    ;

    return utils;
});

define('designer/operations/MoveOperation', ['designer/FrameContext', 'designer/operations/BaseOperation', 'designer/inject/utils'], function(frameContext, baseOperation, utils) {
    'use strict';

    /* eslint camelcase: "off" */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;
    var vwoe_$ = frameContext.isParentFrame() && window.vwoe_$;
    var VWOInjected = window.VWOInjected;

    var moveOperation = $.extend(true, {}, frameContext.serviceDefinitions.baseOperation, {
        name: 'move',
        type: 'css',
        title: 'Move',
        parentFrame: {
            /**
			 * Initialize the operation for the given element. In the parent frame,
			 * we use this function to setup widgets and initiate key bindings.
			 * @param  {VWOElement} el  The element we're trying to apply the operation on.
			 */
            initialize: function initialize(el) {
                baseOperation.initialize.apply(this);

                this.el = el = el || VWOEditor.el;

                var d = new $.Deferred()
                  , self = this;

                // set current op on el.
                // todo: ideally this should be unnecessary.
                el.currentOp = this.name;

                // Update values in the Move widget based on the values
                // retrieved from the child frame.
                function updateUI() {
                    $.when(el.jq.css('position'), el.jq.css('z-index')).then(function(position, zIndex) {
                        self.update({
                            left: $('#vwo-move-x').val(),
                            top: $('#vwo-move-y').val(),
                            position: position,
                            zIndex: zIndex
                        }, true);
                    });
                }

                // Add a change listener to the Bring to Front checkbox.
                $('#vwo-move-z').unbind('change').bind('change', function() {
                    var that = this;
                    el.jq.css('position').then(function(position) {
                        el.update({
                            left: $('#vwo-move-x').val(),
                            top: $('#vwo-move-y').val(),
                            position: position,
                            // Set the z-index to an arbitrary large number.
                            // Cuz z-index is always over 9000!!
                            zIndex: $(that).is(':checked') ? 2500000 : 'auto'
                        });
                    });
                });

                // Listen for arrow keys to update the element's UI on keyup.
                $('.numeric').unbind('keyup').unbind('keydown').bind('keyup', function() {
                    updateUI();
                }).bind('keydown', function(e) {
                    // replicate the behaviour of a numeric stepper
                    // todo: this is obsolete. <input type=number> solves this already.
                    // 38 = up arrow
                    // 40 = down arrow
                    if ([38, 40].indexOf(e.which) !== -1) {
                        var val = parseInt(this.value, 10) || 0;
                        if (e.which === 38) {
                            $(this).val(val + 1 + this.value.replace('' + val, ''));
                        } else if (e.which === 40) {
                            $(this).val(val - 1 + this.value.replace('' + val, ''));
                        }
                    }
                    updateUI();
                });

                // not sure why this is being done, but this is apparently important
                if (!VWOEditor.isMobileApp) {
                    el.jq.cleanAndReapplyClass(el.elClass).thenResolve(d);
                } else {
                    d.resolve();
                }

                // bind arrow keys to move the selected element around
                $(document).unbind('keydown.move').bind('keydown.move', function(e) {
                    var el = VWOEditor.el;
                    // early return if an input is in focus
                    if (e.target.tagName.toLowerCase() === 'input') {
                        return;
                    }
                    var dx = 0
                      , dy = 0
                      , shiftMoveAmount = 20;
                    if (e.which === 37) {
                        // left arrow
                        dx = e.shiftKey ? -shiftMoveAmount : -1;
                    } else if (e.which === 39) {
                        // right arrow
                        dx = e.shiftKey ? shiftMoveAmount : 1;
                    }
                    if (e.which === 38) {
                        // up arrow
                        dy = e.shiftKey ? -shiftMoveAmount : -1;
                    } else if (e.which === 40) {
                        // down arrow
                        dy = e.shiftKey ? shiftMoveAmount : 1;
                    }

                    $.when(el.jq.css('left'), el.jq.css('top'), el.jq.css('position')).then(function(left, top, position) {
                        var params = {
                            left: (parseInt(left, 10) || 0) + dx,
                            top: (parseInt(top, 10) || 0) + dy,
                            position: position === 'static' ? 'relative' : position,
                            zIndex: $('#vwo-move-z').is(':checked') ? 2500000 : 'auto'
                        };
                        params.left += 'px';
                        params.top += 'px';
                        self.update(params, true);
                        self.updateUI(params);
                    });
                });

                return d.then(function() {
                    // save the control
                    self.childFrame.saveControl(el).then(function(updatedEl) {
                        // when control is saved in child, it should be updated on this instance
                        // of VWOElement as well. (Since the element would get copied in process
                        // of communication with the child frame.)
                        $.extend(true, el, updatedEl);
                        el.jq = vwoe_$('.' + el.elClass);
                    });
                    // and delegate the rest of the initialization to the child frame.
                    self.childFrame.initialize(el);
                });
            },
            /**
			 * Called by the child frame on each progress event triggered by a drag / drop
			 * event from the child frame for this operation.
			 *
			 * @param  {Object} params The most up-to-date params the elemnt has at the moment.
			 *                         Constitutes position, top, left and z-index css values of the element.
			 * @return {[type]}        [description]
			 */
            onProgress: function onProgress(params) {
                this.update(params);
                this.updateUI(params);
            },
            /**
			 * Update the element's tempChanges with the most-to-date changes (progress) of this operation
			 * while this operation is in progress.
			 *
			 * @param  {Object}  params      The changeset to update tempChanges for this operation with.
			 *                               Constitutes position, top, left and z-index css values of the element.
			 * @param  {Boolean} shouldApply Should updation be delegated to the child frame to reflect
			 *                               back on the target element as well? Ordinarily this would not
			 *                               be needed. So defaults to false.
			 */
            update: function(params, shouldApply) {
                var el = this.el;
                // TODO: Instead of assigning params to tempchanges, it shud be rather
                // merged with temchanges. Test it.
                el.tempChanges[this.name] = params;

                if (!shouldApply) {
                    return;
                }

                this.childFrame.apply(el, null, params).then(function() {
                    // Realign the shim and glass after op has completed
                    el.jq.borderify().shimmy();
                    el.jq.offset().then(function(offset) {
                        vwoe_$('#_vwo_glass_layer').css({
                            top: offset.top,
                            left: offset.left
                        });
                    });
                });
            },
            /**
			 * Update the Move widget with the most up-to-date changes (progress) of this operation.
			 * @param  {Object}  params      The changeset to update the widget using.
			 *                               Constitutes position, top, left and z-index css values of the element.
			 */
            updateUI: function updateUI(params) {
                var distanceUnit = VWOEditor.isMobileApp ? 'pts' : 'px';

                VWOEditor.refreshCoalHighlights();

                // find the operation here, this is most relevant in case of move n resize only!
                $('#vwo-move-x').val((parseInt(params.left, 10) || 0) + (('' + params.left).replace('' + (parseInt(params.left, 10) || 0), '') || distanceUnit));
                $('#vwo-move-y').val((parseInt(params.top, 10) || 0) + (('' + params.top).replace('' + (parseInt(params.top, 10) || 0), '') || distanceUnit));
                $('#vwo-move-z').attr('checked', +params['z-index'] === 2500000);
                $('#vwo-contextual-box').gravitize($('body'), VWOEditor.el.jq, VWOEditor.x, VWOEditor.y);
            }
        },
        childFrame: {
            /**
			 * Initializes some stuff in the child frame after parent is done with its part.
			 * This mostly includes setting up a jQuery UI Draggable on the selected element.
			 * @param  {VWOElement} el  The element we're dealing with.
			 */
            initialize: function initialize(el) {
                var self = this
                  , elClass = el.elClass
                  , $node = $('.' + elClass)
                  , positionCSS = $node.css('position') === 'static' ? 'relative' : $node.css('position')
                  , display = $node.css('display')
                  , top = $node.css('top')
                  , left = $node.css('left')
                  , outerWidth = $node.outerWidth()
                  , outerHeight = $node.outerHeight()
                  , offset = $node.offset()
                  , originalTop = parseInt(top, 10) || 0
                  , originalLeft = parseInt(left, 10) || 0;

                var params = {
                    position: positionCSS,
                    top: top.replace('auto', '0'),
                    left: left.replace('auto', '0'),
                    'z-index': $node.css('z-index')
                };

                // Trigger a progress right away.
                this.parentFrame.onProgress(params);

                // Add a glass layer over the element and make it draggable. As the glass
                // overlay is dragged, move along the element as well.
                $('<div id="_vwo_glass_layer"></div>').appendTo('body').css({
                    left: offset.left,
                    top: offset.top,
                    height: outerHeight,
                    width: outerWidth,
                    cursor: 'move'
                }).drag('start', function() {
                    $node.css({
                        position: positionCSS,
                        display: display.match(/table/i) ? 'block' : display
                    });
                }).drag(function(ev, dd) {
                    var params = {
                        position: positionCSS,
                        top: originalTop + dd.deltaY,
                        left: originalLeft + dd.deltaX,
                        'z-index': $node.css('z-index')
                    };

                    // Ensure moving of borders and the shim after each drag.
                    $node.css(params).borderify().shimmy();

                    $('#_vwo_glass_layer').css({
                        top: $node.offset().top,
                        left: $node.offset().left
                    });

                    // Communicate about the progress event to the parent frame.
                    self.parentFrame.onProgress(params);

                    VWOInjected.enableMagicScroll();
                }).drop(function() {
                    originalTop = parseInt($node.css('top'), 10) || 0;
                    originalLeft = parseInt($node.css('left'), 10) || 0;
                });
            },
            /**
			 * Gets the control values for the given element and this operation.
			 * For this operation, it actually gets the most current changes. This is
			 * called by saveControl only if control has not been get yet.
			 *
			 * So it might seem like a misleading name for what this code does, but this
			 * function acts like a protected function that was overriden from its base
			 * class but is not supposed to be publicly accessed.
			 *
			 * @param  {jQuery}  jq  The jQuery reference to the element we're dealing with.
			 * @return {Object}      Returns the current changeset for move operation.
			 *                       Constitutes position, top, left and z-index css values of the element.
			 */
            getControl: function getControl(jq) {
                var retval = {
                    position: jq.css('position'),
                    left: jq.css('left').replace('auto', '0'),
                    top: jq.css('top').replace('auto', '0'),
                    zIndex: jq.css('z-index')
                };

                return retval;
            },
            /**
			 * Actually applies the css changes passed in the parameters to the given jquery element.
			 * For move, this is as simple as calling jq.css().
			 *
			 * @param  {jQuery}  jq       The jQuery reference to the element we're dealing with.
			 * @param  {Object}  changes  A list of move-related css changes to apply.
			 *                            Constitutes position, top, left and z-index css values of the element.
			 */
            applyChanges: function(jq, changes) {
                utils.applyCssChanges(jq, changes);
            }
        }
    });

    return frameContext.registerService('moveOperation', moveOperation);
});

define('designer/operations/MoveResizeOperation', ['designer/FrameContext', 'designer/operations/BaseOperation', 'designer/inject/utils'], function(frameContext, baseOperation, utils) {
    'use strict';

    /* eslint camelcase: "off" */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;
    var vwoe_$ = frameContext.isParentFrame() && window.vwoe_$;
    var VWOInjected = window.VWOInjected;

    var moveResizeOperation = $.extend(true, {}, frameContext.serviceDefinitions.baseOperation, {
        name: 'moveResize',
        type: 'css',
        title: 'Move / Resize',
        hasHandles: true,
        parentFrame: {
            /**
			 * Initialize the operation for the given element. In the parent frame,
			 * we use this function to setup widgets and initiate key bindings.
			 * @param  {VWOElement} el  The element we're trying to apply the operation on.
			 */
            initialize: function initialize(el, options) {
                baseOperation.initialize.apply(this);

                this.el = el = el || VWOEditor.el;
                this.options = options = options || {};

                var d = new $.Deferred()
                  , self = this;

                // set current op on el.
                // todo: ideally this should be unnecessary.
                el.currentOp = this.name;

                // Update values in the MoveResize widget based on the values
                // retrieved from the child frame.
                function updateUI() {
                    $.when(el.jq.css('position'), el.jq.css('display'), el.jq.css('z-index'), el.jq.width(), el.jq.outerWidth(), el.jq.height(), el.jq.outerHeight(), el.jq.css('box-sizing')).then(function(position, display, zIndex, width, outerWidth, height, outerHeight, boxSizing) {
                        var diffH = outerHeight - height
                          , diffW = outerWidth - width;

                        if (boxSizing === 'border-box') {
                            diffH = diffW = 0;
                        }

                        height = $('#vwo-resize-height').val().replace(/-?([\d]*)/, (parseInt($('#vwo-resize-height').val(), 10) || 0) - diffH);
                        width = $('#vwo-resize-width').val().replace(/-?([\d]*)/, (parseInt($('#vwo-resize-width').val(), 10) || 0) - diffW);

                        var smartUpdate = {
                            left: $('#vwo-move-x').val(),
                            top: $('#vwo-move-y').val(),
                            height: height,
                            width: width,
                            zIndex: zIndex,
                            position: (position === 'static' ? 'relative' : position),
                            display: display
                        };

                        if (el.tag !== 'IMG') {
                            if (parseInt(height, 10) === parseInt(el.uiParams.height, 10)) {
                                delete smartUpdate.height;
                            }

                            if (parseInt(width, 10) === parseInt(el.uiParams.width, 10)) {
                                delete smartUpdate.width;
                            }
                        }

                        self.update(smartUpdate, true);
                    });
                }

                // Add a change listener to the Bring to Front checkbox.
                $('#vwo-move-z').unbind('change').bind('change', function() {
                    // Set the z-index to an arbitrary large number. Cuz z-index is always over 9000!!
                    el.jq.css('z-index', $(this).is(':checked') ? 2500000 : 'auto').then(updateUI);
                });

                $('#vwo-resize-aspect-ratio').attr('checked', false);
                self.childFrame.toggleAspectRatio(el, false);

                $('#vwo-resize-aspect-ratio').unbind('change').bind('change', function() {
                    self.childFrame.toggleAspectRatio(el, $(this).is(':checked'));
                });

                // Listen for arrow keys to update the element's UI on keyup.
                $('.numeric').unbind('keyup').unbind('keydown').bind('keyup', function() {
                    updateUI();
                }).bind('keydown', function(e) {
                    // replicate the behaviour of a numeric stepper
                    // todo: this is obsolete. <input type=number> solves this already.
                    // 38 = up arrow
                    // 40 = down arrow
                    if ([38, 40].indexOf(e.which) !== -1) {
                        var val = parseInt(this.value, 10) || 0;
                        if (e.which === 38) {
                            $(this).val(val + 1 + this.value.replace('' + val, ''));
                        } else if (e.which === 40) {
                            $(this).val(val - 1 + this.value.replace('' + val, ''));
                        }
                    }
                    updateUI();
                });

                // bind arrow keys to move the selected element around
                $(document).unbind('keydown.move').bind('keydown.move', function(e) {
                    var el = VWOEditor.el;
                    // early return if an input is in focus
                    if (e.target.tagName.toLowerCase() === 'input' || !el) {
                        return;
                    }
                    var dx = 0
                      , dy = 0
                      , shiftMoveAmount = 20;
                    if (e.which === 37) {
                        // left arrow
                        dx = e.shiftKey ? -shiftMoveAmount : -1;
                    } else if (e.which === 39) {
                        // right arrow
                        dx = e.shiftKey ? shiftMoveAmount : 1;
                    }
                    if (e.which === 38) {
                        // up arrow
                        dy = e.shiftKey ? -shiftMoveAmount : -1;
                    } else if (e.which === 40) {
                        // down arrow
                        dy = e.shiftKey ? shiftMoveAmount : 1;
                    }

                    $.when(el.jq.css('left'), el.jq.css('top'), el.jq.css('position'), el.jq.css('display'), el.jq.css('z-index'), el.jq.width(), el.jq.outerWidth(), el.jq.height(), el.jq.outerHeight(), el.jq.css('box-sizing')).then(function(left, top, position, display, zIndex, width, outerWidth, height, outerHeight, boxSizing) {
                        var diffH = outerHeight - height
                          , diffW = outerWidth - width;

                        if (boxSizing === 'border-box') {
                            diffH = diffW = 0;
                        }

                        height = $('#vwo-resize-height').val().replace(/-?([\d]*)/, (parseInt($('#vwo-resize-height').val(), 10) || 0) - diffH);
                        width = $('#vwo-resize-width').val().replace(/-?([\d]*)/, (parseInt($('#vwo-resize-width').val(), 10) || 0) - diffW);
                        var finalLeft = (parseInt(left, 10) || 0) + dx
                          , finalTop = (parseInt(top, 10) || 0) + dy
                          , params = {
                            top: finalTop,
                            left: finalLeft,
                            height: height,
                            width: width,
                            zIndex: zIndex,
                            position: position,
                            display: display
                        }
                          , uiParams = {
                            top: finalTop,
                            left: finalLeft,
                            height: outerHeight,
                            width: outerWidth,
                            zIndex: zIndex
                        };

                        params.left += 'px';
                        params.top += 'px';
                        uiParams.left += 'px';
                        uiParams.top += 'px';

                        el.uiParams = uiParams;

                        self.update(params, true);
                        self.updateUI(uiParams, true);
                    });
                });

                el.jq.cleanAndReapplyClass(el.elClass).thenResolve(d);

                if (VWOEditor.isMobile) {
                    this.allowPointerEventsThroughSelectedElement();
                }

                return d.then(function() {
                    // save the control
                    self.childFrame.saveControl(el).then(function(updatedEl) {
                        // when control is saved in child, it should be updated on this instance
                        // of VWOElement as well. (Since the element would get copied in process
                        // of communication with the child frame.)
                        $.extend(true, el, updatedEl);
                        el.jq = vwoe_$('.' + el.elClass);
                    });
                    // and delegate the rest of the initialization to the child frame.
                    self.childFrame.initialize(el, options);
                });
            },
            /**
			 * Called by the child frame on each progress event triggered by a drag / drop or resize
			 * event from the child frame for this operation.
			 *
			 * @param  {Object} params The most up-to-date params the elemnt has at the moment.
			 *                         Constitutes position, top, left and z-index css values of the element.
			 * @return {[type]}        [description]
			 */
            onProgress: function onProgress(params, uiParams) {
                this.update(params);
                this.updateUI(uiParams || params);
            },
            /**
			 * Update the element's tempChanges with the most-to-date changes (progress) of this operation
			 * while this operation is in progress.
			 *
			 * @param  {Object}  params      The changeset to update tempChanges for this operation with.
			 *                               Constitutes display, position, height, width, top, left and
			 *                               z-index css values of the element.
			 * @param  {Boolean} shouldApply Should updation be delegated to the child frame to reflect
			 *                               back on the target element as well? Ordinarily this would not
			 *                               be needed. So defaults to false.
			 */
            update: function(params, shouldApply) {
                var el = this.el;
                var numberOnlyRegex = /^\d+$/;
                // TODO: Instead of assigning params to tempchanges, it shud be rather
                // merged with temchanges. Test it.

                if (numberOnlyRegex.test(params.width)) {
                    params.width = params.width + 'px';
                }

                if (numberOnlyRegex.test(params.height)) {
                    params.height = params.height + 'px';
                }

                if (numberOnlyRegex.test(params.left)) {
                    params.left = params.left + 'px';
                }

                if (numberOnlyRegex.test(params.top)) {
                    params.top = params.top + 'px';
                }

                el.tempChanges[this.name] = params;

                if (!shouldApply) {
                    return;
                }

                this.childFrame.apply(el, null, params).then(function() {
                    // Realign the shim and glass after op has completed
                    el.jq.borderify().shimmy();
                    $.when(el.jq.offset(), el.jq.outerWidth(), el.jq.outerHeight()).then(function(offset, outerWidth, outerHeight) {
                        vwoe_$('#_vwo_glass_layer').css({
                            top: offset.top,
                            left: offset.left,
                            height: outerHeight,
                            width: outerWidth
                        });
                    });
                });
            },
            /**
			 * Update the Move widget with the most up-to-date changes (progress) of this operation.
			 * @param  {Object}  params      The changeset to update the widget using.
			 *                               Constitutes display, position, top, left, height, width and
			 *                               z-index css values of the element.
			 * @param  {Boolean}  shouldGravitize      Weather to gravitize the contextual box or not.
			 */
            updateUI: function updateUI(params, shouldGravitize) {
                var distanceUnit = VWOEditor.isMobileApp ? 'pts' : 'px';

                if (params) {
                    this.el.uiParams = params;
                    // find the operation here, this is most relevant in case of move n resize only!
                    $('#vwo-move-x').val((parseInt(params.left, 10) || 0) + (('' + params.left).replace('' + (parseInt(params.left, 10) || 0), '') || distanceUnit));
                    $('#vwo-move-y').val((parseInt(params.top, 10) || 0) + (('' + params.top).replace('' + (parseInt(params.top, 10) || 0), '') || distanceUnit));
                    $('#vwo-move-z').attr('checked', +params.zIndex === 2500000);
                    $('#vwo-resize-width').val((parseInt(params.width, 10) || 0) + (('' + params.width).replace('' + (parseInt(params.width, 10) || 0), '') || distanceUnit));
                    $('#vwo-resize-height').val((parseInt(params.height, 10) || 0) + (('' + params.height).replace('' + (parseInt(params.height, 10) || 0), '') || distanceUnit));
                }

                if (shouldGravitize) {
                    this.gravitize();
                }

                baseOperation.updateUI.call(this);
            },
            gravitize: function() {
                $('#vwo-contextual-box').gravitize($('body'), VWOEditor.el.jq, VWOEditor.x, VWOEditor.y);
            },
            hideContextualBox: function() {
                $('#vwo-contextual-box').fadeOut('fast');
            },
            showContextualBox: function() {
                $('#vwo-contextual-box').fadeIn('fast');

                if (VWOEditor.isMobile) {
                    frameContext.services.elementManager.topWindowFrame.blockPointerEventsThroughFrame();
                    this.allowPointerEventsThroughSelectedElement();
                }
            },
            deactivate: function deactivate() {
                $(document).unbind('keydown.move');
                baseOperation.deactivate.call(this);
            },
            allowPointerEventsThroughSelectedElement: function() {
                $.when(VWOEditor.el.jq.getBoundingCoordinates()).then(function(boundingCoordinates) {

                    //Hack for increasing the bounding area to accomodate the resize handles
                    boundingCoordinates.x1 -= 10;
                    boundingCoordinates.x2 += 10;
                    boundingCoordinates.y1 -= 10;
                    boundingCoordinates.y2 += 10;

                    frameContext.services.elementManager.allowPointerEvents(boundingCoordinates);
                    var $contextualBox = $('#vwo-contextual-box');
                    var $contextualBoxOffset = $contextualBox.offset();
                    var contextualBoxCoordinates = {
                        top: $contextualBoxOffset.top,
                        left: $contextualBoxOffset.left,
                        right: $contextualBoxOffset.left + $contextualBox.width(),
                        bottom: $contextualBoxOffset.top + $contextualBox.height()
                    };

                    frameContext.services.elementManager.allowPointerEvents(boundingCoordinates, contextualBoxCoordinates);
                });
            }
        },
        childFrame: {
            updateHandles: function(el, options) {
                options = options || {};

                var $node = $('.' + el.elClass)
                  , outerWidth = $node.outerWidth()
                  , outerHeight = $node.outerHeight()
                  , offset = $node.offset();

                if (window.getComputedStyle(document.body).getPropertyValue('position') !== 'static') {
                    offset.left -= ($('body')[0].getBoundingClientRect().left + $(document).scrollLeft());
                    offset.top -= ($('body')[0].getBoundingClientRect().top + $(document).scrollTop());
                } else {
                    offset.left += parseInt(window.getComputedStyle(document.getElementsByTagName('body')[0]).getPropertyValue('border-left-width').replace('px', ''), 10);
                    offset.top += parseInt(window.getComputedStyle(document.getElementsByTagName('body')[0]).getPropertyValue('border-top-width').replace('px', ''), 10);
                }

                if ($('html').attr('_vwo_parallax') === 'true') {
                    offset.top += $(document).scrollTop();
                }

                $('#_vwo_glass_layer').css({
                    left: offset.left,
                    top: offset.top,
                    height: outerHeight,
                    width: outerWidth
                });
            },
            /**
			 * Initializes some stuff in the child frame after parent is done with its part.
			 * This mostly includes setting up a jQuery UI draggable on the selected element
			 * for move and resize.
			 *
			 * @param  {VWOElement} el  The element we're dealing with.
			 */
            initialize: function initialize(el, options) {
                options = options || {};

                var $node = $('.' + el.elClass)
                  , positionCSS = ($node.css('position') === 'static') ? 'relative' : $node.css('position')
                  , display = $node.css('display');

                // FIXME: Check if this is the right behavior or not. Adding inline-block to random
                // elements can destroy page layout. It was anyways not working for a long time now.
                // display = (display === 'inline') ? 'inline-block' : display;
                display = display.match(/table/i) ? 'block' : display;

                $node.borderify().shimmy();

                var self = this
                  , top = $node.css('top')
                  , left = $node.css('left')
                  , outerWidth = $node.outerWidth()
                  , outerHeight = $node.outerHeight()
                  , offset = $node.offset()
                  , originalTop = parseInt(top, 10) || 0
                  , originalLeft = parseInt(left, 10) || 0
                  , width = $node.css('width')
                  , height = $node.css('height');

                var params = {
                    position: positionCSS,
                    top: top.replace('auto', '0'),
                    left: left.replace('auto', '0'),
                    zIndex: $node.css('z-index'),
                    display: display,
                    height: height,
                    width: width
                };

                // Trigger a progress right away.
                this.parentFrame.onProgress(params, {
                    top: top.replace('auto', '0'),
                    left: left.replace('auto', '0'),
                    height: outerHeight,
                    width: outerWidth,
                    zIndex: $node.css('z-index')
                });

                if ($('html').attr('_vwo_parallax') === 'true') {
                    offset.top += $(document).scrollTop();
                }

                // Add a glass layer over the element and make it draggable. As the glass
                // overlay is dragged, move along the element as well.
                var layer = $('<div id="_vwo_glass_layer" class="handle--move">' + '<div class="_vwo_handle NE"></div>' + '<div class="_vwo_handle NN"></div>' + '<div class="_vwo_handle NW"></div>' + '<div class="_vwo_handle WW"></div>' + '<div class="_vwo_handle EE"></div>' + '<div class="_vwo_handle SW"></div>' + '<div class="_vwo_handle SS"></div>' + '<div class="_vwo_handle SE"></div>' + '</div>').appendTo('body').css({
                    left: offset.left,
                    top: offset.top,
                    height: outerHeight,
                    width: outerWidth
                }).drag('start', function(ev, dd) {
                    self.applyChanges($node, {
                        position: positionCSS,
                        display: display
                    });

                    dd.attr = ev.target.className;
                    dd.width = parseInt($node.css('width'), 10) || 0;
                    dd.height = parseInt($node.css('height'), 10) || 0;
                    // Calculating ratio for maintainning Aspect Ratio
                    dd.ratio = dd.width / dd.height;

                    self.parentFrame.hideContextualBox();

                    frameContext.services.elementManager.resetEditor();
                }).drag(function(ev, dd) {
                    // Getting the isAspectRatioEnabled flag from the data saved on the current node (by @toggleAspectRatio method) selected in child, and calculating the aspect ratio accordingly.
                    var isAspectRatioEnabled = $node.data('isAspectRatioEnabled'), props = {}, constrainedDeltaY, constrainedDeltaX;

                    // note the use of height internally. This is because we can only modify the height, but to the user, what is visible is the outerHeight, so we show him that
                    if (dd.attr.indexOf('_vwo_handle') !== -1 && dd.attr.indexOf('handle--move') === -1) {
                        if (isAspectRatioEnabled) {
                            if (dd.attr.indexOf('E') > -1) {
                                constrainedDeltaY = dd.deltaX / dd.ratio;
                                constrainedDeltaX = constrainedDeltaY * dd.ratio;
                                props.width = Math.max(20, dd.width + constrainedDeltaX);
                                props.height = Math.max(20, dd.height + constrainedDeltaY);
                            } else if (dd.attr.indexOf('S') > -1) {
                                constrainedDeltaX = dd.deltaY * dd.ratio;
                                constrainedDeltaY = constrainedDeltaX / dd.ratio;
                                props.height = Math.max(20, dd.height + constrainedDeltaY);
                                props.width = Math.max(20, dd.width + constrainedDeltaX);
                            } else if (dd.attr.indexOf('W') > -1) {
                                constrainedDeltaY = dd.deltaX / dd.ratio;
                                constrainedDeltaX = constrainedDeltaY * dd.ratio;
                                props.width = Math.max(20, dd.width - constrainedDeltaX);
                                props.height = Math.max(20, dd.height - constrainedDeltaY);
                            } else if (dd.attr.indexOf('N') > -1) {
                                constrainedDeltaX = dd.deltaY * dd.ratio;
                                constrainedDeltaY = constrainedDeltaX / dd.ratio;
                                props.height = Math.max(20, dd.height - constrainedDeltaY);
                                props.width = Math.max(20, dd.width - constrainedDeltaX);
                            }
                        } else {
                            if (dd.attr.indexOf('E') > -1) {
                                props.width = Math.max(20, dd.width + dd.deltaX);
                            }
                            if (dd.attr.indexOf('S') > -1) {
                                props.height = Math.max(20, dd.height + dd.deltaY);
                            }
                            if (dd.attr.indexOf('W') > -1) {
                                props.width = Math.max(20, dd.width - dd.deltaX);
                            }
                            if (dd.attr.indexOf('N') > -1) {
                                props.height = Math.max(20, dd.height - dd.deltaY);
                            }
                        }
                    }

                    if (props.height !== undefined) {
                        props.height += 'px';
                    } else {
                        props.height = dd.height + 'px';
                    }

                    if (props.width !== undefined) {
                        props.width += 'px';
                    } else {
                        props.width = dd.width + 'px';
                    }

                    var paddingLeft, paddingRight, borderLeft, borderRight, paddingTop, paddingBottom, borderTop, borderBottom;

                    if ($node.css('box-sizing') === 'border-box') {
                        paddingLeft = parseInt($node.css('padding-left'), 10) || 0;
                        paddingRight = parseInt($node.css('padding-right'), 10) || 0;
                        paddingTop = parseInt($node.css('padding-top'), 10) || 0;
                        paddingBottom = parseInt($node.css('padding-bottom'), 10) || 0;
                        borderLeft = parseInt($node.css('border-left'), 10) || 0;
                        borderRight = parseInt($node.css('border-right'), 10) || 0;
                        borderTop = parseInt($node.css('border-top'), 10) || 0;
                        borderBottom = parseInt($node.css('border-bottom'), 10) || 0;

                        if (typeof props.width === 'string' && props.width.indexOf('px') >= 0) {
                            props.width = parseInt(props.width, 10) + paddingLeft + paddingRight + borderLeft + borderRight;
                        }
                        if (typeof props.height === 'string' && props.height.indexOf('px') >= 0) {
                            props.height = parseInt(props.height, 10) + paddingTop + paddingBottom + borderTop + borderBottom;
                        }
                    }

                    if (dd.attr.indexOf('handle--move') !== -1 || dd.attr.indexOf('_vwo_handle') === -1) {
                        // move logic
                        props.top = originalTop + dd.deltaY;
                        props.left = originalLeft + dd.deltaX;
                    } else {
                        props.top = props.top || originalTop;
                        props.left = props.left || originalLeft;
                    }

                    props.zIndex = $node.css('z-index');
                    props.position = positionCSS;
                    props.display = $node.css('display');

                    var smartWidth = parseInt(width, 10);
                    var smartHeight = parseInt(height, 10);

                    if ($node.css('box-sizing') === 'border-box') {
                        smartWidth += paddingLeft + paddingRight + borderLeft + borderRight;
                        smartHeight += paddingTop + paddingBottom + borderTop + borderBottom;
                    }

                    if ($node[0].tagName.toLowerCase() !== 'img') {
                        if (parseInt(props.width, 10) === smartWidth) {
                            delete props.width;
                        }

                        if (parseInt(props.height, 10) === smartHeight) {
                            delete props.height;
                        }
                    }

                    // This handles cases when px key has not been appended to any of the keys mentioned.
                    var addPxToKeys = ['top', 'right', 'bottom', 'left'];

                    for (var p = 0; p < addPxToKeys.length; p++) {
                        var currentKey = props[addPxToKeys[p]];
                        // Only undefined has been checked since we remove the keys that are not required and we intend to do nothing with those keys.
                        if (currentKey !== undefined) {
                            // Convert number to string in case
                            currentKey = currentKey + '';
                        }
                        if (currentKey && currentKey.indexOf('px') === -1) {
                            // Override the property with px appended
                            props[addPxToKeys[p]] = currentKey + 'px';
                        }
                    }

                    self.applyChanges($node, props);

                    // Ensure moving of borders and the shim after each drag.
                    $node.borderify().shimmy();

                    // Communicate about the progress event to the parent frame.
                    self.parentFrame.onProgress(props, {
                        top: props.top,
                        left: props.left,
                        height: props.height || $node.outerHeight(),
                        width: props.width || $node.outerWidth(),
                        zIndex: $node.css('z-index')
                    });

                    layer.css({
                        left: $node.offset().left,
                        top: $node.offset().top,
                        height: $node.outerHeight(),
                        width: $node.outerWidth()
                    });

                    VWOInjected.enableMagicScroll();
                }).drop(function() {

                    frameContext.services.elementManager.expandToFullHeight();

                    originalTop = parseInt($node.css('top'), 10) || 0;
                    originalLeft = parseInt($node.css('left'), 10) || 0;

                    self.parentFrame.gravitize();
                    self.parentFrame.showContextualBox();
                });
            },
            toggleAspectRatio: function(el, isAspectRatioEnabled) {
                // Saving the flag's data on the selected DOM node itself.
                $('.' + el.elClass).data('isAspectRatioEnabled', isAspectRatioEnabled);
            },
            /**
			 * Gets the control values for the given element and this operation.
			 * For this operation, it actually gets the most current changes. This is
			 * called by saveControl only if control has not been get yet.
			 *
			 * So it might seem like a misleading name for what this code does, but this
			 * function acts like a protected function that was overriden from its base
			 * class but is not supposed to be publicly accessed.
			 *
			 * @param  {jQuery}  jq     The jQuery reference to the element we're dealing with.
			 * @param  {VWOElement} el  The VWOElement reference to the selected element.
			 * @return {Object}         Returns the current changeset for moveResize operation.
			 *                          Constitutes position, top, left and z-index css values of the element.
			 */
            getControl: function getControl(jq, el) {
                if (el.control.changeSRC) {
                    VWOInjected.applyControlForOp(el, {
                        attr: el.control.changeSRC,
                        opName: 'changeSRC'
                    });
                }

                var display = jq.css('display');
                // convert inline to inline block to get accurate width and height
                if (display === 'inline') {
                    jq.css('display', 'inline-block');
                }

                var buoundingRect = jq.get(0).getBoundingClientRect();

                var retval = {
                    left: jq.css('left').replace('auto', '0'),
                    top: jq.css('top').replace('auto', '0'),
                    //jq.css('width') does not include padding && jq.outerWidth() returns rounded values which cause issues in some sites
                    //height: jq.css('height'),
                    //width: jq.css('width'),
                    width: buoundingRect.width,
                    height: buoundingRect.height,
                    zIndex: jq.css('z-index'),

                    display: display,
                    position: jq.css('position')
                };

                // revert back
                if (display === 'inline') {
                    jq.css('display', display);
                }

                if (el.control.changeSRC) {
                    VWOInjected.applyOp(el, {
                        attr: el.changes.changeSRC,
                        opName: 'changeSRC'
                    });
                }

                return retval;
            },
            /**
			 * Actually applies the css changes passed in the parameters to the given jquery element.
			 * For moveResize, this is as simple as calling jq.css().
			 *
			 * @param  {jQuery}  jq       The jQuery reference to the element we're dealing with.
			 * @param  {Object}  changes  A list of moveResize-related css changes to apply.
			 *                            Constitutes display, position, top, left, width, height and
			 *                            z-index css values of the element.
			 */
            applyChanges: function(jq, changes) {
                utils.applyCssChanges(jq, changes);
            }
        }
    });

    return frameContext.registerService('moveResizeOperation', moveResizeOperation);
});

define('designer/ElementMetadata', ['designer/FrameContext', 'designer/inject/utils'], function(frameContext, utils) {
    'use strict';

    /* eslint camelcase: "off" */
    /*jshint loopfunc: true */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;
    var VWOInjected = window.VWOInjected;
    var slice = Array.prototype.slice;

    function defineGetters(obj, getters) {
        for (var keys = Object.keys(getters), key; (key = keys.pop()); ) {
            Object.defineProperty(obj, key, {
                get: getters[key],
                enumerable: true
            });
        }
    }

    /**
	 * Creates an object that contains certain metadata information about the element.
	 * Since the element is present in the child frame and its information is periodically
	 * needed to be accessed in the parent frame, clubbed with the fact that the element
	 * itself isn't serializable, a metadata object containing the properties needed
	 * by the parent is a much more sensible choice.
	 *
	 * @param {jQuery|Node} element The jQuery element or the HTML DOM element itself
	 *                              to create metadata for.
	 */
    function ElementMetadata(element) {
        this.$element = $(element);
        this.element = this.$element.get(0);
    }

    defineGetters(ElementMetadata.prototype, {
        selectorPath: function() {
            return this.$element.selectorPath();
        },

        shortSelectorPath: function() {
            return this.$element.shortSelectorPath();
        },

        tagName: function() {
            return this.element.tagName;
        },

        parentTagName: function() {
            return this.element.parentNode && this.element.parentNode.tagName;
        },

        isBody: function() {
            return this.element.nodeName.toLowerCase() === 'body';
        },

        isHtml: function() {
            return this.element.nodeName.toLowerCase() === 'html';
        },

        isImage: function() {
            return this.element.nodeName.toLowerCase() === 'img';
        },

        isAnchor: function() {
            return this.element.nodeName.toLowerCase() === 'a';
        },

        // Tells whether any of the ancestors is an anchor
        isContainedInAnAnchor: function() {
            var parentNode = this.element;
            while ((parentNode = parentNode.parentNode)) {
                if (parentNode.nodeName.toLowerCase() === 'a') {
                    return true;
                }
            }
            return false;
        },

        // Returns the href attribute if this element is an anchor
        // If any of the ancestors is an anchor, returns its href.
        anchorHref: function() {
            var parentNode = this.element;
            while (parentNode) {
                if (parentNode.nodeName.toLowerCase() === 'a') {
                    return utils.getOriginalUrlFromProxyUrl(parentNode.getAttribute('href'));
                }
                parentNode = parentNode.parentNode;
            }
        },

        isForm: function() {
            return this.element.nodeName.toLowerCase() === 'form';
        },

        // Tells whether any of the ancestors is a form
        isContainedInAForm: function() {
            var parentNode = this.element;
            while ((parentNode = parentNode.parentNode)) {
                if (parentNode.nodeName.toLowerCase() === 'form') {
                    return true;
                }
            }
            return false;
        },

        // Returns the action attribute if this element is a form
        // If any of the ancestors is a form, returns its action.
        formAction: function() {
            var parentNode = this.element;
            while (parentNode) {
                if (parentNode.nodeName.toLowerCase() === 'form') {
                    return utils.getOriginalUrlFromProxyUrl(parentNode.getAttribute('action'));
                }
                parentNode = parentNode.parentNode;
            }
        },

        isIframe: function() {
            return this.element.nodeName.toLowerCase() === 'iframe';
        },

        hasBackgroundImage: function() {
            return this.$element.css('background-image') !== 'none' && this.$element.css('background-image') !== 'inherit' && /url\(/g.test(this.$element.css('background-image'));
        },

        parentSelectorPath: function() {
            if (this.element.parentElement) {
                return $(this.element.parentElement).selectorPath();
            }
        },

        previousSiblingSelectorPath: function() {
            if (this.element.previousElementSibling) {
                return $(this.element.previousElementSibling).selectorPath();
            }
        },

        nextSiblingSelectorPath: function() {
            if (this.element.nextElementSibling) {
                return $(this.element.nextElementSibling).selectorPath();
            }
        },

        // Returns a boolean indicating whether the child nodes of this element
        // contain only one text node
        containsOnlyTextNode: function() {
            var tagName = this.tagName.toLowerCase();
            return this.$element.length === 1 && this.$element.children().length === 0 && tagName !== 'img' && tagName !== 'input' && tagName !== 'iframe';
        },

        // Returns an object containing the information about all the ancestors of the element.
        // The information includes:
        //   * selectorPath - css selector path of the parent element
        //   * tag - tagName of the parent element
        //   * selector - an identifier / name that the element can be identified with, usually its id, or class names
        parentElementsInfo: function() {
            var parents = this.$element.parents()
              , retval = [];

            // Pushing last elements at first position so as to reverse sort it while keeping the keys in increasing order.
            for (var i = parents.length; i--; ) {
                var parentMetadata = new ElementMetadata(parents[i]);

                // we dont want HTML and BODY tags, so dont push them in the array.
                if (!parentMetadata.tagName || parentMetadata.isBody || parentMetadata.isHtml) {
                    continue;
                }

                retval.push({
                    selectorPath: parentMetadata.selectorPath,
                    tagName: parentMetadata.tagName,
                    identifierSelector: parentMetadata.identifierSelector
                });
            }

            return retval;
        },

        // A selector to identify the element
        identifierSelector: function() {
            var id = this.element.getAttribute('id');
            var classes = (this.element.getAttribute('class') || '').trim().split(/\s+/);
            classes = classes.filter(function(c) {
                // skip vwo classes
                return c.substr(0, 4) !== 'vwo_' && c.substr(0, 5) !== '_vwo_' && c.indexOf('redactor') < 0;
            });

            classes = classes.length ? '.' + classes.join('.') : '';
            classes = classes === '.' ? '' : classes;

            return id ? '#' + id + classes : classes;
        },

        className: function() {
            return this.element.getAttribute('class') || '';
        },

        // This id corresponds to the unique identifier attributes assigned to elements by the editor
        id: function() {
            return this.element.getAttribute('vwo-el-id') || '';
        },

        // Retuns an array containing the class names of all the descendants (not just children)
        // of the given element.
        descendantsClassNames: function() {
            return slice.call(this.$element.find('*').map(function() {
                return this.getAttribute('class') || '';
            }));
        },

        // Returns an array containing the class names of all the ancestors
        // of the given element.
        parentsClassNames: function() {
            return slice.call(this.$element.parents().map(function() {
                return this.getAttribute('class') || '';
            }));
        },

        // Returns an array containing the class names of all the siblings (next and previous)
        // of the given element, but not including the element itself.
        siblingsClassNames: function() {
            return slice.call(this.$element.siblings().map(function() {
                return this.getAttribute('class') || '';
            }));
        },

        editGroupClass: function() {
            return this.$element.getEditGroupClass();
        },

        // Tells whether the given element is an editor related element (like outline or shim).
        isEditorElement: function() {
            return this.$element.hasClass('_vwo_outline_border') || this.$element.hasClass('_vwo_full_page_glass') || this.$element.hasClass('_vwo_glass') || this.$element.attr('id') === 'test_page' || this.$element.hasClass('vwo-editor-element');
        },

        screenPath: function() {// todo: define this function later
        }
    });

    ElementMetadata.prototype.toJSON = function() {
        for (var keys = Object.keys(ElementMetadata.prototype), key, obj = {}; (key = keys.pop()); ) {
            if (key === 'toJSON') {
                continue;
            }
            obj[key] = this[key];
        }
        return obj;
    }
    ;

    if (VWOInjected) {
        VWOInjected.ElementMetadata = ElementMetadata;
    }

    return ElementMetadata;
});

define('designer/MarkupCleaner', ['designer/FrameContext'], function(frameContext) {
    'use strict';

    var NodeTypes = {
        ELEMENT_NODE: 1,
        TEXT_NODE: 3,
        COMMENT_NODE: 8
    };

    // This wrapMap is used for enclosing the tags properly since we do dom comparisons of operations by creating actual nodes.
    // This can be used for let's say when a user is editing option tag, you cannot create an option tag without an enclosing select tag. This map helps us fix such quirks that we encounter frequently in code.
    // The key is the tagName which should be enclosed.
    // The value is an array of strings having the following details
    // 	1. This value is the prefix which should be appended to properly create the DOMNode.
    // 	2. This value is the suffix which should be appended to properly create the DOMNode.
    //  3. This is used to decide the parent tag in which the content value, i.e, the string value should be added as innerHTML to.
    var wrapMap = {
        option: ['<select multiple="multiple">', '</select>', 'select'],
        legend: ['<fieldset>', '</fieldset>', 'fieldset'],
        area: ['<map>', '</map>', 'map'],
        param: ['<object>', '</object>', 'object'],
        thead: ['<table>', '</table>', 'table'],
        tr: ['<table><tbody>', '</tbody></table>', 'table'],
        col: ['<table><tbody></tbody><colgroup>', '</colgroup></table>', 'table'],
        td: ['<table><tbody><tr>', '</tr></tbody></table>', 'table']
    };

    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;

    /* eslint camelcase: "off" */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;

    var markupCleaner = {
        /**
		 * cleans the HTML coming in from tinymce. Also removes whitespace. Adds elClass to elements
		 *
		 * @param content The HTML
		 * @param elClass the element class to use
		 */
        formatContent: function(content, elClass, parentTagName) {
            if (parentTagName === 'HEAD' || !parentTagName) {
                parentTagName = 'DIV';
            }
            var s = document.createElement(parentTagName);
            var i;
            s.innerHTML = content;

            for (i = 0; i < s.childNodes.length; i++) {
                if (s.childNodes[i].nodeType === NodeTypes.TEXT_NODE && s.childNodes[i].textContent.replace(/(\r|\n|\t)/g, '') === '') {
                    s.removeChild(s.childNodes[i--]);
                } else {
                    break;
                }
            }

            for (i = 0; i < s.childNodes.length; i++) {
                if (s.childNodes[i].nodeType === NodeTypes.TEXT_NODE && s.childNodes[i].textContent.replace(/(\r|\n|\t)/g, '') !== '') {
                    // wrap this in span
                    var n = document.createElement('span');
                    n.innerHTML = s.childNodes[i].textContent.replace(/ +/g, ' ');
                    s.replaceChild(n, s.childNodes[i]);
                }
            }

            s.innerHTML = s.innerHTML.replace(/<br mce_bogus='1'>/g, '');

            /*jshint camelcase: false */
            if (elClass !== 'vwo_variation') {
                i = 0;
                $(s).children().first().addClass(elClass).end().not(':first-child').each(function() {
                    $(this).addClass('vwo_group_' + elClass.replace(/vwo_/, '') + '_' + i++);
                });
            } else {
                $(s).children().addClass(elClass);
            }

            return s.innerHTML;
        },

        /**
		 * Remove classes and other things injected by us
		 *
		 * @param content The HTML
		 */
        cleanContent: function(content, parentTagName, elClass, tagName) {
            var suffix = '';
            var prefix = '';
            if (!parentTagName) {
                // We are getting parentTagName as null in some cases. Still to find a scenario.
                // TODO: Inspect the reason for this case.
                parentTagName = 'DIV';
            }
            if (tagName) {
                tagName = tagName.toLowerCase();
                if (wrapMap[tagName]) {
                    var shadyTag = wrapMap[tagName];
                    prefix = shadyTag[0];
                    suffix = shadyTag[1];
                    parentTagName = shadyTag[2];
                }
            }

            var node = document.createElement(parentTagName === 'HEAD' ? 'DIV' : parentTagName);
            node.innerHTML = prefix + content + suffix;
            for (var i = 0; i < node.childNodes.length; i++) {
                if (typeof node.childNodes[i].className === 'string') {
                    node.childNodes[i].className = node.childNodes[i].className.replace(elClass, '').replace(/vwo_(group_)+[\d]{13}_[\d]+/, '');
                    if (node.childNodes[i].className === '') {
                        node.childNodes[i].removeAttribute('class');
                    }
                }
            }
            return node.innerHTML;
        },

        /**
		 * Clean and remove whitespace in HTML
		 *
		 * @param content The HTML
		 */
        cleanAndStrip: function(content, parentTagName, elClass, tagName) {
            return this.stripWhite(this.cleanContent(content, parentTagName, elClass, tagName), parentTagName);
        },

        /**
		 * Removes whitespace
		 *
		 * @param content The HTML
		 * @param tag The tag name of the parent of this element
		 */
        stripWhite: function(content, tag) {
            if (tag === 'HEAD') {
                tag = 'div';
            }
            if (!tag) {
                // We are getting parentTagName as null in some cases. Still to find a scenario.
                // TODO: Inspect the reason for this case.
                tag = 'DIV';
            }
            var node = document.createElement(tag);
            node.innerHTML = content;

            var strip = function(n) {
                if (n.nodeType === 8) {
                    n.parentNode.removeChild(n);
                } else if (n.nodeType === 3) {
                    if (n.nodeValue.replace(/([\t\r\n]*)/g, '') === '') {
                        n.parentNode.removeChild(n);
                    } else {
                        if (n.parentNode && n.parentNode.tagName === 'SCRIPT') {
                            n.nodeValue = n.nodeValue.replace(/([\t\r\n])/g, '\\$1');
                        } else {
                            n.nodeValue = n.nodeValue.replace(/[\t\r\n]/g, '').replace(/ +/g, ' ');
                        }
                    }
                } else {
                    for (var i = n.childNodes.length - 1; i >= 0; i--) {
                        strip(n.childNodes[i]);
                    }
                }
            };

            strip(node);
            return node.innerHTML;
        },

        sanitizeNodeForClone: function($node) {
            if (!$node.length) {
                return $node;
            }

            var node = $node.get(0);
            // remove all vwo_* classes

            function removeClasses(n) {
                if (!n) {
                    return;
                }

                // SVG elements dont have string classnames.
                if (typeof n.className === 'string') {
                    //Remove coal classes too
                    /*jshint -W109 */
                    n.className = n.className.replace(new RegExp(window.VWOInjected.coalClassPrefix + '[\\d]{13}_[\\d]*','g'), '').replace(/vwo(_\w+)*_[\d]{13}/g, '');
                    if (n.className.replace(/\s/g, '') === '') {
                        n.removeAttribute('class');
                    }
                }

                if (n.childNodes && n.childNodes.length) {
                    for (var i = n.childNodes.length - 1; i >= 0; i--) {
                        removeClasses(n.childNodes[i]);
                    }
                }
            }

            removeClasses(node);

            return $node;
        },

        cleanHTML: function(content, tag) {
            var self = this;

            if (tag === 'HEAD' || !tag) {
                tag = 'div';
            }

            var node = document.createElement(tag);
            node.innerHTML = content;

            function strip(n) {
                // if we have a comment node, we dont save it
                if (n.nodeType === 8) {
                    n.parentNode.removeChild(n);
                } else if (n.nodeType === 3) {
                    // if its a text node, and it is all whitespace other than space, remove it
                    if (n.nodeValue.replace(/([\t\r\n]*)/g, '') === '') {
                        n.parentNode.removeChild(n);
                    } else if (n.parentNode && n.parentNode.tagName === 'SCRIPT') {
                        /**
						 * The replacing could have been done as : .replace(([\r\t\n\\])/g, "\\$1")
						 * But this actually doesn't accompalish what we want- to add one more backslash
						 *
						 * Reason: In "\\$1", $1 executes i.e. we see an enter insead of \n
						 *
						 * Hence, we do it this way ---v   "\\$1"
						 */
                        n.nodeValue = n.nodeValue.replace(/([\t\r\n\\])/g, function(x) {
                            switch (x) {
                            case '\n':
                                return '\\n';
                            case '\r':
                                return '\\r';
                            case '\t':
                                return '\\t';
                            case '\\':
                                return '\\\\';
                            }
                        });
                    } else {
                        // if its not a script then convert multiple space into one, since that is all html will care about
                        n.nodeValue = n.nodeValue.replace(/[\t\r\n]/g, '').replace(/ +/g, ' ');
                    }
                } else {
                    // remove our classes
                    if (typeof n.className === 'string') {
                        n.className = n.className.replace(/vwo_(group_)*[\d]{13,}(_[\d])*/g, '').replace(new RegExp(self.coalClassPrefix + '[\\d]{13}_[\\d]+'), '');
                    }
                    for (var i = n.childNodes.length - 1; i >= 0; i--) {
                        // clean all childnodes
                        strip(n.childNodes[i]);
                    }

                    for (i = 0; i < n.attributes.length; i++) {
                        if (n.attributes[i].specified) {
                            // trim all attributes
                            n.attributes[i].nodeValue = $.trim(n.attributes[i].nodeValue.replace(/[\t\r\n]/g, ''));
                        }
                    }
                    if (n.className === '') {
                        n.removeAttribute('class');
                    }
                }
            }
            strip(node);
            return node.innerHTML;
        },
        /**
		 * Does some cleaning on the node;
		 * - Removes classes added by us.
		 * - Merge consecutive white-spaces inside text nodes into single space.
		 * - Removes white-space only text nodes.
		 * @param  {Node} node Node to clean
		 */
        cleanNode: function cleanNode(node) {
            if (node.nodeType === node.ELEMENT_NODE && node.className && typeof node.className === 'string') {
                node.className = node.className.replace(/vwo_(group_)*[\d]{13,}(_[\d])*/g, '').replace(new RegExp(VWOEditor.coalClassPrefix + '[\\d]{13}_[\\d]+'), '');
            }
            // No further processing if the current node is a SCRIPT tag.
            if (node.tagName && node.tagName.toLowerCase() === 'script') {
                return;
            }

            for (var n = 0; n < node.childNodes.length; n++) {
                var child = node.childNodes[n];
                if (child.nodeType === 3) {
                    // Merge consecutive whitespaces into one.
                    child.nodeValue = child.nodeValue.replace(/\s\s+/g, ' ');

                    // If its a whitespace only text node, remove it.
                    if (!/\S/.test(child.nodeValue)) {
                        node.removeChild(child);
                        n--;
                    }
                } else if (child.nodeType === 1) {
                    this.cleanNode(child);
                }
            }
        }
    };

    return markupCleaner;
});

define('designer/operations/RemoveOperation', ['designer/FrameContext', 'designer/operations/BaseOperation', 'designer/inject/utils'], function(frameContext, baseOperation, utils) {
    'use strict';

    /* jshint -W106 */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;

    var removeOperation = $.extend(true, {}, frameContext.serviceDefinitions.baseOperation, {
        name: 'remove',
        type: 'remove',
        title: 'Remove',
        parentFrame: {
            /**
			 * Initialize the operation for given element. If the element is not
			 * provided, it is picked from VWOEditor.el.
			 * @param el {VWOElement} The element we are trying to apply the operation on.
			 */
            initialize: function initialize(el) {
                this.el = el = el || VWOEditor.el;

                baseOperation.initialize.apply(this);

                var self = this;

                // set current op on el.
                // todo: ideally this should be unnecessary.
                el.currentOp = this.name;

                this.childFrame.saveControl(el).then(function(updatedEl) {
                    $.extend(true, el, updatedEl);

                    self.persist().then(function() {
                        VWOEditor.close();
                    });
                });
            },

            persist: function(el) {
                el = el || this.el || VWOEditor.el;

                el.tempChanges.remove = {
                    display: 'none'
                };

                return baseOperation.persist.call(this, el);
            }
        },
        childFrame: {
            getControl: function(jq) {
                return {
                    display: jq.css('display')
                };
            },

            applyChanges: function(jq, changes) {
                utils.applyCssChanges(jq, changes);
            }
        }
    });
    return frameContext.registerService('removeOperation', removeOperation);
});

define('designer/VWOElement', ['designer/MarkupCleaner', 'designer/operations/RemoveOperation'], function(markupCleaner, removeOperation) {
    /* jshint -W015 */
    'use strict';

    /* eslint camelcase: "off" */
    /* global vwoe_$: false, request: false */

    /**
 * The class that relates to DOM elements
 *
 * @param xpath The xpath of the element
 * @param copy if we are copying an element object
 * @param elClass the element class to use
 */

    function VWOElement(xpath, copy, elClass, tagName, editGroupClass, parentTagName, shortSelectorPath, id) {
        try {
            this.changes = {};
            this.control = {};
            this.tempChanges = {};

            // We use the parent tagName while cleaning in EditHTML op
            this.parentTagName = parentTagName;
            this.currentOp = '';
            elClass = elClass ? '.' + elClass : '';
            this.jq = vwoe_$(elClass || shortSelectorPath || xpath);

            this.XPath = xpath;
            this.shortSelectorPath = shortSelectorPath;
            this.id = id;
            var that = this;
            if (copy !== true) {
                // does this el have a vwo_group_ts?
                if (editGroupClass) {
                    this.elClass = editGroupClass;
                } else {
                    var time = (new Date()).getTime();
                    while (time === (new Date()).getTime()) {
                        continue;
                    }
                    this.elClass = 'vwo_' + (new Date()).getTime();
                }
                this.jq.addClass(this.elClass);
            }
            this.variation = null;
            // Use passed tagName if available or fetch from child frame
            $.when(tagName || this.jq.attr('tagName')).then(function(tagName) {
                that.tag = tagName;
            });
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::VWOElement', arguments);
        }
    }

    /**
 * Copy an VWOelement object
 */
    VWOElement.prototype.copy = function(parentTagName, shortSelectorPath, id) {
        try {
            // copy this...
            var el = new VWOElement(this.XPath,true,this.elClass,this.tag,'',parentTagName,shortSelectorPath || this.shortSelectorPath,id || this.id);
            el.elClass = this.elClass;
            el.variation = this.variation;
            el.changes = $.extend(true, {}, this.changes);
            el.control = $.extend(true, {}, this.control);
            el.tempChanges = $.extend(true, {}, this.tempChanges);
            return el;
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::VWOElement.prototype.copy', arguments);
        }
    }
    ;

    /**
 * helper to return xpath of this element
 */
    VWOElement.prototype.xpath = function() {
        try {
            var vwoe_$ = VWOEditor.frame.vwoe_$;
            // eslint-disable-next-line new-cap
            return vwoe_$('.' + this.elClass).XPath();
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::VWOElement.prototype.xpath', arguments);
        }
    }
    ;

    /**
 * helper to populate the control values for each operation
 *
 * @param operation The operation we are performing
 */

    VWOElement.prototype.getControl = function(operation, propList) {
        try {
            var self = this;
            return request('VWOInjected.getControl', this, operation, propList).then(function(el) {
                $.extend(true, self, el);
                self.jq = vwoe_$('.' + self.elClass);
            });
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::VWOElement.prototype.getControl', arguments);
        }
    }
    ;

    /**
 * The helper that finalizes all changes made on the element in the last  operation
 * The saved changes are only those values that have changed
 *
 * @param params The changes made
 * @param copy if we are copying an element object
 * @param elClass the element class to use
 */

    VWOElement.prototype.endOperation = function(params, skipTriggerSegmentEvent) {
        try {
            var add_mod = false
              , changes = {}
              , self = this
              , def = $.Deferred()
              , comparisonCompletePromise = $.Deferred();

            if (!self.currentOp) {
                return def.resolve();
            }

            //Track segment event
            if (!skipTriggerSegmentEvent) {
                VWOEditor.controllerScope.trackSegmentEvent(VWOEditor.controllerScope.SegmentAnalyticsEnum.COMMON.EDITOR_OPERATION, {
                    opName: window.opNames[self.currentOp][0],
                    eventType: VWOEditor.operationEditMode ? VWOEditor.controllerScope.SegmentAnalyticsEnum.EVENT_TYPES.EDIT : VWOEditor.controllerScope.SegmentAnalyticsEnum.EVENT_TYPES.ADD
                });
            }

            var vwoCompare = function(x, a) {
                if (typeof a === 'object' && a.parentNode) {
                    if (a === x) {
                        return true;
                    }
                    return false;
                }
                // eslint-disable-next-line guard-for-in
                for (var p in a) {
                    if (typeof (a[p]) !== typeof (x[p])) {
                        return false;
                    }
                    if ((a[p] === null) !== (x[p] === null)) {
                        return false;
                    }
                    switch (typeof (a[p])) {
                    case 'undefined':
                        if (typeof (x[p]) !== 'undefined') {
                            return false;
                        }
                        break;
                    case 'object':
                        if (a[p] !== null && x[p] !== null && (a[p].constructor.toString() !== x[p].constructor.toString() || !vwoCompare(x[p], a[p]))) {
                            return false;
                        }
                        break;
                    case 'function':
                        if (p !== 'equals' && a[p].toString() !== x[p].toString()) {
                            return false;
                        }
                        break;
                    default:
                        if (a[p] !== x[p]) {
                            return false;
                        }
                    }
                }
                if (typeof x === 'string' && typeof a === 'string' && x !== a) {
                    return false;
                }
                return true;
            };

            if (this.currentOp === 'content' && params && params.content === '') {
                // remove this op and call remove.
                this.jq.show();
                delete this.tempChanges.content;

                removeOperation.initialize(this);

                def.resolve();
            }

            // vwoe_$('#_vwo_glass_layer').remove();

            if (params !== undefined) {
                changes = $.extend(true, changes, params);
            }
            if (this.tempChanges[this.currentOp] !== undefined) {
                changes = $.extend(true, changes, this.tempChanges);
            }

            // TODO: postmessage: verify if we can use cached parentTagName here
            this.jq.parent().attr('tagName').then(function(parentTagName) {
                if (self.currentOp === 'content' && markupCleaner.cleanAndStrip(self.changes[self.currentOp] || self.control[self.currentOp], parentTagName || self.parentTagName, self.elClass, self.tagName) === markupCleaner.cleanAndStrip(changes[self.currentOp], parentTagName || self.parentTagName, self.elClass, self.tagName)) {
                    return comparisonCompletePromise.resolve(true);
                }

                // skip comparision for clone op
                if (self.currentOp !== 'cloneElement' && vwoCompare(self.changes[self.currentOp] || self.control[self.currentOp] || {}, changes[self.currentOp])) {
                    return comparisonCompletePromise.resolve(true);
                }

                comparisonCompletePromise.resolve(false);
            });

            $.when(VWOEditor.findElement(this.jq), comparisonCompletePromise, this.jq.parent().attr('tagName'), this.jq.didDOMChange()).then(function(el, comparisonResult, parentTagName, didDOMChange) {
                // if comparision of old and new content returned TRUE, stop the process
                if (comparisonResult) {
                    return def.resolve(true);
                }

                if (self.changes[self.currentOp] === undefined) {
                    add_mod = true;
                }

                if (self.currentOp === 'rearrange') {
                    self.changes.rearrange = {};
                }
                self.changes = $.extend(true, self.changes, changes);
                var o = {
                    opName: self.currentOp,
                    controlData: {
                        html: self.controlDataToPersist.html
                    }
                };
                o[VWOEditor.opNames[self.currentOp][1]] = self.changes[self.currentOp];

                //Store control data
                if (self.currentOp === 'moveResize' || self.currentOp === 'changeCSS') {
                    o.controlData.original = self.control[self.currentOp];
                }

                var section, variation;

                if (self.XPath === 'HEAD') {
                    if (self.variation) {
                        el = self;
                    } else {
                        el = false;
                    }
                }
                // in ab, if el is not found, no need to worry...
                if (!el) {
                    // whatever case make a new section n variation
                    if (VWOEditor.test !== 'ab') {
                        section = VWOEditor.addSection();
                        if (section) {
                            section.xpath = self.XPath;
                            variation = section.addVariation();
                        } else {
                            return;
                        }
                    } else {
                        //if ab, then section is 1
                        section = VWOEditor.findSection(1);
                        if (section.currentVariation().id === 1) {
                            variation = section.addVariation();
                        } else {
                            variation = section.currentVariation();
                        }
                    }
                } else {
                    section = VWOEditor.findSection(el.variation.section.id);
                    // so if we r in ab... if variation is 1, new variation...
                    if (VWOEditor.test === 'ab') {
                        if (section.currentVariation().id === 1) {
                            variation = section.addVariation();
                        } else {
                            variation = section.currentVariation();
                        }
                    } else {
                        // in mvt, if current variation is control, create new
                        if (section.currentVariation().id === 1) {
                            variation = section.addVariation();
                        } else {
                            variation = section.currentVariation();
                        }
                    }
                }

                self.variation = variation;
                if (add_mod) {
                    variation.currentState().modCount = (0 || variation.currentState().modCount) + 1;
                }
                VWOEditor.addState({
                    variation: self.variation
                });
                // delete all pending changes
                self.tempChanges = {};
                variation.addElement(self);

                // Adding the source from which operation was performed
                if (self.currentOp === 'content' && self.changes.sourceEditor) {
                    o.sourceEditor = self.changes.sourceEditor;
                    o.control = self.editHtmlControl;
                }

                if (o.vwoCss) {
                    //Add !important to the css properties in the operation
                    for (var i in o.vwoCss) {
                        if (typeof o.vwoCss[i] !== 'function' && o.vwoCss[i].indexOf('!important') < 0) {
                            o.vwoCss[i] += ' !important';
                        }
                    }
                }

                // now update the variation stack
                variation.addToStack(self, o, didDOMChange, self.XPath, parentTagName, undefined, undefined, undefined, self.shortSelectorPath);

                variation.section.applyVariation(variation.id).thenResolve(def);

                if (self.currentOp === 'rearrange') {
                    self.jq.parent().children().each(function() {
                        vwoe_$(this).data('vwo_xpath', null);
                    });
                }

                // create a copy of this el, before adding it to control
                el = self.copy(self.parentTagName);
                el.variation = section.findVariation(1);
                el.changes = {};
                section.findVariation(1).addElement(el);

                //Send unsaved changes to consumer
                VWOEditor.handleUnsavedChanges();
            });

            return def;
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::VWOElement.prototype.endOperation', arguments);
        }
    }
    ;

    /**
 * Apply the control values for the change mentioned
 *
 * @param op the operation which is to be undoed
 * @param xpath the xpath of the element to apply changes on
 */

    VWOElement.prototype.applyControlForOp = function(op, xpath) {
        try {
            return this.applyOp({
                opName: op.opName
            }, this.control[op.opName], xpath, true);
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::VWOElement.prototype.applyControlForOp', arguments);
        }
    }
    ;

    /**
 * Apply the changes for the mention operation
 *
 * @param op The operation to apply
 * @param props The changes to be applied(optional)
 * @param xpath The xpath of the element to update
 */

    VWOElement.prototype.applyOp = function(op, props, xpath, isControl) {
        try {
            var self = this;
            return request('VWOInjected.applyOp', this, op, props, xpath, isControl).then(function(el) {
                $.extend(true, self, el);
                self.jq = vwoe_$('.' + self.elClass);
            });
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::VWOElement.prototype.applyOp', arguments);
        }
    }
    ;

    VWOElement.prototype.invalidateAffectedCoalElements = function(op) {
        try {
            var d = $.Deferred(), self = this, i;

            if (op === 'insert' || op === 'cloneElement' || op === 'content') {
                request('VWOInjected.getClasses', self.XPath).then(function(classes) {
                    var elementClasses = classes.itself
                      , childrenClasses = classes.children
                      , siblingsClasses = classes.siblings
                      , identifiersForAffectedGoals = [];

                    identifiersForAffectedGoals.push(window.getCoalTimestampsAndElIdsFromClasses(elementClasses));

                    for (i = 0; i < childrenClasses.length; i++) {
                        identifiersForAffectedGoals.push(window.getCoalTimestampsAndElIdsFromClasses(childrenClasses[i]));
                    }

                    if (op === 'content') {
                        for (i = 0; i < siblingsClasses.length; i++) {
                            if (siblingsClasses[i].search('vwo_group_' + self.elClass.replace('vwo_', '')) === -1) {
                                continue;
                            }
                            identifiersForAffectedGoals.push(window.getCoalTimestampsAndElIdsFromClasses(siblingsClasses[i]));
                        }
                    }

                    $.each(identifiersForAffectedGoals, function(index) {
                        var timestamps = identifiersForAffectedGoals[index].timestamps
                          , elIds = identifiersForAffectedGoals[index].elIds;
                        for (i = 0; i < timestamps.length; i++) {
                            var el = VWOEditor.findCoalElementInGoals(timestamps[i], elIds[i]);
                            el.xpaths[VWOEditor.current_section + ',' + VWOEditor.currentSection().current_variation] = VWOEditor.INVALIDATED_XPATH;
                        }
                    });
                    d.resolve();
                });
            } else {
                d.resolve();
            }
            return d;
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::VWOElement.prototype.invalidateAffectedCoalElements', arguments);
        }
    }
    ;

    /**
 * Remove an operation applied. This also removes the stack entry
 *
 * @param op The operation to remove
 */

    VWOElement.prototype.removeOp = function(op) {
        try {
            var def = $.Deferred()
              , self = this;
            self.invalidateAffectedCoalElements(op).then(function() {
                self.variation.section.applyVariation(1).then(function() {
                    self.variation.removeFromStack(self, op);
                    self.variation.section.applyVariation(self.variation.id).then(function() {

                        VWOEditor.controllerScope.trackSegmentEvent(VWOEditor.controllerScope.SegmentAnalyticsEnum.COMMON.EDITOR_OPERATION, {
                            opName: window.opNames[op][0],
                            eventType: VWOEditor.controllerScope.SegmentAnalyticsEnum.EVENT_TYPES.REMOVE
                        });

                        delete self.changes[op];
                        def.resolve();
                    });
                });
            });
            return def;
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::VWOElement.prototype.removeOp', arguments);
        }
    }
    ;

    VWOElement.prototype.addClass = function() {
        try {
            this.getControl('addClass');
            this.endOperation({
                'addClass': {
                    'class': this.jq.attr('class') + ' ' + 'vwo_coal_1'
                }
            });
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::VWOElement.prototype.addClass', arguments);
        }
    }
    ;

    VWOElement.prototype.toJSON = function() {
        return {
            changes: this.changes,
            control: this.control,
            tempChanges: this.tempChanges,
            currentOp: this.currentOp,
            XPath: this.XPath,
            elClass: this.elClass,
            isSectionPathModified: this.variation && this.variation.section.modified,
            shortSelectorPath: this.shortSelectorPath
        };
    }
    ;

    window.VWOElement = VWOElement;
    return VWOElement;
});

/**
 * This file uses jQuery materials.
 * Portions, Copyright 2012 jQueryFoundation and other contributors
 * http://jquery.com/
 */
//TODO: See if we can make this check more reliable.
var _isLoadedViaProxy = (window.location.href.toString().indexOf('editorProxy') >= 0) && (typeof n00b !== 'undefined');

window.VWOInjected = window.VWOInjected || {};
VWOInjected.errorReport = function(err, stack, reference, arg) {
    if (typeof request === 'function') {
        request('errorReport', {
            message: '[Inject] ' + err.message,
            stack: err.stack
        }, stack, reference, arg);
    }
}
;
function parseUri(str) {
    try {
        var o = parseUri.options
          , m = o.parser[o.strictMode ? "strict" : "loose"].exec(str)
          , uri = {}
          , i = 14;

        while (i--)
            uri[o.key[i]] = m[i] || "";

        uri[o.q.name] = {};
        uri[o.key[12]].replace(o.q.parser, function($0, $1, $2) {
            if ($1)
                uri[o.q.name][$1] = $2;
        });

        return uri;
    } catch (e) {
        VWOInjected.errorReport(e, printStackTrace(), 'to_inject_head::parseUri', arguments);
    }
}
;
/**
 * This function is used to check if the absolute url contains editorProxy path
 * @param  {[string]}  url - relative or absolute path
 * @return {Boolean}   true or false
 */
function isEditorProxyUrl(url) {
    // we need to convert url to its absolute value before checking as few cases(relative url) may fail.
    return _toAbsURL(url).indexOf(VWOInjected.hroot + "/editorProxy") > -1;
}

try {
    parseUri.options = {
        strictMode: true,
        key: ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"],
        q: {
            name: "queryKey",
            parser: /(?:^|&)([^&=]*)=?([^&]*)/g
        },
        parser: {
            strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
            loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
        }
    };
} catch (e) {
    VWOInjected.errorReport(e, printStackTrace(), 'to_inject_head:2');
}

try {
    if (_isLoadedViaProxy && typeof _vwoXHR === 'undefined') {
        var _vwoXHR = window.XMLHttpRequest;
        window.XMLHttpRequest = function vwoXHRProxy() {
            var xhr = new _vwoXHR();
            if (!xhr || !xhr.open)
                return;
            var open = xhr.open
              , this_url = parseUri(vwo_document_real_url);
            xhr.open = function(method, url, async, user, password) {
                if (!isEditorProxyUrl(url))
                    url = url.replace(top.location.host, this_url.host);
                var newUrl = change_URL(url);
                newUrl = newUrl + (newUrl.indexOf('?') === -1 ? '?' : '&') + 'vwo_bypass_proxy=1';
                open.call(xhr, method, newUrl, async, user, password);
            }
            ;
            return xhr;
        }
        ;
    }
} catch (e) {
    VWOInjected.errorReport(e, printStackTrace(), 'to_inject_head:3');
}

try {
    var vwo_$, vwoe_$;
    (function() {
        /*!
		* jQuery JavaScript Library v1.5.2
		* http://jquery.com/
		*
		* Copyright 2011, John Resig
		* Dual licensed under the MIT or GPL Version 2 licenses.
		* http://jquery.org/license
		*
		* Includes Sizzle.js
		* http://sizzlejs.com/
		* Copyright 2011, The Dojo Foundation
		* Released under the MIT, BSD, and GPL Licenses.
		*
		* Date: Thu Mar 31 15:28:23 2011 -0400
	*/
        (function(a, b) {
            function ci(a) {
                return d.isWindow(a) ? a : a.nodeType === 9 ? a.defaultView || a.parentWindow : !1
            }
            function cf(a) {
                if (!b_[a]) {
                    var b = d("<" + a + ">").appendTo("body")
                      , c = b.css("display");
                    b.remove();
                    if (c === "none" || c === "")
                        c = "block";
                    b_[a] = c
                }
                return b_[a]
            }
            function ce(a, b) {
                var c = {};
                d.each(cd.concat.apply([], cd.slice(0, b)), function() {
                    c[this] = a
                });
                return c
            }
            function b$() {
                try {
                    return new a.ActiveXObject("Microsoft.XMLHTTP")
                } catch (b) {}
            }
            function bZ() {
                try {
                    return new a.XMLHttpRequest
                } catch (b) {}
            }
            function bY() {
                d(a).unload(function() {
                    for (var a in bW)
                        bW[a](0, 1)
                })
            }
            function bS(a, c) {
                a.dataFilter && (c = a.dataFilter(c, a.dataType));
                var e = a.dataTypes, f = {}, g, h, i = e.length, j, k = e[0], l, m, n, o, p;
                for (g = 1; g < i; g++) {
                    if (g === 1)
                        for (h in a.converters)
                            typeof h === "string" && (f[h.toLowerCase()] = a.converters[h]);
                    l = k,
                    k = e[g];
                    if (k === "*")
                        k = l;
                    else if (l !== "*" && l !== k) {
                        m = l + " " + k,
                        n = f[m] || f["* " + k];
                        if (!n) {
                            p = b;
                            for (o in f) {
                                j = o.split(" ");
                                if (j[0] === l || j[0] === "*") {
                                    p = f[j[1] + " " + k];
                                    if (p) {
                                        o = f[o],
                                        o === !0 ? n = p : p === !0 && (n = o);
                                        break
                                    }
                                }
                            }
                        }
                        !n && !p && d.error("No conversion from " + m.replace(" ", " to ")),
                        n !== !0 && (c = n ? n(c) : p(o(c)))
                    }
                }
                return c
            }
            function bR(a, c, d) {
                var e = a.contents, f = a.dataTypes, g = a.responseFields, h, i, j, k;
                for (i in g)
                    i in d && (c[g[i]] = d[i]);
                while (f[0] === "*")
                    f.shift(),
                    h === b && (h = a.mimeType || c.getResponseHeader("content-type"));
                if (h)
                    for (i in e)
                        if (e[i] && e[i].test(h)) {
                            f.unshift(i);
                            break
                        }
                if (f[0]in d)
                    j = f[0];
                else {
                    for (i in d) {
                        if (!f[0] || a.converters[i + " " + f[0]]) {
                            j = i;
                            break
                        }
                        k || (k = i)
                    }
                    j = j || k
                }
                if (j) {
                    j !== f[0] && f.unshift(j);
                    return d[j]
                }
            }
            function bQ(a, b, c, e) {
                if (d.isArray(b) && b.length)
                    d.each(b, function(b, f) {
                        c || bs.test(a) ? e(a, f) : bQ(a + "[" + (typeof f === "object" || d.isArray(f) ? b : "") + "]", f, c, e)
                    });
                else if (c || b == null || typeof b !== "object")
                    e(a, b);
                else if (d.isArray(b) || d.isEmptyObject(b))
                    e(a, "");
                else
                    for (var f in b)
                        bQ(a + "[" + f + "]", b[f], c, e)
            }
            function bP(a, c, d, e, f, g) {
                f = f || c.dataTypes[0],
                g = g || {},
                g[f] = !0;
                var h = a[f], i = 0, j = h ? h.length : 0, k = a === bJ, l;
                for (; i < j && (k || !l); i++)
                    l = h[i](c, d, e),
                    typeof l === "string" && (!k || g[l] ? l = b : (c.dataTypes.unshift(l),
                    l = bP(a, c, d, e, l, g)));
                (k || !l) && !g["*"] && (l = bP(a, c, d, e, "*", g));
                return l
            }
            function bO(a) {
                return function(b, c) {
                    typeof b !== "string" && (c = b,
                    b = "*");
                    if (d.isFunction(c)) {
                        var e = b.toLowerCase().split(bD), f = 0, g = e.length, h, i, j;
                        for (; f < g; f++)
                            h = e[f],
                            j = /^\+/.test(h),
                            j && (h = h.substr(1) || "*"),
                            i = a[h] = a[h] || [],
                            i[j ? "unshift" : "push"](c)
                    }
                }
            }
            function bq(a, b, c) {
                var e = b === "width" ? bk : bl
                  , f = b === "width" ? a.offsetWidth : a.offsetHeight;
                if (c === "border")
                    return f;
                d.each(e, function() {
                    c || (f -= parseFloat(d.css(a, "padding" + this)) || 0),
                    c === "margin" ? f += parseFloat(d.css(a, "margin" + this)) || 0 : f -= parseFloat(d.css(a, "border" + this + "Width")) || 0
                });
                return f
            }
            function bc(a, b) {
                b.src ? d.ajax({
                    url: b.src,
                    async: !1,
                    dataType: "script"
                }) : d.globalEval(b.text || b.textContent || b.innerHTML || ""),
                b.parentNode && b.parentNode.removeChild(b)
            }
            function bb(a) {
                return "getElementsByTagName"in a ? a.getElementsByTagName("*") : "querySelectorAll"in a ? a.querySelectorAll("*") : []
            }
            function ba(a, b) {
                if (b.nodeType === 1) {
                    var c = b.nodeName.toLowerCase();
                    b.clearAttributes(),
                    b.mergeAttributes(a);
                    if (c === "object")
                        b.outerHTML = a.outerHTML;
                    else if (c !== "input" || a.type !== "checkbox" && a.type !== "radio") {
                        if (c === "option")
                            b.selected = a.defaultSelected;
                        else if (c === "input" || c === "textarea")
                            b.defaultValue = a.defaultValue
                    } else
                        a.checked && (b.defaultChecked = b.checked = a.checked),
                        b.value !== a.value && (b.value = a.value);
                    b.removeAttribute(d.expando)
                }
            }
            function _(a, b) {
                if (b.nodeType === 1 && d.hasData(a)) {
                    var c = d.expando
                      , e = d.data(a)
                      , f = d.data(b, e);
                    if (e = e[c]) {
                        var g = e.events;
                        f = f[c] = d.extend({}, e);
                        if (g) {
                            delete f.handle,
                            f.events = {};
                            for (var h in g)
                                for (var i = 0, j = g[h].length; i < j; i++)
                                    d.event.add(b, h + (g[h][i].namespace ? "." : "") + g[h][i].namespace, g[h][i], g[h][i].data)
                        }
                    }
                }
            }
            function $(a, b) {
                return d.nodeName(a, "table") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a
            }
            function Q(a, b, c) {
                if (d.isFunction(b))
                    return d.grep(a, function(a, d) {
                        var e = !!b.call(a, d, a);
                        return e === c
                    });
                if (b.nodeType)
                    return d.grep(a, function(a, d) {
                        return a === b === c
                    });
                if (typeof b === "string") {
                    var e = d.grep(a, function(a) {
                        return a.nodeType === 1
                    });
                    if (L.test(b))
                        return d.filter(b, e, !c);
                    b = d.filter(b, e)
                }
                return d.grep(a, function(a, e) {
                    return d.inArray(a, b) >= 0 === c
                })
            }
            function P(a) {
                return !a || !a.parentNode || a.parentNode.nodeType === 11
            }
            function H(a, b) {
                return (a && a !== "*" ? a + "." : "") + b.replace(t, "`").replace(u, "&")
            }
            function G(a) {
                var b, c, e, f, g, h, i, j, k, l, m, n, o, p = [], q = [], s = d._data(this, "events");
                if (a.liveFired !== this && s && s.live && !a.target.disabled && (!a.button || a.type !== "click")) {
                    a.namespace && (n = new RegExp("(^|\\.)" + a.namespace.split(".").join("\\.(?:.*\\.)?") + "(\\.|$)")),
                    a.liveFired = this;
                    var t = s.live.slice(0);
                    for (i = 0; i < t.length; i++)
                        g = t[i],
                        g.origType.replace(r, "") === a.type ? q.push(g.selector) : t.splice(i--, 1);
                    f = d(a.target).closest(q, a.currentTarget);
                    for (j = 0,
                    k = f.length; j < k; j++) {
                        m = f[j];
                        for (i = 0; i < t.length; i++) {
                            g = t[i];
                            if (m.selector === g.selector && (!n || n.test(g.namespace)) && !m.elem.disabled) {
                                h = m.elem,
                                e = null;
                                if (g.preType === "mouseenter" || g.preType === "mouseleave")
                                    a.type = g.preType,
                                    e = d(a.relatedTarget).closest(g.selector)[0];
                                (!e || e !== h) && p.push({
                                    elem: h,
                                    handleObj: g,
                                    level: m.level
                                })
                            }
                        }
                    }
                    for (j = 0,
                    k = p.length; j < k; j++) {
                        f = p[j];
                        if (c && f.level > c)
                            break;
                        a.currentTarget = f.elem,
                        a.data = f.handleObj.data,
                        a.handleObj = f.handleObj,
                        o = f.handleObj.origHandler.apply(f.elem, arguments);
                        if (o === !1 || a.isPropagationStopped()) {
                            c = f.level,
                            o === !1 && (b = !1);
                            if (a.isImmediatePropagationStopped())
                                break
                        }
                    }
                    return b
                }
            }
            function E(a, c, e) {
                var f = d.extend({}, e[0]);
                f.type = a,
                f.originalEvent = {},
                f.liveFired = b,
                d.event.handle.call(c, f),
                f.isDefaultPrevented() && e[0].preventDefault()
            }
            function y() {
                return !0
            }
            function x() {
                return !1
            }
            function i(a) {
                for (var b in a)
                    if (b !== "toJSON")
                        return !1;
                return !0
            }
            function h(a, c, e) {
                if (e === b && a.nodeType === 1) {
                    e = a.getAttribute("data-" + c);
                    if (typeof e === "string") {
                        try {
                            e = e === "true" ? !0 : e === "false" ? !1 : e === "null" ? null : d.isNaN(e) ? g.test(e) ? d.parseJSON(e) : e : parseFloat(e)
                        } catch (f) {}
                        d.data(a, c, e)
                    } else
                        e = b
                }
                return e
            }
            var c = a.document
              , d = function() {
                function G() {
                    if (!d.isReady) {
                        try {
                            c.documentElement.doScroll("left")
                        } catch (a) {
                            setTimeout(G, 1);
                            return
                        }
                        d.ready()
                    }
                }
                var d = function(a, b) {
                    return new d.fn.init(a,b,g)
                }, e = a.jQuery, f = a.$, g, h = /^(?:[^<]*(<[\w\W]+>)[^>]*$|#([\w\-]+)$)/, i = /\S/, j = /^\s+/, k = /\s+$/, l = /\d/, m = /^<(\w+)\s*\/?>(?:<\/\1>)?$/, n = /^[\],:{}\s]*$/, o = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, p = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, q = /(?:^|:|,)(?:\s*\[)+/g, r = /(webkit)[ \/]([\w.]+)/, s = /(opera)(?:.*version)?[ \/]([\w.]+)/, t = /(msie) ([\w.]+)/, u = /(mozilla)(?:.*? rv:([\w.]+))?/, v = navigator.userAgent, w, x, y, z = Object.prototype.toString, A = Object.prototype.hasOwnProperty, B = Array.prototype.push, C = Array.prototype.slice, D = String.prototype.trim, E = Array.prototype.indexOf, F = {};
                d.fn = d.prototype = {
                    constructor: d,
                    init: function(a, e, f) {
                        var g, i, j, k;
                        if (!a)
                            return this;
                        if (a.nodeType) {
                            this.context = this[0] = a,
                            this.length = 1;
                            return this
                        }
                        if (a === "body" && !e && c.body) {
                            this.context = c,
                            this[0] = c.body,
                            this.selector = "body",
                            this.length = 1;
                            return this
                        }
                        if (typeof a === "string") {
                            g = h.exec(a);
                            if (!g || !g[1] && e)
                                return !e || e.jquery ? (e || f).find(a) : this.constructor(e).find(a);
                            if (g[1]) {
                                e = e instanceof d ? e[0] : e,
                                k = e ? e.ownerDocument || e : c,
                                j = m.exec(a),
                                j ? d.isPlainObject(e) ? (a = [c.createElement(j[1])],
                                d.fn.attr.call(a, e, !0)) : a = [k.createElement(j[1])] : (j = d.buildFragment([g[1]], [k]),
                                a = (j.cacheable ? d.clone(j.fragment) : j.fragment).childNodes);
                                return d.merge(this, a)
                            }
                            i = c.getElementById(g[2]);
                            if (i && i.parentNode) {
                                if (i.id !== g[2])
                                    return f.find(a);
                                this.length = 1,
                                this[0] = i
                            }
                            this.context = c,
                            this.selector = a;
                            return this
                        }
                        if (d.isFunction(a))
                            return f.ready(a);
                        a.selector !== b && (this.selector = a.selector,
                        this.context = a.context);
                        return d.makeArray(a, this)
                    },
                    selector: "",
                    jquery: "1.5.2",
                    length: 0,
                    size: function() {
                        return this.length
                    },
                    toArray: function() {
                        return C.call(this, 0)
                    },
                    get: function(a) {
                        return a == null ? this.toArray() : a < 0 ? this[this.length + a] : this[a]
                    },
                    pushStack: function(a, b, c) {
                        var e = this.constructor();
                        d.isArray(a) ? B.apply(e, a) : d.merge(e, a),
                        e.prevObject = this,
                        e.context = this.context,
                        b === "find" ? e.selector = this.selector + (this.selector ? " " : "") + c : b && (e.selector = this.selector + "." + b + "(" + c + ")");
                        return e
                    },
                    each: function(a, b) {
                        return d.each(this, a, b)
                    },
                    ready: function(a) {
                        d.bindReady(),
                        x.done(a);
                        return this
                    },
                    eq: function(a) {
                        return a === -1 ? this.slice(a) : this.slice(a, +a + 1)
                    },
                    first: function() {
                        return this.eq(0)
                    },
                    last: function() {
                        return this.eq(-1)
                    },
                    slice: function() {
                        return this.pushStack(C.apply(this, arguments), "slice", C.call(arguments).join(","))
                    },
                    map: function(a) {
                        return this.pushStack(d.map(this, function(b, c) {
                            return a.call(b, c, b)
                        }))
                    },
                    end: function() {
                        return this.prevObject || this.constructor(null)
                    },
                    push: B,
                    sort: [].sort,
                    splice: [].splice
                },
                d.fn.init.prototype = d.fn,
                d.extend = d.fn.extend = function() {
                    var a, c, e, f, g, h, i = arguments[0] || {}, j = 1, k = arguments.length, l = !1;
                    typeof i === "boolean" && (l = i,
                    i = arguments[1] || {},
                    j = 2),
                    typeof i !== "object" && !d.isFunction(i) && (i = {}),
                    k === j && (i = this,
                    --j);
                    for (; j < k; j++)
                        if ((a = arguments[j]) != null)
                            for (c in a) {
                                e = i[c],
                                f = a[c];
                                if (i === f)
                                    continue;
                                l && f && (d.isPlainObject(f) || (g = d.isArray(f))) ? (g ? (g = !1,
                                h = e && d.isArray(e) ? e : []) : h = e && d.isPlainObject(e) ? e : {},
                                i[c] = d.extend(l, h, f)) : f !== b && (i[c] = f)
                            }
                    return i
                }
                ,
                d.extend({
                    noConflict: function(b) {
                        a.$ = f,
                        b && (a.jQuery = e);
                        return d
                    },
                    isReady: !1,
                    readyWait: 1,
                    ready: function(a) {
                        a === !0 && d.readyWait--;
                        if (!d.readyWait || a !== !0 && !d.isReady) {
                            if (!c.body)
                                return setTimeout(d.ready, 1);
                            d.isReady = !0;
                            if (a !== !0 && --d.readyWait > 0)
                                return;
                            x.resolveWith(c, [d]),
                            d.fn.trigger && d(c).trigger("ready").unbind("ready")
                        }
                    },
                    bindReady: function() {
                        if (!x) {
                            x = d._Deferred();
                            if (c.readyState === "complete")
                                return setTimeout(d.ready, 1);
                            if (c.addEventListener)
                                c.addEventListener("DOMContentLoaded", y, !1),
                                a.addEventListener("load", d.ready, !1);
                            else if (c.attachEvent) {
                                c.attachEvent("onreadystatechange", y),
                                a.attachEvent("onload", d.ready);
                                var b = !1;
                                try {
                                    b = a.frameElement == null
                                } catch (e) {}
                                c.documentElement.doScroll && b && G()
                            }
                        }
                    },
                    isFunction: function(a) {
                        return d.type(a) === "function"
                    },
                    isArray: Array.isArray || function(a) {
                        return d.type(a) === "array"
                    }
                    ,
                    isWindow: function(a) {
                        return a && typeof a === "object" && "setInterval"in a
                    },
                    isNaN: function(a) {
                        return a == null || !l.test(a) || isNaN(a)
                    },
                    type: function(a) {
                        return a == null ? String(a) : F[z.call(a)] || "object"
                    },
                    isPlainObject: function(a) {
                        if (!a || d.type(a) !== "object" || a.nodeType || d.isWindow(a))
                            return !1;
                        if (a.constructor && !A.call(a, "constructor") && !A.call(a.constructor.prototype, "isPrototypeOf"))
                            return !1;
                        var c;
                        for (c in a) {}
                        return c === b || A.call(a, c)
                    },
                    isEmptyObject: function(a) {
                        for (var b in a)
                            return !1;
                        return !0
                    },
                    error: function(a) {
                        throw a
                    },
                    parseJSON: function(b) {
                        if (typeof b !== "string" || !b)
                            return null;
                        b = d.trim(b);
                        if (n.test(b.replace(o, "@").replace(p, "]").replace(q, "")))
                            return a.JSON && a.JSON.parse ? a.JSON.parse(b) : (new Function("return " + b))();
                        d.error("Invalid JSON: " + b)
                    },
                    parseXML: function(b, c, e) {
                        a.DOMParser ? (e = new DOMParser,
                        c = e.parseFromString(b, "text/xml")) : (c = new ActiveXObject("Microsoft.XMLDOM"),
                        c.async = "false",
                        c.loadXML(b)),
                        e = c.documentElement,
                        (!e || !e.nodeName || e.nodeName === "parsererror") && d.error("Invalid XML: " + b);
                        return c
                    },
                    noop: function() {},
                    globalEval: function(a) {
                        if (a && i.test(a)) {
                            var b = c.head || c.getElementsByTagName("head")[0] || c.documentElement
                              , e = c.createElement("script");
                            d.support.scriptEval() ? e.appendChild(c.createTextNode(a)) : e.text = a,
                            b.insertBefore(e, b.firstChild),
                            b.removeChild(e)
                        }
                    },
                    nodeName: function(a, b) {
                        return a.nodeName && a.nodeName.toUpperCase() === b.toUpperCase()
                    },
                    each: function(a, c, e) {
                        var f, g = 0, h = a.length, i = h === b || d.isFunction(a);
                        if (e) {
                            if (i) {
                                for (f in a)
                                    if (c.apply(a[f], e) === !1)
                                        break
                            } else
                                for (; g < h; )
                                    if (c.apply(a[g++], e) === !1)
                                        break
                        } else if (i) {
                            for (f in a)
                                if (c.call(a[f], f, a[f]) === !1)
                                    break
                        } else
                            for (var j = a[0]; g < h && c.call(j, g, j) !== !1; j = a[++g]) {}
                        return a
                    },
                    trim: D ? function(a) {
                        return a == null ? "" : D.call(a)
                    }
                    : function(a) {
                        return a == null ? "" : (a + "").replace(j, "").replace(k, "")
                    }
                    ,
                    makeArray: function(a, b) {
                        var c = b || [];
                        if (a != null) {
                            var e = d.type(a);
                            a.length == null || e === "string" || e === "function" || e === "regexp" || d.isWindow(a) ? B.call(c, a) : d.merge(c, a)
                        }
                        return c
                    },
                    inArray: function(a, b) {
                        if (b.indexOf)
                            return b.indexOf(a);
                        for (var c = 0, d = b.length; c < d; c++)
                            if (b[c] === a)
                                return c;
                        return -1
                    },
                    merge: function(a, c) {
                        var d = a.length
                          , e = 0;
                        if (typeof c.length === "number")
                            for (var f = c.length; e < f; e++)
                                a[d++] = c[e];
                        else
                            while (c[e] !== b)
                                a[d++] = c[e++];
                        a.length = d;
                        return a
                    },
                    grep: function(a, b, c) {
                        var d = [], e;
                        c = !!c;
                        for (var f = 0, g = a.length; f < g; f++)
                            e = !!b(a[f], f),
                            c !== e && d.push(a[f]);
                        return d
                    },
                    map: function(a, b, c) {
                        var d = [], e;
                        for (var f = 0, g = a.length; f < g; f++)
                            e = b(a[f], f, c),
                            e != null && (d[d.length] = e);
                        return d.concat.apply([], d)
                    },
                    guid: 1,
                    proxy: function(a, c, e) {
                        arguments.length === 2 && (typeof c === "string" ? (e = a,
                        a = e[c],
                        c = b) : c && !d.isFunction(c) && (e = c,
                        c = b)),
                        !c && a && (c = function() {
                            return a.apply(e || this, arguments)
                        }
                        ),
                        a && (c.guid = a.guid = a.guid || c.guid || d.guid++);
                        return c
                    },
                    access: function(a, c, e, f, g, h) {
                        var i = a.length;
                        if (typeof c === "object") {
                            for (var j in c)
                                d.access(a, j, c[j], f, g, e);
                            return a
                        }
                        if (e !== b) {
                            f = !h && f && d.isFunction(e);
                            for (var k = 0; k < i; k++)
                                g(a[k], c, f ? e.call(a[k], k, g(a[k], c)) : e, h);
                            return a
                        }
                        return i ? g(a[0], c) : b
                    },
                    now: function() {
                        return (new Date).getTime()
                    },
                    uaMatch: function(a) {
                        a = a.toLowerCase();
                        var b = r.exec(a) || s.exec(a) || t.exec(a) || a.indexOf("compatible") < 0 && u.exec(a) || [];
                        return {
                            browser: b[1] || "",
                            version: b[2] || "0"
                        }
                    },
                    sub: function() {
                        function a(b, c) {
                            return new a.fn.init(b,c)
                        }
                        d.extend(!0, a, this),
                        a.superclass = this,
                        a.fn = a.prototype = this(),
                        a.fn.constructor = a,
                        a.subclass = this.subclass,
                        a.fn.init = function b(b, c) {
                            c && c instanceof d && !(c instanceof a) && (c = a(c));
                            return d.fn.init.call(this, b, c, e)
                        }
                        ,
                        a.fn.init.prototype = a.fn;
                        var e = a(c);
                        return a
                    },
                    browser: {}
                }),
                d.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(a, b) {
                    F["[object " + b + "]"] = b.toLowerCase()
                }),
                w = d.uaMatch(v),
                w.browser && (d.browser[w.browser] = !0,
                d.browser.version = w.version),
                d.browser.webkit && (d.browser.safari = !0),
                E && (d.inArray = function(a, b) {
                    return E.call(b, a)
                }
                ),
                i.test(" ") && (j = /^[\s\xA0]+/,
                k = /[\s\xA0]+$/),
                g = d(c),
                c.addEventListener ? y = function() {
                    c.removeEventListener("DOMContentLoaded", y, !1),
                    d.ready()
                }
                : c.attachEvent && (y = function() {
                    c.readyState === "complete" && (c.detachEvent("onreadystatechange", y),
                    d.ready())
                }
                );
                return d
            }()
              , e = "then done fail isResolved isRejected promise".split(" ")
              , f = [].slice;
            d.extend({
                _Deferred: function() {
                    var a = [], b, c, e, f = {
                        done: function() {
                            if (!e) {
                                var c = arguments, g, h, i, j, k;
                                b && (k = b,
                                b = 0);
                                for (g = 0,
                                h = c.length; g < h; g++)
                                    i = c[g],
                                    j = d.type(i),
                                    j === "array" ? f.done.apply(f, i) : j === "function" && a.push(i);
                                k && f.resolveWith(k[0], k[1])
                            }
                            return this
                        },
                        resolveWith: function(d, f) {
                            if (!e && !b && !c) {
                                f = f || [],
                                c = 1;
                                try {
                                    while (a[0])
                                        a.shift().apply(d, f)
                                } finally {
                                    b = [d, f],
                                    c = 0
                                }
                            }
                            return this
                        },
                        resolve: function() {
                            f.resolveWith(this, arguments);
                            return this
                        },
                        isResolved: function() {
                            return c || b
                        },
                        cancel: function() {
                            e = 1,
                            a = [];
                            return this
                        }
                    };
                    return f
                },
                Deferred: function(a) {
                    var b = d._Deferred(), c = d._Deferred(), f;
                    d.extend(b, {
                        then: function(a, c) {
                            b.done(a).fail(c);
                            return this
                        },
                        fail: c.done,
                        rejectWith: c.resolveWith,
                        reject: c.resolve,
                        isRejected: c.isResolved,
                        promise: function(a) {
                            if (a == null) {
                                if (f)
                                    return f;
                                f = a = {}
                            }
                            var c = e.length;
                            while (c--)
                                a[e[c]] = b[e[c]];
                            return a
                        }
                    }),
                    b.done(c.cancel).fail(b.cancel),
                    delete b.cancel,
                    a && a.call(b, b);
                    return b
                },
                when: function(a) {
                    function i(a) {
                        return function(c) {
                            b[a] = arguments.length > 1 ? f.call(arguments, 0) : c,
                            --g || h.resolveWith(h, f.call(b, 0))
                        }
                    }
                    var b = arguments
                      , c = 0
                      , e = b.length
                      , g = e
                      , h = e <= 1 && a && d.isFunction(a.promise) ? a : d.Deferred();
                    if (e > 1) {
                        for (; c < e; c++)
                            b[c] && d.isFunction(b[c].promise) ? b[c].promise().then(i(c), h.reject) : --g;
                        g || h.resolveWith(h, b)
                    } else
                        h !== a && h.resolveWith(h, e ? [a] : []);
                    return h.promise()
                }
            }),
            function() {
                d.support = {};
                var b = c.createElement("div");
                b.style.display = "none",
                b.innerHTML = "   <link/><table></table><a href='/a' style='color:red;float:left;opacity:.55;'>a</a><input type='checkbox'/>";
                var e = b.getElementsByTagName("*")
                  , f = b.getElementsByTagName("a")[0]
                  , g = c.createElement("select")
                  , h = g.appendChild(c.createElement("option"))
                  , i = b.getElementsByTagName("input")[0];
                if (e && e.length && f) {
                    d.support = {
                        leadingWhitespace: b.firstChild.nodeType === 3,
                        tbody: !b.getElementsByTagName("tbody").length,
                        htmlSerialize: !!b.getElementsByTagName("link").length,
                        style: /red/.test(f.getAttribute("style")),
                        hrefNormalized: f.getAttribute("href") === "/a",
                        opacity: /^0.55$/.test(f.style.opacity),
                        cssFloat: !!f.style.cssFloat,
                        checkOn: i.value === "on",
                        optSelected: h.selected,
                        deleteExpando: !0,
                        optDisabled: !1,
                        checkClone: !1,
                        noCloneEvent: !0,
                        noCloneChecked: !0,
                        boxModel: null,
                        inlineBlockNeedsLayout: !1,
                        shrinkWrapBlocks: !1,
                        reliableHiddenOffsets: !0,
                        reliableMarginRight: !0
                    },
                    i.checked = !0,
                    d.support.noCloneChecked = i.cloneNode(!0).checked,
                    g.disabled = !0,
                    d.support.optDisabled = !h.disabled;
                    var j = null;
                    d.support.scriptEval = function() {
                        if (j === null) {
                            var b = c.documentElement
                              , e = c.createElement("script")
                              , f = "script" + d.now();
                            try {
                                e.appendChild(c.createTextNode("window." + f + "=1;"))
                            } catch (g) {}
                            b.insertBefore(e, b.firstChild),
                            a[f] ? (j = !0,
                            delete a[f]) : j = !1,
                            b.removeChild(e)
                        }
                        return j
                    }
                    ;
                    try {
                        delete b.test
                    } catch (k) {
                        d.support.deleteExpando = !1
                    }
                    !b.addEventListener && b.attachEvent && b.fireEvent && (b.attachEvent("onclick", function l() {
                        d.support.noCloneEvent = !1,
                        b.detachEvent("onclick", l)
                    }),
                    b.cloneNode(!0).fireEvent("onclick")),
                    b = c.createElement("div"),
                    b.innerHTML = "<input type='radio' name='radiotest' checked='checked'/>";
                    var m = c.createDocumentFragment();
                    m.appendChild(b.firstChild),
                    d.support.checkClone = m.cloneNode(!0).cloneNode(!0).lastChild.checked,
                    d(function() {
                        var a = c.createElement("div")
                          , b = c.getElementsByTagName("body")[0];
                        if (b) {
                            a.style.width = a.style.paddingLeft = "1px",
                            b.appendChild(a),
                            d.boxModel = d.support.boxModel = a.offsetWidth === 2,
                            "zoom"in a.style && (a.style.display = "inline",
                            a.style.zoom = 1,
                            d.support.inlineBlockNeedsLayout = a.offsetWidth === 2,
                            a.style.display = "",
                            a.innerHTML = "<div style='width:4px;'></div>",
                            d.support.shrinkWrapBlocks = a.offsetWidth !== 2),
                            a.innerHTML = "<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>";
                            var e = a.getElementsByTagName("td");
                            d.support.reliableHiddenOffsets = e[0].offsetHeight === 0,
                            e[0].style.display = "",
                            e[1].style.display = "none",
                            d.support.reliableHiddenOffsets = d.support.reliableHiddenOffsets && e[0].offsetHeight === 0,
                            a.innerHTML = "",
                            c.defaultView && c.defaultView.getComputedStyle && (a.style.width = "1px",
                            a.style.marginRight = "0",
                            d.support.reliableMarginRight = (parseInt(c.defaultView.getComputedStyle(a, null).marginRight, 10) || 0) === 0),
                            b.removeChild(a).style.display = "none",
                            a = e = null
                        }
                    });
                    var n = function(a) {
                        var b = c.createElement("div");
                        a = "on" + a;
                        if (!b.attachEvent)
                            return !0;
                        var d = a in b;
                        d || (b.setAttribute(a, "return;"),
                        d = typeof b[a] === "function");
                        return d
                    };
                    d.support.submitBubbles = n("submit"),
                    d.support.changeBubbles = n("change"),
                    b = e = f = null
                }
            }();
            var g = /^(?:\{.*\}|\[.*\])$/;
            d.extend({
                cache: {},
                uuid: 0,
                expando: "jQuery" + (d.fn.jquery + Math.random()).replace(/\D/g, ""),
                noData: {
                    embed: !0,
                    object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
                    applet: !0
                },
                hasData: function(a) {
                    a = a.nodeType ? d.cache[a[d.expando]] : a[d.expando];
                    return !!a && !i(a)
                },
                data: function(a, c, e, f) {
                    if (d.acceptData(a)) {
                        var g = d.expando, h = typeof c === "string", i, j = a.nodeType, k = j ? d.cache : a, l = j ? a[d.expando] : a[d.expando] && d.expando;
                        if ((!l || f && l && !k[l][g]) && h && e === b)
                            return;
                        l || (j ? a[d.expando] = l = ++d.uuid : l = d.expando),
                        k[l] || (k[l] = {},
                        j || (k[l].toJSON = d.noop));
                        if (typeof c === "object" || typeof c === "function")
                            f ? k[l][g] = d.extend(k[l][g], c) : k[l] = d.extend(k[l], c);
                        i = k[l],
                        f && (i[g] || (i[g] = {}),
                        i = i[g]),
                        e !== b && (i[c] = e);
                        if (c === "events" && !i[c])
                            return i[g] && i[g].events;
                        return h ? i[c] : i
                    }
                },
                removeData: function(b, c, e) {
                    if (d.acceptData(b)) {
                        var f = d.expando
                          , g = b.nodeType
                          , h = g ? d.cache : b
                          , j = g ? b[d.expando] : d.expando;
                        if (!h[j])
                            return;
                        if (c) {
                            var k = e ? h[j][f] : h[j];
                            if (k) {
                                delete k[c];
                                if (!i(k))
                                    return
                            }
                        }
                        if (e) {
                            delete h[j][f];
                            if (!i(h[j]))
                                return
                        }
                        var l = h[j][f];
                        d.support.deleteExpando || h != a ? delete h[j] : h[j] = null,
                        l ? (h[j] = {},
                        g || (h[j].toJSON = d.noop),
                        h[j][f] = l) : g && (d.support.deleteExpando ? delete b[d.expando] : b.removeAttribute ? b.removeAttribute(d.expando) : b[d.expando] = null)
                    }
                },
                _data: function(a, b, c) {
                    return d.data(a, b, c, !0)
                },
                acceptData: function(a) {
                    if (a.nodeName && a.nodeType) {
                        var b = d.noData[a.nodeName.toLowerCase()];
                        if (b)
                            return b !== !0 && a.getAttribute("classid") === b
                    }
                    return !0
                }
            }),
            d.fn.extend({
                data: function(a, c) {
                    var e = null;
                    if (typeof a === "undefined") {
                        if (this.length) {
                            e = d.data(this[0]);
                            if (this[0].nodeType === 1) {
                                var f = this[0].attributes, g;
                                for (var i = 0, j = f.length; i < j; i++)
                                    g = f[i].name,
                                    g.indexOf("data-") === 0 && (g = g.substr(5),
                                    h(this[0], g, e[g]))
                            }
                        }
                        return e
                    }
                    if (typeof a === "object")
                        return this.each(function() {
                            d.data(this, a)
                        });
                    var k = a.split(".");
                    k[1] = k[1] ? "." + k[1] : "";
                    if (c === b) {
                        e = this.triggerHandler("getData" + k[1] + "!", [k[0]]),
                        e === b && this.length && (e = d.data(this[0], a),
                        e = h(this[0], a, e));
                        return e === b && k[1] ? this.data(k[0]) : e
                    }
                    return this.each(function() {
                        var b = d(this)
                          , e = [k[0], c];
                        b.triggerHandler("setData" + k[1] + "!", e),
                        d.data(this, a, c),
                        b.triggerHandler("changeData" + k[1] + "!", e)
                    })
                },
                removeData: function(a) {
                    return this.each(function() {
                        d.removeData(this, a)
                    })
                }
            }),
            d.extend({
                queue: function(a, b, c) {
                    if (a) {
                        b = (b || "fx") + "queue";
                        var e = d._data(a, b);
                        if (!c)
                            return e || [];
                        !e || d.isArray(c) ? e = d._data(a, b, d.makeArray(c)) : e.push(c);
                        return e
                    }
                },
                dequeue: function(a, b) {
                    b = b || "fx";
                    var c = d.queue(a, b)
                      , e = c.shift();
                    e === "inprogress" && (e = c.shift()),
                    e && (b === "fx" && c.unshift("inprogress"),
                    e.call(a, function() {
                        d.dequeue(a, b)
                    })),
                    c.length || d.removeData(a, b + "queue", !0)
                }
            }),
            d.fn.extend({
                queue: function(a, c) {
                    typeof a !== "string" && (c = a,
                    a = "fx");
                    if (c === b)
                        return d.queue(this[0], a);
                    return this.each(function(b) {
                        var e = d.queue(this, a, c);
                        a === "fx" && e[0] !== "inprogress" && d.dequeue(this, a)
                    })
                },
                dequeue: function(a) {
                    return this.each(function() {
                        d.dequeue(this, a)
                    })
                },
                delay: function(a, b) {
                    a = d.fx ? d.fx.speeds[a] || a : a,
                    b = b || "fx";
                    return this.queue(b, function() {
                        var c = this;
                        setTimeout(function() {
                            d.dequeue(c, b)
                        }, a)
                    })
                },
                clearQueue: function(a) {
                    return this.queue(a || "fx", [])
                }
            });
            var j = /[\n\t\r]/g
              , k = /\s+/
              , l = /\r/g
              , m = /^(?:href|src|style)$/
              , n = /^(?:button|input)$/i
              , o = /^(?:button|input|object|select|textarea)$/i
              , p = /^a(?:rea)?$/i
              , q = /^(?:radio|checkbox)$/i;
            d.props = {
                "for": "htmlFor",
                "class": "className",
                readonly: "readOnly",
                maxlength: "maxLength",
                cellspacing: "cellSpacing",
                rowspan: "rowSpan",
                colspan: "colSpan",
                tabindex: "tabIndex",
                usemap: "useMap",
                frameborder: "frameBorder"
            },
            d.fn.extend({
                attr: function(a, b) {
                    return d.access(this, a, b, !0, d.attr)
                },
                removeAttr: function(a, b) {
                    return this.each(function() {
                        d.attr(this, a, ""),
                        this.nodeType === 1 && this.removeAttribute(a)
                    })
                },
                addClass: function(a) {
                    if (d.isFunction(a))
                        return this.each(function(b) {
                            var c = d(this);
                            c.addClass(a.call(this, b, c.attr("class")))
                        });
                    if (a && typeof a === "string") {
                        var b = (a || "").split(k);
                        for (var c = 0, e = this.length; c < e; c++) {
                            var f = this[c];
                            if (f.nodeType === 1)
                                if (f.className) {
                                    var g = " " + f.className + " "
                                      , h = f.className;
                                    for (var i = 0, j = b.length; i < j; i++)
                                        g.indexOf(" " + b[i] + " ") < 0 && (h += " " + b[i]);
                                    f.className = d.trim(h)
                                } else
                                    f.className = a
                        }
                    }
                    return this
                },
                removeClass: function(a) {
                    if (d.isFunction(a))
                        return this.each(function(b) {
                            var c = d(this);
                            c.removeClass(a.call(this, b, c.attr("class")))
                        });
                    if (a && typeof a === "string" || a === b) {
                        var c = (a || "").split(k);
                        for (var e = 0, f = this.length; e < f; e++) {
                            var g = this[e];
                            if (g.nodeType === 1 && g.className)
                                if (a) {
                                    var h = (" " + g.className + " ").replace(j, " ");
                                    for (var i = 0, l = c.length; i < l; i++)
                                        h = h.replace(" " + c[i] + " ", " ");
                                    g.className = d.trim(h)
                                } else
                                    g.className = ""
                        }
                    }
                    return this
                },
                toggleClass: function(a, b) {
                    var c = typeof a
                      , e = typeof b === "boolean";
                    if (d.isFunction(a))
                        return this.each(function(c) {
                            var e = d(this);
                            e.toggleClass(a.call(this, c, e.attr("class"), b), b)
                        });
                    return this.each(function() {
                        if (c === "string") {
                            var f, g = 0, h = d(this), i = b, j = a.split(k);
                            while (f = j[g++])
                                i = e ? i : !h.hasClass(f),
                                h[i ? "addClass" : "removeClass"](f)
                        } else if (c === "undefined" || c === "boolean")
                            this.className && d._data(this, "__className__", this.className),
                            this.className = this.className || a === !1 ? "" : d._data(this, "__className__") || ""
                    })
                },
                hasClass: function(a) {
                    var b = " " + a + " ";
                    for (var c = 0, d = this.length; c < d; c++)
                        if ((" " + this[c].className + " ").replace(j, " ").indexOf(b) > -1)
                            return !0;
                    return !1
                },
                val: function(a) {
                    if (!arguments.length) {
                        var c = this[0];
                        if (c) {
                            if (d.nodeName(c, "option")) {
                                var e = c.attributes.value;
                                return !e || e.specified ? c.value : c.text
                            }
                            if (d.nodeName(c, "select")) {
                                var f = c.selectedIndex
                                  , g = []
                                  , h = c.options
                                  , i = c.type === "select-one";
                                if (f < 0)
                                    return null;
                                for (var j = i ? f : 0, k = i ? f + 1 : h.length; j < k; j++) {
                                    var m = h[j];
                                    if (m.selected && (d.support.optDisabled ? !m.disabled : m.getAttribute("disabled") === null) && (!m.parentNode.disabled || !d.nodeName(m.parentNode, "optgroup"))) {
                                        a = d(m).val();
                                        if (i)
                                            return a;
                                        g.push(a)
                                    }
                                }
                                if (i && !g.length && h.length)
                                    return d(h[f]).val();
                                return g
                            }
                            if (q.test(c.type) && !d.support.checkOn)
                                return c.getAttribute("value") === null ? "on" : c.value;
                            return (c.value || "").replace(l, "")
                        }
                        return b
                    }
                    var n = d.isFunction(a);
                    return this.each(function(b) {
                        var c = d(this)
                          , e = a;
                        if (this.nodeType === 1) {
                            n && (e = a.call(this, b, c.val())),
                            e == null ? e = "" : typeof e === "number" ? e += "" : d.isArray(e) && (e = d.map(e, function(a) {
                                return a == null ? "" : a + ""
                            }));
                            if (d.isArray(e) && q.test(this.type))
                                this.checked = d.inArray(c.val(), e) >= 0;
                            else if (d.nodeName(this, "select")) {
                                var f = d.makeArray(e);
                                d("option", this).each(function() {
                                    this.selected = d.inArray(d(this).val(), f) >= 0
                                }),
                                f.length || (this.selectedIndex = -1)
                            } else
                                this.value = e
                        }
                    })
                }
            }),
            d.extend({
                attrFn: {
                    val: !0,
                    css: !0,
                    html: !0,
                    text: !0,
                    data: !0,
                    width: !0,
                    height: !0,
                    offset: !0
                },
                attr: function(a, c, e, f) {
                    if (!a || a.nodeType === 3 || a.nodeType === 8 || a.nodeType === 2)
                        return b;
                    if (f && c in d.attrFn)
                        return d(a)[c](e);
                    var g = a.nodeType !== 1 || !d.isXMLDoc(a)
                      , h = e !== b;
                    c = g && d.props[c] || c;
                    if (a.nodeType === 1) {
                        var i = m.test(c);
                        if (c === "selected" && !d.support.optSelected) {
                            var j = a.parentNode;
                            j && (j.selectedIndex,
                            j.parentNode && j.parentNode.selectedIndex)
                        }
                        if ((c in a || a[c] !== b) && g && !i) {
                            h && (c === "type" && n.test(a.nodeName) && a.parentNode && d.error("type property can't be changed"),
                            e === null ? a.nodeType === 1 && a.removeAttribute(c) : a[c] = e);
                            if (d.nodeName(a, "form") && a.getAttributeNode(c))
                                return a.getAttributeNode(c).nodeValue;
                            if (c === "tabIndex") {
                                var k = a.getAttributeNode("tabIndex");
                                return k && k.specified ? k.value : o.test(a.nodeName) || p.test(a.nodeName) && a.href ? 0 : b
                            }
                            return a[c]
                        }
                        if (!d.support.style && g && c === "style") {
                            h && (a.style.cssText = "" + e);
                            return a.style.cssText
                        }
                        h && a.setAttribute(c, "" + e);
                        if (!a.attributes[c] && (a.hasAttribute && !a.hasAttribute(c)))
                            return b;
                        var l = !d.support.hrefNormalized && g && i ? a.getAttribute(c, 2) : a.getAttribute(c);
                        return l === null ? b : l
                    }
                    h && (a[c] = e);
                    return a[c]
                }
            });
            var r = /\.(.*)$/
              , s = /^(?:textarea|input|select)$/i
              , t = /\./g
              , u = / /g
              , v = /[^\w\s.|`]/g
              , w = function(a) {
                return a.replace(v, "\\$&")
            };
            d.event = {
                add: function(c, e, f, g) {
                    if (c.nodeType !== 3 && c.nodeType !== 8) {
                        try {
                            d.isWindow(c) && (c !== a && !c.frameElement) && (c = a)
                        } catch (h) {}
                        if (f === !1)
                            f = x;
                        else if (!f)
                            return;
                        var i, j;
                        f.handler && (i = f,
                        f = i.handler),
                        f.guid || (f.guid = d.guid++);
                        var k = d._data(c);
                        if (!k)
                            return;
                        var l = k.events
                          , m = k.handle;
                        l || (k.events = l = {}),
                        m || (k.handle = m = function(a) {
                            return typeof d !== "undefined" && d.event.triggered !== a.type ? d.event.handle.apply(m.elem, arguments) : b
                        }
                        ),
                        m.elem = c,
                        e = e.split(" ");
                        var n, o = 0, p;
                        while (n = e[o++]) {
                            j = i ? d.extend({}, i) : {
                                handler: f,
                                data: g
                            },
                            n.indexOf(".") > -1 ? (p = n.split("."),
                            n = p.shift(),
                            j.namespace = p.slice(0).sort().join(".")) : (p = [],
                            j.namespace = ""),
                            j.type = n,
                            j.guid || (j.guid = f.guid);
                            var q = l[n]
                              , r = d.event.special[n] || {};
                            if (!q) {
                                q = l[n] = [];
                                if (!r.setup || r.setup.call(c, g, p, m) === !1)
                                    c.addEventListener ? c.addEventListener(n, m, !1) : c.attachEvent && c.attachEvent("on" + n, m)
                            }
                            r.add && (r.add.call(c, j),
                            j.handler.guid || (j.handler.guid = f.guid)),
                            q.push(j),
                            d.event.global[n] = !0
                        }
                        c = null
                    }
                },
                global: {},
                remove: function(a, c, e, f) {
                    if (a.nodeType !== 3 && a.nodeType !== 8) {
                        e === !1 && (e = x);
                        var g, h, i, j, k = 0, l, m, n, o, p, q, r, s = d.hasData(a) && d._data(a), t = s && s.events;
                        if (!s || !t)
                            return;
                        c && c.type && (e = c.handler,
                        c = c.type);
                        if (!c || typeof c === "string" && c.charAt(0) === ".") {
                            c = c || "";
                            for (h in t)
                                d.event.remove(a, h + c);
                            return
                        }
                        c = c.split(" ");
                        while (h = c[k++]) {
                            r = h,
                            q = null,
                            l = h.indexOf(".") < 0,
                            m = [],
                            l || (m = h.split("."),
                            h = m.shift(),
                            n = new RegExp("(^|\\.)" + d.map(m.slice(0).sort(), w).join("\\.(?:.*\\.)?") + "(\\.|$)")),
                            p = t[h];
                            if (!p)
                                continue;
                            if (!e) {
                                for (j = 0; j < p.length; j++) {
                                    q = p[j];
                                    if (l || n.test(q.namespace))
                                        d.event.remove(a, r, q.handler, j),
                                        p.splice(j--, 1)
                                }
                                continue
                            }
                            o = d.event.special[h] || {};
                            for (j = f || 0; j < p.length; j++) {
                                q = p[j];
                                if (e.guid === q.guid) {
                                    if (l || n.test(q.namespace))
                                        f == null && p.splice(j--, 1),
                                        o.remove && o.remove.call(a, q);
                                    if (f != null)
                                        break
                                }
                            }
                            if (p.length === 0 || f != null && p.length === 1)
                                (!o.teardown || o.teardown.call(a, m) === !1) && d.removeEvent(a, h, s.handle),
                                g = null,
                                delete t[h]
                        }
                        if (d.isEmptyObject(t)) {
                            var u = s.handle;
                            u && (u.elem = null),
                            delete s.events,
                            delete s.handle,
                            d.isEmptyObject(s) && d.removeData(a, b, !0)
                        }
                    }
                },
                trigger: function(a, c, e) {
                    var f = a.type || a
                      , g = arguments[3];
                    if (!g) {
                        a = typeof a === "object" ? a[d.expando] ? a : d.extend(d.Event(f), a) : d.Event(f),
                        f.indexOf("!") >= 0 && (a.type = f = f.slice(0, -1),
                        a.exclusive = !0),
                        e || (a.stopPropagation(),
                        d.event.global[f] && d.each(d.cache, function() {
                            var b = d.expando
                              , e = this[b];
                            e && e.events && e.events[f] && d.event.trigger(a, c, e.handle.elem)
                        }));
                        if (!e || e.nodeType === 3 || e.nodeType === 8)
                            return b;
                        a.result = b,
                        a.target = e,
                        c = d.makeArray(c),
                        c.unshift(a)
                    }
                    a.currentTarget = e;
                    var h = d._data(e, "handle");
                    h && h.apply(e, c);
                    var i = e.parentNode || e.ownerDocument;
                    try {
                        e && e.nodeName && d.noData[e.nodeName.toLowerCase()] || e["on" + f] && e["on" + f].apply(e, c) === !1 && (a.result = !1,
                        a.preventDefault())
                    } catch (j) {}
                    if (!a.isPropagationStopped() && i)
                        d.event.trigger(a, c, i, !0);
                    else if (!a.isDefaultPrevented()) {
                        var k, l = a.target, m = f.replace(r, ""), n = d.nodeName(l, "a") && m === "click", o = d.event.special[m] || {};
                        if ((!o._default || o._default.call(e, a) === !1) && !n && !(l && l.nodeName && d.noData[l.nodeName.toLowerCase()])) {
                            try {
                                l[m] && (k = l["on" + m],
                                k && (l["on" + m] = null),
                                d.event.triggered = a.type,
                                l[m]())
                            } catch (p) {}
                            k && (l["on" + m] = k),
                            d.event.triggered = b
                        }
                    }
                },
                handle: function(c) {
                    var e, f, g, h, i, j = [], k = d.makeArray(arguments);
                    c = k[0] = d.event.fix(c || a.event),
                    c.currentTarget = this,
                    e = c.type.indexOf(".") < 0 && !c.exclusive,
                    e || (g = c.type.split("."),
                    c.type = g.shift(),
                    j = g.slice(0).sort(),
                    h = new RegExp("(^|\\.)" + j.join("\\.(?:.*\\.)?") + "(\\.|$)")),
                    c.namespace = c.namespace || j.join("."),
                    i = d._data(this, "events"),
                    f = (i || {})[c.type];
                    if (i && f) {
                        f = f.slice(0);
                        for (var l = 0, m = f.length; l < m; l++) {
                            var n = f[l];
                            if (e || h.test(n.namespace)) {
                                c.handler = n.handler,
                                c.data = n.data,
                                c.handleObj = n;
                                var o = n.handler.apply(this, k);
                                o !== b && (c.result = o,
                                o === !1 && (c.preventDefault(),
                                c.stopPropagation()));
                                if (c.isImmediatePropagationStopped())
                                    break
                            }
                        }
                    }
                    return c.result
                },
                props: "altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),
                fix: function(a) {
                    if (a[d.expando])
                        return a;
                    var e = a;
                    a = d.Event(e);
                    for (var f = this.props.length, g; f; )
                        g = this.props[--f],
                        a[g] = e[g];
                    a.target || (a.target = a.srcElement || c),
                    a.target.nodeType === 3 && (a.target = a.target.parentNode),
                    !a.relatedTarget && a.fromElement && (a.relatedTarget = a.fromElement === a.target ? a.toElement : a.fromElement);
                    if (a.pageX == null && a.clientX != null) {
                        var h = c.documentElement
                          , i = c.body;
                        a.pageX = a.clientX + (h && h.scrollLeft || i && i.scrollLeft || 0) - (h && h.clientLeft || i && i.clientLeft || 0),
                        a.pageY = a.clientY + (h && h.scrollTop || i && i.scrollTop || 0) - (h && h.clientTop || i && i.clientTop || 0)
                    }
                    a.which == null && (a.charCode != null || a.keyCode != null) && (a.which = a.charCode != null ? a.charCode : a.keyCode),
                    !a.metaKey && a.ctrlKey && (a.metaKey = a.ctrlKey),
                    !a.which && a.button !== b && (a.which = a.button & 1 ? 1 : a.button & 2 ? 3 : a.button & 4 ? 2 : 0);
                    return a
                },
                guid: 1e8,
                proxy: d.proxy,
                special: {
                    ready: {
                        setup: d.bindReady,
                        teardown: d.noop
                    },
                    live: {
                        add: function(a) {
                            d.event.add(this, H(a.origType, a.selector), d.extend({}, a, {
                                handler: G,
                                guid: a.handler.guid
                            }))
                        },
                        remove: function(a) {
                            d.event.remove(this, H(a.origType, a.selector), a)
                        }
                    },
                    beforeunload: {
                        setup: function(a, b, c) {
                            d.isWindow(this) && (this.onbeforeunload = c)
                        },
                        teardown: function(a, b) {
                            this.onbeforeunload === b && (this.onbeforeunload = null)
                        }
                    }
                }
            },
            d.removeEvent = c.removeEventListener ? function(a, b, c) {
                a.removeEventListener && a.removeEventListener(b, c, !1)
            }
            : function(a, b, c) {
                a.detachEvent && a.detachEvent("on" + b, c)
            }
            ,
            d.Event = function(a) {
                if (!this.preventDefault)
                    return new d.Event(a);
                a && a.type ? (this.originalEvent = a,
                this.type = a.type,
                this.isDefaultPrevented = a.defaultPrevented || a.returnValue === !1 || a.getPreventDefault && a.getPreventDefault() ? y : x) : this.type = a,
                this.timeStamp = d.now(),
                this[d.expando] = !0
            }
            ,
            d.Event.prototype = {
                preventDefault: function() {
                    this.isDefaultPrevented = y;
                    var a = this.originalEvent;
                    a && (a.preventDefault ? a.preventDefault() : a.returnValue = !1)
                },
                stopPropagation: function() {
                    this.isPropagationStopped = y;
                    var a = this.originalEvent;
                    a && (a.stopPropagation && a.stopPropagation(),
                    a.cancelBubble = !0)
                },
                stopImmediatePropagation: function() {
                    this.isImmediatePropagationStopped = y,
                    this.stopPropagation()
                },
                isDefaultPrevented: x,
                isPropagationStopped: x,
                isImmediatePropagationStopped: x
            };
            var z = function(a) {
                var b = a.relatedTarget;
                try {
                    if (b && b !== c && !b.parentNode)
                        return;
                    while (b && b !== this)
                        b = b.parentNode;
                    b !== this && (a.type = a.data,
                    d.event.handle.apply(this, arguments))
                } catch (e) {}
            }
              , A = function(a) {
                a.type = a.data,
                d.event.handle.apply(this, arguments)
            };
            d.each({
                mouseenter: "mouseover",
                mouseleave: "mouseout"
            }, function(a, b) {
                d.event.special[a] = {
                    setup: function(c) {
                        d.event.add(this, b, c && c.selector ? A : z, a)
                    },
                    teardown: function(a) {
                        d.event.remove(this, b, a && a.selector ? A : z)
                    }
                }
            }),
            d.support.submitBubbles || (d.event.special.submit = {
                setup: function(a, b) {
                    if (this.nodeName && this.nodeName.toLowerCase() !== "form")
                        d.event.add(this, "click.specialSubmit", function(a) {
                            var b = a.target
                              , c = b.type;
                            (c === "submit" || c === "image") && d(b).closest("form").length && E("submit", this, arguments)
                        }),
                        d.event.add(this, "keypress.specialSubmit", function(a) {
                            var b = a.target
                              , c = b.type;
                            (c === "text" || c === "password") && d(b).closest("form").length && a.keyCode === 13 && E("submit", this, arguments)
                        });
                    else
                        return !1
                },
                teardown: function(a) {
                    d.event.remove(this, ".specialSubmit")
                }
            });
            if (!d.support.changeBubbles) {
                var B, C = function(a) {
                    var b = a.type
                      , c = a.value;
                    b === "radio" || b === "checkbox" ? c = a.checked : b === "select-multiple" ? c = a.selectedIndex > -1 ? d.map(a.options, function(a) {
                        return a.selected
                    }).join("-") : "" : a.nodeName.toLowerCase() === "select" && (c = a.selectedIndex);
                    return c
                }, D = function D(a) {
                    var c = a.target, e, f;
                    if (s.test(c.nodeName) && !c.readOnly) {
                        e = d._data(c, "_change_data"),
                        f = C(c),
                        (a.type !== "focusout" || c.type !== "radio") && d._data(c, "_change_data", f);
                        if (e === b || f === e)
                            return;
                        if (e != null || f)
                            a.type = "change",
                            a.liveFired = b,
                            d.event.trigger(a, arguments[1], c)
                    }
                };
                d.event.special.change = {
                    filters: {
                        focusout: D,
                        beforedeactivate: D,
                        click: function(a) {
                            var b = a.target
                              , c = b.type;
                            (c === "radio" || c === "checkbox" || b.nodeName.toLowerCase() === "select") && D.call(this, a)
                        },
                        keydown: function(a) {
                            var b = a.target
                              , c = b.type;
                            (a.keyCode === 13 && b.nodeName.toLowerCase() !== "textarea" || a.keyCode === 32 && (c === "checkbox" || c === "radio") || c === "select-multiple") && D.call(this, a)
                        },
                        beforeactivate: function(a) {
                            var b = a.target;
                            d._data(b, "_change_data", C(b))
                        }
                    },
                    setup: function(a, b) {
                        if (this.type === "file")
                            return !1;
                        for (var c in B)
                            d.event.add(this, c + ".specialChange", B[c]);
                        return s.test(this.nodeName)
                    },
                    teardown: function(a) {
                        d.event.remove(this, ".specialChange");
                        return s.test(this.nodeName)
                    }
                },
                B = d.event.special.change.filters,
                B.focus = B.beforeactivate
            }
            c.addEventListener && d.each({
                focus: "focusin",
                blur: "focusout"
            }, function(a, b) {
                function f(a) {
                    var c = d.event.fix(a);
                    c.type = b,
                    c.originalEvent = {},
                    d.event.trigger(c, null, c.target),
                    c.isDefaultPrevented() && a.preventDefault()
                }
                var e = 0;
                d.event.special[b] = {
                    setup: function() {
                        e++ === 0 && c.addEventListener(a, f, !0)
                    },
                    teardown: function() {
                        --e === 0 && c.removeEventListener(a, f, !0)
                    }
                }
            }),
            d.each(["bind", "one"], function(a, c) {
                d.fn[c] = function(a, e, f) {
                    if (typeof a === "object") {
                        for (var g in a)
                            this[c](g, e, a[g], f);
                        return this
                    }
                    if (d.isFunction(e) || e === !1)
                        f = e,
                        e = b;
                    var h = c === "one" ? d.proxy(f, function(a) {
                        d(this).unbind(a, h);
                        return f.apply(this, arguments)
                    }) : f;
                    if (a === "unload" && c !== "one")
                        this.one(a, e, f);
                    else
                        for (var i = 0, j = this.length; i < j; i++)
                            d.event.add(this[i], a, h, e);
                    return this
                }
            }),
            d.fn.extend({
                unbind: function(a, b) {
                    if (typeof a !== "object" || a.preventDefault)
                        for (var e = 0, f = this.length; e < f; e++)
                            d.event.remove(this[e], a, b);
                    else
                        for (var c in a)
                            this.unbind(c, a[c]);
                    return this
                },
                delegate: function(a, b, c, d) {
                    return this.live(b, c, d, a)
                },
                undelegate: function(a, b, c) {
                    return arguments.length === 0 ? this.unbind("live") : this.die(b, null, c, a)
                },
                trigger: function(a, b) {
                    return this.each(function() {
                        d.event.trigger(a, b, this)
                    })
                },
                triggerHandler: function(a, b) {
                    if (this[0]) {
                        var c = d.Event(a);
                        c.preventDefault(),
                        c.stopPropagation(),
                        d.event.trigger(c, b, this[0]);
                        return c.result
                    }
                },
                toggle: function(a) {
                    var b = arguments
                      , c = 1;
                    while (c < b.length)
                        d.proxy(a, b[c++]);
                    return this.click(d.proxy(a, function(e) {
                        var f = (d._data(this, "lastToggle" + a.guid) || 0) % c;
                        d._data(this, "lastToggle" + a.guid, f + 1),
                        e.preventDefault();
                        return b[f].apply(this, arguments) || !1
                    }))
                },
                hover: function(a, b) {
                    return this.mouseenter(a).mouseleave(b || a)
                }
            });
            var F = {
                focus: "focusin",
                blur: "focusout",
                mouseenter: "mouseover",
                mouseleave: "mouseout"
            };
            d.each(["live", "die"], function(a, c) {
                d.fn[c] = function(a, e, f, g) {
                    var h, i = 0, j, k, l, m = g || this.selector, n = g ? this : d(this.context);
                    if (typeof a === "object" && !a.preventDefault) {
                        for (var o in a)
                            n[c](o, e, a[o], m);
                        return this
                    }
                    d.isFunction(e) && (f = e,
                    e = b),
                    a = (a || "").split(" ");
                    while ((h = a[i++]) != null) {
                        j = r.exec(h),
                        k = "",
                        j && (k = j[0],
                        h = h.replace(r, ""));
                        if (h === "hover") {
                            a.push("mouseenter" + k, "mouseleave" + k);
                            continue
                        }
                        l = h,
                        h === "focus" || h === "blur" ? (a.push(F[h] + k),
                        h = h + k) : h = (F[h] || h) + k;
                        if (c === "live")
                            for (var p = 0, q = n.length; p < q; p++)
                                d.event.add(n[p], "live." + H(h, m), {
                                    data: e,
                                    selector: m,
                                    handler: f,
                                    origType: h,
                                    origHandler: f,
                                    preType: l
                                });
                        else
                            n.unbind("live." + H(h, m), f)
                    }
                    return this
                }
            }),
            d.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error".split(" "), function(a, b) {
                d.fn[b] = function(a, c) {
                    c == null && (c = a,
                    a = null);
                    return arguments.length > 0 ? this.bind(b, a, c) : this.trigger(b)
                }
                ,
                d.attrFn && (d.attrFn[b] = !0)
            }),
            function() {
                function u(a, b, c, d, e, f) {
                    for (var g = 0, h = d.length; g < h; g++) {
                        var i = d[g];
                        if (i) {
                            var j = !1;
                            i = i[a];
                            while (i) {
                                if (i.sizcache === c) {
                                    j = d[i.sizset];
                                    break
                                }
                                if (i.nodeType === 1) {
                                    f || (i.sizcache = c,
                                    i.sizset = g);
                                    if (typeof b !== "string") {
                                        if (i === b) {
                                            j = !0;
                                            break
                                        }
                                    } else if (k.filter(b, [i]).length > 0) {
                                        j = i;
                                        break
                                    }
                                }
                                i = i[a]
                            }
                            d[g] = j
                        }
                    }
                }
                function t(a, b, c, d, e, f) {
                    for (var g = 0, h = d.length; g < h; g++) {
                        var i = d[g];
                        if (i) {
                            var j = !1;
                            i = i[a];
                            while (i) {
                                if (i.sizcache === c) {
                                    j = d[i.sizset];
                                    break
                                }
                                i.nodeType === 1 && !f && (i.sizcache = c,
                                i.sizset = g);
                                if (i.nodeName.toLowerCase() === b) {
                                    j = i;
                                    break
                                }
                                i = i[a]
                            }
                            d[g] = j
                        }
                    }
                }
                var a = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g
                  , e = 0
                  , f = Object.prototype.toString
                  , g = !1
                  , h = !0
                  , i = /\\/g
                  , j = /\W/;
                [0, 0].sort(function() {
                    h = !1;
                    return 0
                });
                var k = function(b, d, e, g) {
                    e = e || [],
                    d = d || c;
                    var h = d;
                    if (d.nodeType !== 1 && d.nodeType !== 9)
                        return [];
                    if (!b || typeof b !== "string")
                        return e;
                    var i, j, n, o, q, r, s, t, u = !0, w = k.isXML(d), x = [], y = b;
                    do {
                        a.exec(""),
                        i = a.exec(y);
                        if (i) {
                            y = i[3],
                            x.push(i[1]);
                            if (i[2]) {
                                o = i[3];
                                break
                            }
                        }
                    } while (i);if (x.length > 1 && m.exec(b))
                        if (x.length === 2 && l.relative[x[0]])
                            j = v(x[0] + x[1], d);
                        else {
                            j = l.relative[x[0]] ? [d] : k(x.shift(), d);
                            while (x.length)
                                b = x.shift(),
                                l.relative[b] && (b += x.shift()),
                                j = v(b, j)
                        }
                    else {
                        !g && x.length > 1 && d.nodeType === 9 && !w && l.match.ID.test(x[0]) && !l.match.ID.test(x[x.length - 1]) && (q = k.find(x.shift(), d, w),
                        d = q.expr ? k.filter(q.expr, q.set)[0] : q.set[0]);
                        if (d) {
                            q = g ? {
                                expr: x.pop(),
                                set: p(g)
                            } : k.find(x.pop(), x.length === 1 && (x[0] === "~" || x[0] === "+") && d.parentNode ? d.parentNode : d, w),
                            j = q.expr ? k.filter(q.expr, q.set) : q.set,
                            x.length > 0 ? n = p(j) : u = !1;
                            while (x.length)
                                r = x.pop(),
                                s = r,
                                l.relative[r] ? s = x.pop() : r = "",
                                s == null && (s = d),
                                l.relative[r](n, s, w)
                        } else
                            n = x = []
                    }
                    n || (n = j),
                    n || k.error(r || b);
                    if (f.call(n) === "[object Array]")
                        if (u)
                            if (d && d.nodeType === 1)
                                for (t = 0; n[t] != null; t++)
                                    n[t] && (n[t] === !0 || n[t].nodeType === 1 && k.contains(d, n[t])) && e.push(j[t]);
                            else
                                for (t = 0; n[t] != null; t++)
                                    n[t] && n[t].nodeType === 1 && e.push(j[t]);
                        else
                            e.push.apply(e, n);
                    else
                        p(n, e);
                    o && (k(o, h, e, g),
                    k.uniqueSort(e));
                    return e
                };
                k.uniqueSort = function(a) {
                    if (r) {
                        g = h,
                        a.sort(r);
                        if (g)
                            for (var b = 1; b < a.length; b++)
                                a[b] === a[b - 1] && a.splice(b--, 1)
                    }
                    return a
                }
                ,
                k.matches = function(a, b) {
                    return k(a, null, null, b)
                }
                ,
                k.matchesSelector = function(a, b) {
                    return k(b, null, null, [a]).length > 0
                }
                ,
                k.find = function(a, b, c) {
                    var d;
                    if (!a)
                        return [];
                    for (var e = 0, f = l.order.length; e < f; e++) {
                        var g, h = l.order[e];
                        if (g = l.leftMatch[h].exec(a)) {
                            var j = g[1];
                            g.splice(1, 1);
                            if (j.substr(j.length - 1) !== "\\") {
                                g[1] = (g[1] || "").replace(i, ""),
                                d = l.find[h](g, b, c);
                                if (d != null) {
                                    a = a.replace(l.match[h], "");
                                    break
                                }
                            }
                        }
                    }
                    d || (d = typeof b.getElementsByTagName !== "undefined" ? b.getElementsByTagName("*") : []);
                    return {
                        set: d,
                        expr: a
                    }
                }
                ,
                k.filter = function(a, c, d, e) {
                    var f, g, h = a, i = [], j = c, m = c && c[0] && k.isXML(c[0]);
                    while (a && c.length) {
                        for (var n in l.filter)
                            if ((f = l.leftMatch[n].exec(a)) != null && f[2]) {
                                var o, p, q = l.filter[n], r = f[1];
                                g = !1,
                                f.splice(1, 1);
                                if (r.substr(r.length - 1) === "\\")
                                    continue;
                                j === i && (i = []);
                                if (l.preFilter[n]) {
                                    f = l.preFilter[n](f, j, d, i, e, m);
                                    if (f) {
                                        if (f === !0)
                                            continue
                                    } else
                                        g = o = !0
                                }
                                if (f)
                                    for (var s = 0; (p = j[s]) != null; s++)
                                        if (p) {
                                            o = q(p, f, s, j);
                                            var t = e ^ !!o;
                                            d && o != null ? t ? g = !0 : j[s] = !1 : t && (i.push(p),
                                            g = !0)
                                        }
                                if (o !== b) {
                                    d || (j = i),
                                    a = a.replace(l.match[n], "");
                                    if (!g)
                                        return [];
                                    break
                                }
                            }
                        if (a === h)
                            if (g == null)
                                k.error(a);
                            else
                                break;
                        h = a
                    }
                    return j
                }
                ,
                k.error = function(a) {
                    throw "Syntax error, unrecognized expression: " + a
                }
                ;
                var l = k.selectors = {
                    order: ["ID", "NAME", "TAG"],
                    match: {
                        ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
                        CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
                        NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
                        ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
                        TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
                        CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
                        POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
                        PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
                    },
                    leftMatch: {},
                    attrMap: {
                        "class": "className",
                        "for": "htmlFor"
                    },
                    attrHandle: {
                        href: function(a) {
                            return a.getAttribute("href")
                        },
                        type: function(a) {
                            return a.getAttribute("type")
                        }
                    },
                    relative: {
                        "+": function(a, b) {
                            var c = typeof b === "string"
                              , d = c && !j.test(b)
                              , e = c && !d;
                            d && (b = b.toLowerCase());
                            for (var f = 0, g = a.length, h; f < g; f++)
                                if (h = a[f]) {
                                    while ((h = h.previousSibling) && h.nodeType !== 1) {}
                                    a[f] = e || h && h.nodeName.toLowerCase() === b ? h || !1 : h === b
                                }
                            e && k.filter(b, a, !0)
                        },
                        ">": function(a, b) {
                            var c, d = typeof b === "string", e = 0, f = a.length;
                            if (d && !j.test(b)) {
                                b = b.toLowerCase();
                                for (; e < f; e++) {
                                    c = a[e];
                                    if (c) {
                                        var g = c.parentNode;
                                        a[e] = g.nodeName.toLowerCase() === b ? g : !1
                                    }
                                }
                            } else {
                                for (; e < f; e++)
                                    c = a[e],
                                    c && (a[e] = d ? c.parentNode : c.parentNode === b);
                                d && k.filter(b, a, !0)
                            }
                        },
                        "": function(a, b, c) {
                            var d, f = e++, g = u;
                            typeof b === "string" && !j.test(b) && (b = b.toLowerCase(),
                            d = b,
                            g = t),
                            g("parentNode", b, f, a, d, c)
                        },
                        "~": function(a, b, c) {
                            var d, f = e++, g = u;
                            typeof b === "string" && !j.test(b) && (b = b.toLowerCase(),
                            d = b,
                            g = t),
                            g("previousSibling", b, f, a, d, c)
                        }
                    },
                    find: {
                        ID: function(a, b, c) {
                            if (typeof b.getElementById !== "undefined" && !c) {
                                var d = b.getElementById(a[1]);
                                return d && d.parentNode ? [d] : []
                            }
                        },
                        NAME: function(a, b) {
                            if (typeof b.getElementsByName !== "undefined") {
                                var c = []
                                  , d = b.getElementsByName(a[1]);
                                for (var e = 0, f = d.length; e < f; e++)
                                    d[e].getAttribute("name") === a[1] && c.push(d[e]);
                                return c.length === 0 ? null : c
                            }
                        },
                        TAG: function(a, b) {
                            if (typeof b.getElementsByTagName !== "undefined")
                                return b.getElementsByTagName(a[1])
                        }
                    },
                    preFilter: {
                        CLASS: function(a, b, c, d, e, f) {
                            a = " " + a[1].replace(i, "") + " ";
                            if (f)
                                return a;
                            for (var g = 0, h; (h = b[g]) != null; g++)
                                h && (e ^ (h.className && (" " + h.className + " ").replace(/[\t\n\r]/g, " ").indexOf(a) >= 0) ? c || d.push(h) : c && (b[g] = !1));
                            return !1
                        },
                        ID: function(a) {
                            return a[1].replace(i, "")
                        },
                        TAG: function(a, b) {
                            return a[1].replace(i, "").toLowerCase()
                        },
                        CHILD: function(a) {
                            if (a[1] === "nth") {
                                a[2] || k.error(a[0]),
                                a[2] = a[2].replace(/^\+|\s*/g, "");
                                var b = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2] === "even" && "2n" || a[2] === "odd" && "2n+1" || !/\D/.test(a[2]) && "0n+" + a[2] || a[2]);
                                a[2] = b[1] + (b[2] || 1) - 0,
                                a[3] = b[3] - 0
                            } else
                                a[2] && k.error(a[0]);
                            a[0] = e++;
                            return a
                        },
                        ATTR: function(a, b, c, d, e, f) {
                            var g = a[1] = a[1].replace(i, "");
                            !f && l.attrMap[g] && (a[1] = l.attrMap[g]),
                            a[4] = (a[4] || a[5] || "").replace(i, ""),
                            a[2] === "~=" && (a[4] = " " + a[4] + " ");
                            return a
                        },
                        PSEUDO: function(b, c, d, e, f) {
                            if (b[1] === "not")
                                if ((a.exec(b[3]) || "").length > 1 || /^\w/.test(b[3]))
                                    b[3] = k(b[3], null, null, c);
                                else {
                                    var g = k.filter(b[3], c, d, !0 ^ f);
                                    d || e.push.apply(e, g);
                                    return !1
                                }
                            else if (l.match.POS.test(b[0]) || l.match.CHILD.test(b[0]))
                                return !0;
                            return b
                        },
                        POS: function(a) {
                            a.unshift(!0);
                            return a
                        }
                    },
                    filters: {
                        enabled: function(a) {
                            return a.disabled === !1 && a.type !== "hidden"
                        },
                        disabled: function(a) {
                            return a.disabled === !0
                        },
                        checked: function(a) {
                            return a.checked === !0
                        },
                        selected: function(a) {
                            a.parentNode && a.parentNode.selectedIndex;
                            return a.selected === !0
                        },
                        parent: function(a) {
                            return !!a.firstChild
                        },
                        empty: function(a) {
                            return !a.firstChild
                        },
                        has: function(a, b, c) {
                            return !!k(c[3], a).length
                        },
                        header: function(a) {
                            return /h\d/i.test(a.nodeName)
                        },
                        text: function(a) {
                            var b = a.getAttribute("type")
                              , c = a.type;
                            return "text" === c && (b === c || b === null)
                        },
                        radio: function(a) {
                            return "radio" === a.type
                        },
                        checkbox: function(a) {
                            return "checkbox" === a.type
                        },
                        file: function(a) {
                            return "file" === a.type
                        },
                        password: function(a) {
                            return "password" === a.type
                        },
                        submit: function(a) {
                            return "submit" === a.type
                        },
                        image: function(a) {
                            return "image" === a.type
                        },
                        reset: function(a) {
                            return "reset" === a.type
                        },
                        button: function(a) {
                            return "button" === a.type || a.nodeName.toLowerCase() === "button"
                        },
                        input: function(a) {
                            return /input|select|textarea|button/i.test(a.nodeName)
                        }
                    },
                    setFilters: {
                        first: function(a, b) {
                            return b === 0
                        },
                        last: function(a, b, c, d) {
                            return b === d.length - 1
                        },
                        even: function(a, b) {
                            return b % 2 === 0
                        },
                        odd: function(a, b) {
                            return b % 2 === 1
                        },
                        lt: function(a, b, c) {
                            return b < c[3] - 0
                        },
                        gt: function(a, b, c) {
                            return b > c[3] - 0
                        },
                        nth: function(a, b, c) {
                            return c[3] - 0 === b
                        },
                        eq: function(a, b, c) {
                            return c[3] - 0 === b
                        }
                    },
                    filter: {
                        PSEUDO: function(a, b, c, d) {
                            var e = b[1]
                              , f = l.filters[e];
                            if (f)
                                return f(a, c, b, d);
                            if (e === "contains")
                                return (a.textContent || a.innerText || k.getText([a]) || "").indexOf(b[3]) >= 0;
                            if (e === "not") {
                                var g = b[3];
                                for (var h = 0, i = g.length; h < i; h++)
                                    if (g[h] === a)
                                        return !1;
                                return !0
                            }
                            k.error(e)
                        },
                        CHILD: function(a, b) {
                            var c = b[1]
                              , d = a;
                            switch (c) {
                            case "only":
                            case "first":
                                while (d = d.previousSibling)
                                    if (d.nodeType === 1)
                                        return !1;
                                if (c === "first")
                                    return !0;
                                d = a;
                            case "last":
                                while (d = d.nextSibling)
                                    if (d.nodeType === 1)
                                        return !1;
                                return !0;
                            case "nth":
                                var e = b[2]
                                  , f = b[3];
                                if (e === 1 && f === 0)
                                    return !0;
                                var g = b[0]
                                  , h = a.parentNode;
                                if (h && (h.sizcache !== g || !a.nodeIndex)) {
                                    var i = 0;
                                    for (d = h.firstChild; d; d = d.nextSibling)
                                        d.nodeType === 1 && (d.nodeIndex = ++i);
                                    h.sizcache = g
                                }
                                var j = a.nodeIndex - f;
                                return e === 0 ? j === 0 : j % e === 0 && j / e >= 0
                            }
                        },
                        ID: function(a, b) {
                            return a.nodeType === 1 && a.getAttribute("id") === b
                        },
                        TAG: function(a, b) {
                            return b === "*" && a.nodeType === 1 || a.nodeName.toLowerCase() === b
                        },
                        CLASS: function(a, b) {
                            return (" " + (a.className || a.getAttribute("class")) + " ").indexOf(b) > -1
                        },
                        ATTR: function(a, b) {
                            var c = b[1]
                              , d = l.attrHandle[c] ? l.attrHandle[c](a) : a[c] != null ? a[c] : a.getAttribute(c)
                              , e = d + ""
                              , f = b[2]
                              , g = b[4];
                            return d == null ? f === "!=" : f === "=" ? e === g : f === "*=" ? e.indexOf(g) >= 0 : f === "~=" ? (" " + e + " ").indexOf(g) >= 0 : g ? f === "!=" ? e !== g : f === "^=" ? e.indexOf(g) === 0 : f === "$=" ? e.substr(e.length - g.length) === g : f === "|=" ? e === g || e.substr(0, g.length + 1) === g + "-" : !1 : e && d !== !1
                        },
                        POS: function(a, b, c, d) {
                            var e = b[2]
                              , f = l.setFilters[e];
                            if (f)
                                return f(a, c, b, d)
                        }
                    }
                }
                  , m = l.match.POS
                  , n = function(a, b) {
                    return "\\" + (b - 0 + 1)
                };
                for (var o in l.match)
                    l.match[o] = new RegExp(l.match[o].source + /(?![^\[]*\])(?![^\(]*\))/.source),
                    l.leftMatch[o] = new RegExp(/(^(?:.|\r|\n)*?)/.source + l.match[o].source.replace(/\\(\d+)/g, n));
                var p = function(a, b) {
                    a = Array.prototype.slice.call(a, 0);
                    if (b) {
                        b.push.apply(b, a);
                        return b
                    }
                    return a
                };
                try {
                    Array.prototype.slice.call(c.documentElement.childNodes, 0)[0].nodeType
                } catch (q) {
                    p = function(a, b) {
                        var c = 0
                          , d = b || [];
                        if (f.call(a) === "[object Array]")
                            Array.prototype.push.apply(d, a);
                        else if (typeof a.length === "number")
                            for (var e = a.length; c < e; c++)
                                d.push(a[c]);
                        else
                            for (; a[c]; c++)
                                d.push(a[c]);
                        return d
                    }
                }
                var r, s;
                c.documentElement.compareDocumentPosition ? r = function(a, b) {
                    if (a === b) {
                        g = !0;
                        return 0
                    }
                    if (!a.compareDocumentPosition || !b.compareDocumentPosition)
                        return a.compareDocumentPosition ? -1 : 1;
                    return a.compareDocumentPosition(b) & 4 ? -1 : 1
                }
                : (r = function(a, b) {
                    var c, d, e = [], f = [], h = a.parentNode, i = b.parentNode, j = h;
                    if (a === b) {
                        g = !0;
                        return 0
                    }
                    if (h === i)
                        return s(a, b);
                    if (!h)
                        return -1;
                    if (!i)
                        return 1;
                    while (j)
                        e.unshift(j),
                        j = j.parentNode;
                    j = i;
                    while (j)
                        f.unshift(j),
                        j = j.parentNode;
                    c = e.length,
                    d = f.length;
                    for (var k = 0; k < c && k < d; k++)
                        if (e[k] !== f[k])
                            return s(e[k], f[k]);
                    return k === c ? s(a, f[k], -1) : s(e[k], b, 1)
                }
                ,
                s = function(a, b, c) {
                    if (a === b)
                        return c;
                    var d = a.nextSibling;
                    while (d) {
                        if (d === b)
                            return -1;
                        d = d.nextSibling
                    }
                    return 1
                }
                ),
                k.getText = function(a) {
                    var b = "", c;
                    for (var d = 0; a[d]; d++)
                        c = a[d],
                        c.nodeType === 3 || c.nodeType === 4 ? b += c.nodeValue : c.nodeType !== 8 && (b += k.getText(c.childNodes));
                    return b
                }
                ,
                function() {
                    var a = c.createElement("div")
                      , d = "script" + (new Date).getTime()
                      , e = c.documentElement;
                    a.innerHTML = "<a name='" + d + "'/>",
                    e.insertBefore(a, e.firstChild),
                    c.getElementById(d) && (l.find.ID = function(a, c, d) {
                        if (typeof c.getElementById !== "undefined" && !d) {
                            var e = c.getElementById(a[1]);
                            return e ? e.id === a[1] || typeof e.getAttributeNode !== "undefined" && e.getAttributeNode("id").nodeValue === a[1] ? [e] : b : []
                        }
                    }
                    ,
                    l.filter.ID = function(a, b) {
                        var c = typeof a.getAttributeNode !== "undefined" && a.getAttributeNode("id");
                        return a.nodeType === 1 && c && c.nodeValue === b
                    }
                    ),
                    e.removeChild(a),
                    e = a = null
                }(),
                function() {
                    var a = c.createElement("div");
                    a.appendChild(c.createComment("")),
                    a.getElementsByTagName("*").length > 0 && (l.find.TAG = function(a, b) {
                        var c = b.getElementsByTagName(a[1]);
                        if (a[1] === "*") {
                            var d = [];
                            for (var e = 0; c[e]; e++)
                                c[e].nodeType === 1 && d.push(c[e]);
                            c = d
                        }
                        return c
                    }
                    ),
                    a.innerHTML = "<a href='#'></a>",
                    a.firstChild && typeof a.firstChild.getAttribute !== "undefined" && a.firstChild.getAttribute("href") !== "#" && (l.attrHandle.href = function(a) {
                        return a.getAttribute("href", 2)
                    }
                    ),
                    a = null
                }(),
                c.querySelectorAll && function() {
                    var a = k
                      , b = c.createElement("div")
                      , d = "__sizzle__";
                    b.innerHTML = "<p class='TEST'></p>";
                    if (!b.querySelectorAll || b.querySelectorAll(".TEST").length !== 0) {
                        k = function(b, e, f, g) {
                            e = e || c;
                            if (!g && !k.isXML(e)) {
                                var h = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);
                                if (h && (e.nodeType === 1 || e.nodeType === 9)) {
                                    if (h[1])
                                        return p(e.getElementsByTagName(b), f);
                                    if (h[2] && l.find.CLASS && e.getElementsByClassName)
                                        return p(e.getElementsByClassName(h[2]), f)
                                }
                                if (e.nodeType === 9) {
                                    if (b === "body" && e.body)
                                        return p([e.body], f);
                                    if (h && h[3]) {
                                        var i = e.getElementById(h[3]);
                                        if (!i || !i.parentNode)
                                            return p([], f);
                                        if (i.id === h[3])
                                            return p([i], f)
                                    }
                                    try {
                                        return p(e.querySelectorAll(b), f)
                                    } catch (j) {}
                                } else if (e.nodeType === 1 && e.nodeName.toLowerCase() !== "object") {
                                    var m = e
                                      , n = e.getAttribute("id")
                                      , o = n || d
                                      , q = e.parentNode
                                      , r = /^\s*[+~]/.test(b);
                                    n ? o = o.replace(/'/g, "\\$&") : e.setAttribute("id", o),
                                    r && q && (e = e.parentNode);
                                    try {
                                        if (!r || q)
                                            return p(e.querySelectorAll("[id='" + o + "'] " + b), f)
                                    } catch (s) {} finally {
                                        n || m.removeAttribute("id")
                                    }
                                }
                            }
                            return a(b, e, f, g)
                        }
                        ;
                        for (var e in a)
                            k[e] = a[e];
                        b = null
                    }
                }(),
                function() {
                    var a = c.documentElement
                      , b = a.matchesSelector || a.mozMatchesSelector || a.webkitMatchesSelector || a.msMatchesSelector;
                    if (b) {
                        var d = !b.call(c.createElement("div"), "div")
                          , e = !1;
                        try {
                            b.call(c.documentElement, "[test!='']:sizzle")
                        } catch (f) {
                            e = !0
                        }
                        k.matchesSelector = function(a, c) {
                            c = c.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");
                            if (!k.isXML(a))
                                try {
                                    if (e || !l.match.PSEUDO.test(c) && !/!=/.test(c)) {
                                        var f = b.call(a, c);
                                        if (f || !d || a.document && a.document.nodeType !== 11)
                                            return f
                                    }
                                } catch (g) {}
                            return k(c, null, null, [a]).length > 0
                        }
                    }
                }(),
                function() {
                    var a = c.createElement("div");
                    a.innerHTML = "<div class='test e'></div><div class='test'></div>";
                    if (a.getElementsByClassName && a.getElementsByClassName("e").length !== 0) {
                        a.lastChild.className = "e";
                        if (a.getElementsByClassName("e").length === 1)
                            return;
                        l.order.splice(1, 0, "CLASS"),
                        l.find.CLASS = function(a, b, c) {
                            if (typeof b.getElementsByClassName !== "undefined" && !c)
                                return b.getElementsByClassName(a[1])
                        }
                        ,
                        a = null
                    }
                }(),
                c.documentElement.contains ? k.contains = function(a, b) {
                    return a !== b && (a.contains ? a.contains(b) : !0)
                }
                : c.documentElement.compareDocumentPosition ? k.contains = function(a, b) {
                    return !!(a.compareDocumentPosition(b) & 16)
                }
                : k.contains = function() {
                    return !1
                }
                ,
                k.isXML = function(a) {
                    var b = (a ? a.ownerDocument || a : 0).documentElement;
                    return b ? b.nodeName !== "HTML" : !1
                }
                ;
                var v = function(a, b) {
                    var c, d = [], e = "", f = b.nodeType ? [b] : b;
                    while (c = l.match.PSEUDO.exec(a))
                        e += c[0],
                        a = a.replace(l.match.PSEUDO, "");
                    a = l.relative[a] ? a + "*" : a;
                    for (var g = 0, h = f.length; g < h; g++)
                        k(a, f[g], d);
                    return k.filter(e, d)
                };
                d.find = k,
                d.expr = k.selectors,
                d.expr[":"] = d.expr.filters,
                d.unique = k.uniqueSort,
                d.text = k.getText,
                d.isXMLDoc = k.isXML,
                d.contains = k.contains
            }();
            var I = /Until$/
              , J = /^(?:parents|prevUntil|prevAll)/
              , K = /,/
              , L = /^.[^:#\[\.,]*$/
              , M = Array.prototype.slice
              , N = d.expr.match.POS
              , O = {
                children: !0,
                contents: !0,
                next: !0,
                prev: !0
            };
            d.fn.extend({
                find: function(a) {
                    var b = this.pushStack("", "find", a)
                      , c = 0;
                    for (var e = 0, f = this.length; e < f; e++) {
                        c = b.length,
                        d.find(a, this[e], b);
                        if (e > 0)
                            for (var g = c; g < b.length; g++)
                                for (var h = 0; h < c; h++)
                                    if (b[h] === b[g]) {
                                        b.splice(g--, 1);
                                        break
                                    }
                    }
                    return b
                },
                has: function(a) {
                    var b = d(a);
                    return this.filter(function() {
                        for (var a = 0, c = b.length; a < c; a++)
                            if (d.contains(this, b[a]))
                                return !0
                    })
                },
                not: function(a) {
                    return this.pushStack(Q(this, a, !1), "not", a)
                },
                filter: function(a) {
                    return this.pushStack(Q(this, a, !0), "filter", a)
                },
                is: function(a) {
                    return !!a && d.filter(a, this).length > 0
                },
                closest: function(a, b) {
                    var c = [], e, f, g = this[0];
                    if (d.isArray(a)) {
                        var h, i, j = {}, k = 1;
                        if (g && a.length) {
                            for (e = 0,
                            f = a.length; e < f; e++)
                                i = a[e],
                                j[i] || (j[i] = d.expr.match.POS.test(i) ? d(i, b || this.context) : i);
                            while (g && g.ownerDocument && g !== b) {
                                for (i in j)
                                    h = j[i],
                                    (h.jquery ? h.index(g) > -1 : d(g).is(h)) && c.push({
                                        selector: i,
                                        elem: g,
                                        level: k
                                    });
                                g = g.parentNode,
                                k++
                            }
                        }
                        return c
                    }
                    var l = N.test(a) ? d(a, b || this.context) : null;
                    for (e = 0,
                    f = this.length; e < f; e++) {
                        g = this[e];
                        while (g) {
                            if (l ? l.index(g) > -1 : d.find.matchesSelector(g, a)) {
                                c.push(g);
                                break
                            }
                            g = g.parentNode;
                            if (!g || !g.ownerDocument || g === b)
                                break
                        }
                    }
                    c = c.length > 1 ? d.unique(c) : c;
                    return this.pushStack(c, "closest", a)
                },
                index: function(a) {
                    if (!a || typeof a === "string")
                        return d.inArray(this[0], a ? d(a) : this.parent().children());
                    return d.inArray(a.jquery ? a[0] : a, this)
                },
                add: function(a, b) {
                    var c = typeof a === "string" ? d(a, b) : d.makeArray(a)
                      , e = d.merge(this.get(), c);
                    return this.pushStack(P(c[0]) || P(e[0]) ? e : d.unique(e))
                },
                andSelf: function() {
                    return this.add(this.prevObject)
                }
            }),
            d.each({
                parent: function(a) {
                    var b = a.parentNode;
                    return b && b.nodeType !== 11 ? b : null
                },
                parents: function(a) {
                    return d.dir(a, "parentNode")
                },
                parentsUntil: function(a, b, c) {
                    return d.dir(a, "parentNode", c)
                },
                next: function(a) {
                    return d.nth(a, 2, "nextSibling")
                },
                prev: function(a) {
                    return d.nth(a, 2, "previousSibling")
                },
                nextAll: function(a) {
                    return d.dir(a, "nextSibling")
                },
                prevAll: function(a) {
                    return d.dir(a, "previousSibling")
                },
                nextUntil: function(a, b, c) {
                    return d.dir(a, "nextSibling", c)
                },
                prevUntil: function(a, b, c) {
                    return d.dir(a, "previousSibling", c)
                },
                siblings: function(a) {
                    return d.sibling(a.parentNode.firstChild, a)
                },
                children: function(a) {
                    return d.sibling(a.firstChild)
                },
                contents: function(a) {
                    return d.nodeName(a, "iframe") ? a.contentDocument || a.contentWindow.document : d.makeArray(a.childNodes)
                }
            }, function(a, b) {
                d.fn[a] = function(c, e) {
                    var f = d.map(this, b, c)
                      , g = M.call(arguments);
                    I.test(a) || (e = c),
                    e && typeof e === "string" && (f = d.filter(e, f)),
                    f = this.length > 1 && !O[a] ? d.unique(f) : f,
                    (this.length > 1 || K.test(e)) && J.test(a) && (f = f.reverse());
                    return this.pushStack(f, a, g.join(","))
                }
            }),
            d.extend({
                filter: function(a, b, c) {
                    c && (a = ":not(" + a + ")");
                    return b.length === 1 ? d.find.matchesSelector(b[0], a) ? [b[0]] : [] : d.find.matches(a, b)
                },
                dir: function(a, c, e) {
                    var f = []
                      , g = a[c];
                    while (g && g.nodeType !== 9 && (e === b || g.nodeType !== 1 || !d(g).is(e)))
                        g.nodeType === 1 && f.push(g),
                        g = g[c];
                    return f
                },
                nth: function(a, b, c, d) {
                    b = b || 1;
                    var e = 0;
                    for (; a; a = a[c])
                        if (a.nodeType === 1 && ++e === b)
                            break;
                    return a
                },
                sibling: function(a, b) {
                    var c = [];
                    for (; a; a = a.nextSibling)
                        a.nodeType === 1 && a !== b && c.push(a);
                    return c
                }
            });
            var R = / jQuery\d+="(?:\d+|null)"/g
              , S = /^\s+/
              , T = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig
              , U = /<([\w:]+)/
              , V = /<tbody/i
              , W = /<|&#?\w+;/
              , X = /<(?:script|object|embed|option|style)/i
              , Y = /checked\s*(?:[^=]|=\s*.checked.)/i
              , Z = {
                option: [1, "<select multiple='multiple'>", "</select>"],
                legend: [1, "<fieldset>", "</fieldset>"],
                thead: [1, "<table>", "</table>"],
                tr: [2, "<table><tbody>", "</tbody></table>"],
                td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
                col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
                area: [1, "<map>", "</map>"],
                _default: [0, "", ""]
            };
            Z.optgroup = Z.option,
            Z.tbody = Z.tfoot = Z.colgroup = Z.caption = Z.thead,
            Z.th = Z.td,
            d.support.htmlSerialize || (Z._default = [1, "div<div>", "</div>"]),
            d.fn.extend({
                text: function(a) {
                    if (d.isFunction(a))
                        return this.each(function(b) {
                            var c = d(this);
                            c.text(a.call(this, b, c.text()))
                        });
                    if (typeof a !== "object" && a !== b)
                        return this.empty().append((this[0] && this[0].ownerDocument || c).createTextNode(a));
                    return d.text(this)
                },
                wrapAll: function(a) {
                    if (d.isFunction(a))
                        return this.each(function(b) {
                            d(this).wrapAll(a.call(this, b))
                        });
                    if (this[0]) {
                        var b = d(a, this[0].ownerDocument).eq(0).clone(!0);
                        this[0].parentNode && b.insertBefore(this[0]),
                        b.map(function() {
                            var a = this;
                            while (a.firstChild && a.firstChild.nodeType === 1)
                                a = a.firstChild;
                            return a
                        }).append(this)
                    }
                    return this
                },
                wrapInner: function(a) {
                    if (d.isFunction(a))
                        return this.each(function(b) {
                            d(this).wrapInner(a.call(this, b))
                        });
                    return this.each(function() {
                        var b = d(this)
                          , c = b.contents();
                        c.length ? c.wrapAll(a) : b.append(a)
                    })
                },
                wrap: function(a) {
                    return this.each(function() {
                        d(this).wrapAll(a)
                    })
                },
                unwrap: function() {
                    return this.parent().each(function() {
                        d.nodeName(this, "body") || d(this).replaceWith(this.childNodes)
                    }).end()
                },
                append: function() {
                    return this.domManip(arguments, !0, function(a) {
                        this.nodeType === 1 && this.appendChild(a)
                    })
                },
                prepend: function() {
                    return this.domManip(arguments, !0, function(a) {
                        this.nodeType === 1 && this.insertBefore(a, this.firstChild)
                    })
                },
                before: function() {
                    if (this[0] && this[0].parentNode)
                        return this.domManip(arguments, !1, function(a) {
                            this.parentNode.insertBefore(a, this)
                        });
                    if (arguments.length) {
                        var a = d(arguments[0]);
                        a.push.apply(a, this.toArray());
                        return this.pushStack(a, "before", arguments)
                    }
                },
                after: function() {
                    if (this[0] && this[0].parentNode)
                        return this.domManip(arguments, !1, function(a) {
                            this.parentNode.insertBefore(a, this.nextSibling)
                        });
                    if (arguments.length) {
                        var a = this.pushStack(this, "after", arguments);
                        a.push.apply(a, d(arguments[0]).toArray());
                        return a
                    }
                },
                remove: function(a, b) {
                    for (var c = 0, e; (e = this[c]) != null; c++)
                        if (!a || d.filter(a, [e]).length)
                            !b && e.nodeType === 1 && (d.cleanData(e.getElementsByTagName("*")),
                            d.cleanData([e])),
                            e.parentNode && e.parentNode.removeChild(e);
                    return this
                },
                empty: function() {
                    for (var a = 0, b; (b = this[a]) != null; a++) {
                        b.nodeType === 1 && d.cleanData(b.getElementsByTagName("*"));
                        while (b.firstChild)
                            b.removeChild(b.firstChild)
                    }
                    return this
                },
                clone: function(a, b) {
                    a = a == null ? !1 : a,
                    b = b == null ? a : b;
                    return this.map(function() {
                        return d.clone(this, a, b)
                    })
                },
                html: function(a) {
                    if (a === b)
                        return this[0] && this[0].nodeType === 1 ? this[0].innerHTML.replace(R, "") : null;
                    if (typeof a !== "string" || X.test(a) || !d.support.leadingWhitespace && S.test(a) || Z[(U.exec(a) || ["", ""])[1].toLowerCase()])
                        d.isFunction(a) ? this.each(function(b) {
                            var c = d(this);
                            c.html(a.call(this, b, c.html()))
                        }) : this.empty().append(a);
                    else {
                        a = a.replace(T, "<$1></$2>");
                        try {
                            for (var c = 0, e = this.length; c < e; c++)
                                this[c].nodeType === 1 && (d.cleanData(this[c].getElementsByTagName("*")),
                                this[c].innerHTML = a)
                        } catch (f) {
                            this.empty().append(a)
                        }
                    }
                    return this
                },
                replaceWith: function(a) {
                    if (this[0] && this[0].parentNode) {
                        if (d.isFunction(a))
                            return this.each(function(b) {
                                var c = d(this)
                                  , e = c.html();
                                c.replaceWith(a.call(this, b, e))
                            });
                        typeof a !== "string" && (a = d(a).detach());
                        return this.each(function() {
                            var b = this.nextSibling
                              , c = this.parentNode;
                            d(this).remove(),
                            b ? d(b).before(a) : d(c).append(a)
                        })
                    }
                    return this.length ? this.pushStack(d(d.isFunction(a) ? a() : a), "replaceWith", a) : this
                },
                detach: function(a) {
                    return this.remove(a, !0)
                },
                domManip: function(a, c, e) {
                    var f, g, h, i, j = a[0], k = [];
                    if (!d.support.checkClone && arguments.length === 3 && typeof j === "string" && Y.test(j))
                        return this.each(function() {
                            d(this).domManip(a, c, e, !0)
                        });
                    if (d.isFunction(j))
                        return this.each(function(f) {
                            var g = d(this);
                            a[0] = j.call(this, f, c ? g.html() : b),
                            g.domManip(a, c, e)
                        });
                    if (this[0]) {
                        i = j && j.parentNode,
                        d.support.parentNode && i && i.nodeType === 11 && i.childNodes.length === this.length ? f = {
                            fragment: i
                        } : f = d.buildFragment(a, this, k),
                        h = f.fragment,
                        h.childNodes.length === 1 ? g = h = h.firstChild : g = h.firstChild;
                        if (g) {
                            c = c && d.nodeName(g, "tr");
                            for (var l = 0, m = this.length, n = m - 1; l < m; l++)
                                e.call(c ? $(this[l], g) : this[l], f.cacheable || m > 1 && l < n ? d.clone(h, !0, !0) : h)
                        }
                        k.length && d.each(k, bc)
                    }
                    return this
                }
            }),
            d.buildFragment = function(a, b, e) {
                var f, g, h, i = b && b[0] ? b[0].ownerDocument || b[0] : c;
                a.length === 1 && typeof a[0] === "string" && a[0].length < 512 && i === c && a[0].charAt(0) === "<" && !X.test(a[0]) && (d.support.checkClone || !Y.test(a[0])) && (g = !0,
                h = d.fragments[a[0]],
                h && (h !== 1 && (f = h))),
                f || (f = i.createDocumentFragment(),
                d.clean(a, i, f, e)),
                g && (d.fragments[a[0]] = h ? f : 1);
                return {
                    fragment: f,
                    cacheable: g
                }
            }
            ,
            d.fragments = {},
            d.each({
                appendTo: "append",
                prependTo: "prepend",
                insertBefore: "before",
                insertAfter: "after",
                replaceAll: "replaceWith"
            }, function(a, b) {
                d.fn[a] = function(c) {
                    var e = []
                      , f = d(c)
                      , g = this.length === 1 && this[0].parentNode;
                    if (g && g.nodeType === 11 && g.childNodes.length === 1 && f.length === 1) {
                        f[b](this[0]);
                        return this
                    }
                    for (var h = 0, i = f.length; h < i; h++) {
                        var j = (h > 0 ? this.clone(!0) : this).get();
                        d(f[h])[b](j),
                        e = e.concat(j)
                    }
                    return this.pushStack(e, a, f.selector)
                }
            }),
            d.extend({
                clone: function(a, b, c) {
                    var e = a.cloneNode(!0), f, g, h;
                    if ((!d.support.noCloneEvent || !d.support.noCloneChecked) && (a.nodeType === 1 || a.nodeType === 11) && !d.isXMLDoc(a)) {
                        ba(a, e),
                        f = bb(a),
                        g = bb(e);
                        for (h = 0; f[h]; ++h)
                            ba(f[h], g[h])
                    }
                    if (b) {
                        _(a, e);
                        if (c) {
                            f = bb(a),
                            g = bb(e);
                            for (h = 0; f[h]; ++h)
                                _(f[h], g[h])
                        }
                    }
                    return e
                },
                clean: function(a, b, e, f) {
                    b = b || c,
                    typeof b.createElement === "undefined" && (b = b.ownerDocument || b[0] && b[0].ownerDocument || c);
                    var g = [];
                    for (var h = 0, i; (i = a[h]) != null; h++) {
                        typeof i === "number" && (i += "");
                        if (!i)
                            continue;
                        if (typeof i !== "string" || W.test(i)) {
                            if (typeof i === "string") {
                                i = i.replace(T, "<$1></$2>");
                                var j = (U.exec(i) || ["", ""])[1].toLowerCase()
                                  , k = Z[j] || Z._default
                                  , l = k[0]
                                  , m = b.createElement("div");
                                m.innerHTML = k[1] + i + k[2];
                                while (l--)
                                    m = m.lastChild;
                                if (!d.support.tbody) {
                                    var n = V.test(i)
                                      , o = j === "table" && !n ? m.firstChild && m.firstChild.childNodes : k[1] === "<table>" && !n ? m.childNodes : [];
                                    for (var p = o.length - 1; p >= 0; --p)
                                        d.nodeName(o[p], "tbody") && !o[p].childNodes.length && o[p].parentNode.removeChild(o[p])
                                }
                                !d.support.leadingWhitespace && S.test(i) && m.insertBefore(b.createTextNode(S.exec(i)[0]), m.firstChild),
                                i = m.childNodes
                            }
                        } else
                            i = b.createTextNode(i);
                        i.nodeType ? g.push(i) : g = d.merge(g, i)
                    }
                    if (e)
                        for (h = 0; g[h]; h++)
                            !f || !d.nodeName(g[h], "script") || g[h].type && g[h].type.toLowerCase() !== "text/javascript" ? (g[h].nodeType === 1 && g.splice.apply(g, [h + 1, 0].concat(d.makeArray(g[h].getElementsByTagName("script")))),
                            e.appendChild(g[h])) : f.push(g[h].parentNode ? g[h].parentNode.removeChild(g[h]) : g[h]);
                    return g
                },
                cleanData: function(a) {
                    var b, c, e = d.cache, f = d.expando, g = d.event.special, h = d.support.deleteExpando;
                    for (var i = 0, j; (j = a[i]) != null; i++) {
                        if (j.nodeName && d.noData[j.nodeName.toLowerCase()])
                            continue;
                        c = j[d.expando];
                        if (c) {
                            b = e[c] && e[c][f];
                            if (b && b.events) {
                                for (var k in b.events)
                                    g[k] ? d.event.remove(j, k) : d.removeEvent(j, k, b.handle);
                                b.handle && (b.handle.elem = null)
                            }
                            h ? delete j[d.expando] : j.removeAttribute && j.removeAttribute(d.expando),
                            delete e[c]
                        }
                    }
                }
            });
            var bd = /alpha\([^)]*\)/i, be = /opacity=([^)]*)/, bf = /-([a-z])/ig, bg = /([A-Z]|^ms)/g, bh = /^-?\d+(?:px)?$/i, bi = /^-?\d/, bj = {
                position: "absolute",
                visibility: "hidden",
                display: "block"
            }, bk = ["Left", "Right"], bl = ["Top", "Bottom"], bm, bn, bo, bp = function(a, b) {
                return b.toUpperCase()
            };
            d.fn.css = function(a, c) {
                if (arguments.length === 2 && c === b)
                    return this;
                return d.access(this, a, c, !0, function(a, c, e) {
                    return e !== b ? d.style(a, c, e) : d.css(a, c)
                })
            }
            ,
            d.extend({
                cssHooks: {
                    opacity: {
                        get: function(a, b) {
                            if (b) {
                                var c = bm(a, "opacity", "opacity");
                                return c === "" ? "1" : c
                            }
                            return a.style.opacity
                        }
                    }
                },
                cssNumber: {
                    zIndex: !0,
                    fontWeight: !0,
                    opacity: !0,
                    zoom: !0,
                    lineHeight: !0
                },
                cssProps: {
                    "float": d.support.cssFloat ? "cssFloat" : "styleFloat"
                },
                style: function(a, c, e, f) {
                    if (a && a.nodeType !== 3 && a.nodeType !== 8 && a.style) {
                        var g, h = d.camelCase(c), i = a.style, j = d.cssHooks[h];
                        c = d.cssProps[h] || h;
                        if (e === b) {
                            if (j && "get"in j && (g = j.get(a, !1, f)) !== b)
                                return g;
                            return i[c]
                        }
                        if (typeof e === "number" && isNaN(e) || e == null)
                            return;
                        typeof e === "number" && !d.cssNumber[h] && (e += "px");
                        if (!j || !("set"in j) || (e = j.set(a, e)) !== b)
                            try {
                                i[c] = e
                            } catch (k) {}
                    }
                },
                css: function(a, c, e) {
                    var f, g = d.camelCase(c), h = d.cssHooks[g];
                    c = d.cssProps[g] || g;
                    if (h && "get"in h && (f = h.get(a, !0, e)) !== b)
                        return f;
                    if (bm)
                        return bm(a, c, g)
                },
                swap: function(a, b, c) {
                    var d = {};
                    for (var e in b)
                        d[e] = a.style[e],
                        a.style[e] = b[e];
                    c.call(a);
                    for (e in b)
                        a.style[e] = d[e]
                },
                camelCase: function(a) {
                    return a.replace(bf, bp)
                }
            }),
            d.curCSS = d.css,
            d.each(["height", "width"], function(a, b) {
                d.cssHooks[b] = {
                    get: function(a, c, e) {
                        var f;
                        if (c) {
                            a.offsetWidth !== 0 ? f = bq(a, b, e) : d.swap(a, bj, function() {
                                f = bq(a, b, e)
                            });
                            if (f <= 0) {
                                f = bm(a, b, b),
                                f === "0px" && bo && (f = bo(a, b, b));
                                if (f != null)
                                    return f === "" || f === "auto" ? "0px" : f
                            }
                            if (f < 0 || f == null) {
                                f = a.style[b];
                                return f === "" || f === "auto" ? "0px" : f
                            }
                            return typeof f === "string" ? f : f + "px"
                        }
                    },
                    set: function(a, b) {
                        if (!bh.test(b))
                            return b;
                        b = parseFloat(b);
                        if (b >= 0)
                            return b + "px"
                    }
                }
            }),
            d.support.opacity || (d.cssHooks.opacity = {
                get: function(a, b) {
                    return be.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || "") ? parseFloat(RegExp.$1) / 100 + "" : b ? "1" : ""
                },
                set: function(a, b) {
                    var c = a.style;
                    c.zoom = 1;
                    var e = d.isNaN(b) ? "" : "alpha(opacity=" + b * 100 + ")"
                      , f = c.filter || "";
                    c.filter = bd.test(f) ? f.replace(bd, e) : c.filter + " " + e
                }
            }),
            d(function() {
                d.support.reliableMarginRight || (d.cssHooks.marginRight = {
                    get: function(a, b) {
                        var c;
                        d.swap(a, {
                            display: "inline-block"
                        }, function() {
                            b ? c = bm(a, "margin-right", "marginRight") : c = a.style.marginRight
                        });
                        return c
                    }
                })
            }),
            c.defaultView && c.defaultView.getComputedStyle && (bn = function(a, c, e) {
                var f, g, h;
                e = e.replace(bg, "-$1").toLowerCase();
                if (!(g = a.ownerDocument.defaultView))
                    return b;
                if (h = g.getComputedStyle(a, null))
                    f = h.getPropertyValue(e),
                    f === "" && !d.contains(a.ownerDocument.documentElement, a) && (f = d.style(a, e));
                return f
            }
            ),
            c.documentElement.currentStyle && (bo = function(a, b) {
                var c, d = a.currentStyle && a.currentStyle[b], e = a.runtimeStyle && a.runtimeStyle[b], f = a.style;
                !bh.test(d) && bi.test(d) && (c = f.left,
                e && (a.runtimeStyle.left = a.currentStyle.left),
                f.left = b === "fontSize" ? "1em" : d || 0,
                d = f.pixelLeft + "px",
                f.left = c,
                e && (a.runtimeStyle.left = e));
                return d === "" ? "auto" : d
            }
            ),
            bm = bn || bo,
            d.expr && d.expr.filters && (d.expr.filters.hidden = function(a) {
                var b = a.offsetWidth
                  , c = a.offsetHeight;
                return b === 0 && c === 0 || !d.support.reliableHiddenOffsets && (a.style.display || d.css(a, "display")) === "none"
            }
            ,
            d.expr.filters.visible = function(a) {
                return !d.expr.filters.hidden(a)
            }
            );
            var br = /%20/g, bs = /\[\]$/, bt = /\r?\n/g, bu = /#.*$/, bv = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, bw = /^(?:color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i, bx = /^(?:about|app|app\-storage|.+\-extension|file|widget):$/, by = /^(?:GET|HEAD)$/, bz = /^\/\//, bA = /\?/, bB = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, bC = /^(?:select|textarea)/i, bD = /\s+/, bE = /([?&])_=[^&]*/, bF = /(^|\-)([a-z])/g, bG = function(a, b, c) {
                return b + c.toUpperCase()
            }, bH = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/, bI = d.fn.load, bJ = {}, bK = {}, bL, bM;
            try {
                bL = c.location.href
            } catch (bN) {
                bL = c.createElement("a"),
                bL.href = "",
                bL = bL.href
            }
            bM = bH.exec(bL.toLowerCase()) || [],
            d.fn.extend({
                load: function(a, c, e) {
                    if (typeof a !== "string" && bI)
                        return bI.apply(this, arguments);
                    if (!this.length)
                        return this;
                    var f = a.indexOf(" ");
                    if (f >= 0) {
                        var g = a.slice(f, a.length);
                        a = a.slice(0, f)
                    }
                    var h = "GET";
                    c && (d.isFunction(c) ? (e = c,
                    c = b) : typeof c === "object" && (c = d.param(c, d.ajaxSettings.traditional),
                    h = "POST"));
                    var i = this;
                    d.ajax({
                        url: a,
                        type: h,
                        dataType: "html",
                        data: c,
                        complete: function(a, b, c) {
                            c = a.responseText,
                            a.isResolved() && (a.done(function(a) {
                                c = a
                            }),
                            i.html(g ? d("<div>").append(c.replace(bB, "")).find(g) : c)),
                            e && i.each(e, [c, b, a])
                        }
                    });
                    return this
                },
                serialize: function() {
                    return d.param(this.serializeArray())
                },
                serializeArray: function() {
                    return this.map(function() {
                        return this.elements ? d.makeArray(this.elements) : this
                    }).filter(function() {
                        return this.name && !this.disabled && (this.checked || bC.test(this.nodeName) || bw.test(this.type))
                    }).map(function(a, b) {
                        var c = d(this).val();
                        return c == null ? null : d.isArray(c) ? d.map(c, function(a, c) {
                            return {
                                name: b.name,
                                value: a.replace(bt, "\r\n")
                            }
                        }) : {
                            name: b.name,
                            value: c.replace(bt, "\r\n")
                        }
                    }).get()
                }
            }),
            d.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function(a, b) {
                d.fn[b] = function(a) {
                    return this.bind(b, a)
                }
            }),
            d.each(["get", "post"], function(a, c) {
                d[c] = function(a, e, f, g) {
                    d.isFunction(e) && (g = g || f,
                    f = e,
                    e = b);
                    return d.ajax({
                        type: c,
                        url: a,
                        data: e,
                        success: f,
                        dataType: g
                    })
                }
            }),
            d.extend({
                getScript: function(a, c) {
                    return d.get(a, b, c, "script")
                },
                getJSON: function(a, b, c) {
                    return d.get(a, b, c, "json")
                },
                ajaxSetup: function(a, b) {
                    b ? d.extend(!0, a, d.ajaxSettings, b) : (b = a,
                    a = d.extend(!0, d.ajaxSettings, b));
                    for (var c in {
                        context: 1,
                        url: 1
                    })
                        c in b ? a[c] = b[c] : c in d.ajaxSettings && (a[c] = d.ajaxSettings[c]);
                    return a
                },
                ajaxSettings: {
                    url: bL,
                    isLocal: bx.test(bM[1]),
                    global: !0,
                    type: "GET",
                    contentType: "application/x-www-form-urlencoded",
                    processData: !0,
                    async: !0,
                    accepts: {
                        xml: "application/xml, text/xml",
                        html: "text/html",
                        text: "text/plain",
                        json: "application/json, text/javascript",
                        "*": "*/*"
                    },
                    contents: {
                        xml: /xml/,
                        html: /html/,
                        json: /json/
                    },
                    responseFields: {
                        xml: "responseXML",
                        text: "responseText"
                    },
                    converters: {
                        "* text": a.String,
                        "text html": !0,
                        "text json": d.parseJSON,
                        "text xml": d.parseXML
                    }
                },
                ajaxPrefilter: bO(bJ),
                ajaxTransport: bO(bK),
                ajax: function(a, c) {
                    function v(a, c, l, n) {
                        if (r !== 2) {
                            r = 2,
                            p && clearTimeout(p),
                            o = b,
                            m = n || "",
                            u.readyState = a ? 4 : 0;
                            var q, t, v, w = l ? bR(e, u, l) : b, x, y;
                            if (a >= 200 && a < 300 || a === 304) {
                                if (e.ifModified) {
                                    if (x = u.getResponseHeader("Last-Modified"))
                                        d.lastModified[k] = x;
                                    if (y = u.getResponseHeader("Etag"))
                                        d.etag[k] = y
                                }
                                if (a === 304)
                                    c = "notmodified",
                                    q = !0;
                                else
                                    try {
                                        t = bS(e, w),
                                        c = "success",
                                        q = !0
                                    } catch (z) {
                                        c = "parsererror",
                                        v = z
                                    }
                            } else {
                                v = c;
                                if (!c || a)
                                    c = "error",
                                    a < 0 && (a = 0)
                            }
                            u.status = a,
                            u.statusText = c,
                            q ? h.resolveWith(f, [t, c, u]) : h.rejectWith(f, [u, c, v]),
                            u.statusCode(j),
                            j = b,
                            s && g.trigger("ajax" + (q ? "Success" : "Error"), [u, e, q ? t : v]),
                            i.resolveWith(f, [u, c]),
                            s && (g.trigger("ajaxComplete", [u, e]),
                            --d.active || d.event.trigger("ajaxStop"))
                        }
                    }
                    typeof a === "object" && (c = a,
                    a = b),
                    c = c || {};
                    var e = d.ajaxSetup({}, c), f = e.context || e, g = f !== e && (f.nodeType || f instanceof d) ? d(f) : d.event, h = d.Deferred(), i = d._Deferred(), j = e.statusCode || {}, k, l = {}, m, n, o, p, q, r = 0, s, t, u = {
                        readyState: 0,
                        setRequestHeader: function(a, b) {
                            r || (l[a.toLowerCase().replace(bF, bG)] = b);
                            return this
                        },
                        getAllResponseHeaders: function() {
                            return r === 2 ? m : null
                        },
                        getResponseHeader: function(a) {
                            var c;
                            if (r === 2) {
                                if (!n) {
                                    n = {};
                                    while (c = bv.exec(m))
                                        n[c[1].toLowerCase()] = c[2]
                                }
                                c = n[a.toLowerCase()]
                            }
                            return c === b ? null : c
                        },
                        overrideMimeType: function(a) {
                            r || (e.mimeType = a);
                            return this
                        },
                        abort: function(a) {
                            a = a || "abort",
                            o && o.abort(a),
                            v(0, a);
                            return this
                        }
                    };
                    h.promise(u),
                    u.success = u.done,
                    u.error = u.fail,
                    u.complete = i.done,
                    u.statusCode = function(a) {
                        if (a) {
                            var b;
                            if (r < 2)
                                for (b in a)
                                    j[b] = [j[b], a[b]];
                            else
                                b = a[u.status],
                                u.then(b, b)
                        }
                        return this
                    }
                    ,
                    e.url = ((a || e.url) + "").replace(bu, "").replace(bz, bM[1] + "//"),
                    e.dataTypes = d.trim(e.dataType || "*").toLowerCase().split(bD),
                    e.crossDomain == null && (q = bH.exec(e.url.toLowerCase()),
                    e.crossDomain = q && (q[1] != bM[1] || q[2] != bM[2] || (q[3] || (q[1] === "http:" ? 80 : 443)) != (bM[3] || (bM[1] === "http:" ? 80 : 443)))),
                    e.data && e.processData && typeof e.data !== "string" && (e.data = d.param(e.data, e.traditional)),
                    bP(bJ, e, c, u);
                    if (r === 2)
                        return !1;
                    s = e.global,
                    e.type = e.type.toUpperCase(),
                    e.hasContent = !by.test(e.type),
                    s && d.active++ === 0 && d.event.trigger("ajaxStart");
                    if (!e.hasContent) {
                        e.data && (e.url += (bA.test(e.url) ? "&" : "?") + e.data),
                        k = e.url;
                        if (e.cache === !1) {
                            var w = d.now()
                              , x = e.url.replace(bE, "$1_=" + w);
                            e.url = x + (x === e.url ? (bA.test(e.url) ? "&" : "?") + "_=" + w : "")
                        }
                    }
                    if (e.data && e.hasContent && e.contentType !== !1 || c.contentType)
                        l["Content-Type"] = e.contentType;
                    e.ifModified && (k = k || e.url,
                    d.lastModified[k] && (l["If-Modified-Since"] = d.lastModified[k]),
                    d.etag[k] && (l["If-None-Match"] = d.etag[k])),
                    l.Accept = e.dataTypes[0] && e.accepts[e.dataTypes[0]] ? e.accepts[e.dataTypes[0]] + (e.dataTypes[0] !== "*" ? ", */*; q=0.01" : "") : e.accepts["*"];
                    for (t in e.headers)
                        u.setRequestHeader(t, e.headers[t]);
                    if (e.beforeSend && (e.beforeSend.call(f, u, e) === !1 || r === 2)) {
                        u.abort();
                        return !1
                    }
                    for (t in {
                        success: 1,
                        error: 1,
                        complete: 1
                    })
                        u[t](e[t]);
                    o = bP(bK, e, c, u);
                    if (o) {
                        u.readyState = 1,
                        s && g.trigger("ajaxSend", [u, e]),
                        e.async && e.timeout > 0 && (p = setTimeout(function() {
                            u.abort("timeout")
                        }, e.timeout));
                        try {
                            r = 1,
                            o.send(l, v)
                        } catch (y) {
                            status < 2 ? v(-1, y) : d.error(y)
                        }
                    } else
                        v(-1, "No Transport");
                    return u
                },
                param: function(a, c) {
                    var e = []
                      , f = function(a, b) {
                        b = d.isFunction(b) ? b() : b,
                        e[e.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b)
                    };
                    c === b && (c = d.ajaxSettings.traditional);
                    if (d.isArray(a) || a.jquery && !d.isPlainObject(a))
                        d.each(a, function() {
                            f(this.name, this.value)
                        });
                    else
                        for (var g in a)
                            bQ(g, a[g], c, f);
                    return e.join("&").replace(br, "+")
                }
            }),
            d.extend({
                active: 0,
                lastModified: {},
                etag: {}
            });
            var bT = d.now()
              , bU = /(\=)\?(&|$)|\?\?/i;
            d.ajaxSetup({
                jsonp: "callback",
                jsonpCallback: function() {
                    return d.expando + "_" + bT++
                }
            }),
            d.ajaxPrefilter("json jsonp", function(b, c, e) {
                var f = typeof b.data === "string";
                if (b.dataTypes[0] === "jsonp" || c.jsonpCallback || c.jsonp != null || b.jsonp !== !1 && (bU.test(b.url) || f && bU.test(b.data))) {
                    var g, h = b.jsonpCallback = d.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, i = a[h], j = b.url, k = b.data, l = "$1" + h + "$2", m = function() {
                        a[h] = i,
                        g && d.isFunction(i) && a[h](g[0])
                    };
                    b.jsonp !== !1 && (j = j.replace(bU, l),
                    b.url === j && (f && (k = k.replace(bU, l)),
                    b.data === k && (j += (/\?/.test(j) ? "&" : "?") + b.jsonp + "=" + h))),
                    b.url = j,
                    b.data = k,
                    a[h] = function(a) {
                        g = [a]
                    }
                    ,
                    e.then(m, m),
                    b.converters["script json"] = function() {
                        g || d.error(h + " was not called");
                        return g[0]
                    }
                    ,
                    b.dataTypes[0] = "json";
                    return "script"
                }
            }),
            d.ajaxSetup({
                accepts: {
                    script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
                },
                contents: {
                    script: /javascript|ecmascript/
                },
                converters: {
                    "text script": function(a) {
                        d.globalEval(a);
                        return a
                    }
                }
            }),
            d.ajaxPrefilter("script", function(a) {
                a.cache === b && (a.cache = !1),
                a.crossDomain && (a.type = "GET",
                a.global = !1)
            }),
            d.ajaxTransport("script", function(a) {
                if (a.crossDomain) {
                    var d, e = c.head || c.getElementsByTagName("head")[0] || c.documentElement;
                    return {
                        send: function(f, g) {
                            d = c.createElement("script"),
                            d.async = "async",
                            a.scriptCharset && (d.charset = a.scriptCharset),
                            d.src = a.url,
                            d.onload = d.onreadystatechange = function(a, c) {
                                if (!d.readyState || /loaded|complete/.test(d.readyState))
                                    d.onload = d.onreadystatechange = null,
                                    e && d.parentNode && e.removeChild(d),
                                    d = b,
                                    c || g(200, "success")
                            }
                            ,
                            e.insertBefore(d, e.firstChild)
                        },
                        abort: function() {
                            d && d.onload(0, 1)
                        }
                    }
                }
            });
            var bV = d.now(), bW, bX;
            d.ajaxSettings.xhr = a.ActiveXObject ? function() {
                return !this.isLocal && bZ() || b$()
            }
            : bZ,
            bX = d.ajaxSettings.xhr(),
            d.support.ajax = !!bX,
            d.support.cors = bX && "withCredentials"in bX,
            bX = b,
            d.support.ajax && d.ajaxTransport(function(a) {
                if (!a.crossDomain || d.support.cors) {
                    var c;
                    return {
                        send: function(e, f) {
                            var g = a.xhr(), h, i;
                            a.username ? g.open(a.type, a.url, a.async, a.username, a.password) : g.open(a.type, a.url, a.async);
                            if (a.xhrFields)
                                for (i in a.xhrFields)
                                    g[i] = a.xhrFields[i];
                            a.mimeType && g.overrideMimeType && g.overrideMimeType(a.mimeType),
                            !a.crossDomain && !e["X-Requested-With"] && (e["X-Requested-With"] = "XMLHttpRequest");
                            try {
                                for (i in e)
                                    g.setRequestHeader(i, e[i])
                            } catch (j) {}
                            g.send(a.hasContent && a.data || null),
                            c = function(e, i) {
                                var j, k, l, m, n;
                                try {
                                    if (c && (i || g.readyState === 4)) {
                                        c = b,
                                        h && (g.onreadystatechange = d.noop,
                                        delete bW[h]);
                                        if (i)
                                            g.readyState !== 4 && g.abort();
                                        else {
                                            j = g.status,
                                            l = g.getAllResponseHeaders(),
                                            m = {},
                                            n = g.responseXML,
                                            n && n.documentElement && (m.xml = n),
                                            m.text = g.responseText;
                                            try {
                                                k = g.statusText
                                            } catch (o) {
                                                k = ""
                                            }
                                            j || !a.isLocal || a.crossDomain ? j === 1223 && (j = 204) : j = m.text ? 200 : 404
                                        }
                                    }
                                } catch (p) {
                                    i || f(-1, p)
                                }
                                m && f(j, k, m, l)
                            }
                            ,
                            a.async && g.readyState !== 4 ? (bW || (bW = {},
                            bY()),
                            h = bV++,
                            g.onreadystatechange = bW[h] = c) : c()
                        },
                        abort: function() {
                            c && c(0, 1)
                        }
                    }
                }
            });
            var b_ = {}, ca = /^(?:toggle|show|hide)$/, cb = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i, cc, cd = [["height", "marginTop", "marginBottom", "paddingTop", "paddingBottom"], ["width", "marginLeft", "marginRight", "paddingLeft", "paddingRight"], ["opacity"]];
            d.fn.extend({
                show: function(a, b, c) {
                    var e, f;
                    if (a || a === 0)
                        return this.animate(ce("show", 3), a, b, c);
                    for (var g = 0, h = this.length; g < h; g++)
                        e = this[g],
                        f = e.style.display,
                        !d._data(e, "olddisplay") && f === "none" && (f = e.style.display = ""),
                        f === "" && d.css(e, "display") === "none" && d._data(e, "olddisplay", cf(e.nodeName));
                    for (g = 0; g < h; g++) {
                        e = this[g],
                        f = e.style.display;
                        if (f === "" || f === "none")
                            e.style.display = d._data(e, "olddisplay") || ""
                    }
                    return this
                },
                hide: function(a, b, c) {
                    if (a || a === 0)
                        return this.animate(ce("hide", 3), a, b, c);
                    for (var e = 0, f = this.length; e < f; e++) {
                        var g = d.css(this[e], "display");
                        g !== "none" && !d._data(this[e], "olddisplay") && d._data(this[e], "olddisplay", g)
                    }
                    for (e = 0; e < f; e++)
                        this[e].style.display = "none";
                    return this
                },
                _toggle: d.fn.toggle,
                toggle: function(a, b, c) {
                    var e = typeof a === "boolean";
                    d.isFunction(a) && d.isFunction(b) ? this._toggle.apply(this, arguments) : a == null || e ? this.each(function() {
                        var b = e ? a : d(this).is(":hidden");
                        d(this)[b ? "show" : "hide"]()
                    }) : this.animate(ce("toggle", 3), a, b, c);
                    return this
                },
                fadeTo: function(a, b, c, d) {
                    return this.filter(":hidden").css("opacity", 0).show().end().animate({
                        opacity: b
                    }, a, c, d)
                },
                animate: function(a, b, c, e) {
                    var f = d.speed(b, c, e);
                    if (d.isEmptyObject(a))
                        return this.each(f.complete);
                    return this[f.queue === !1 ? "each" : "queue"](function() {
                        var b = d.extend({}, f), c, e = this.nodeType === 1, g = e && d(this).is(":hidden"), h = this;
                        for (c in a) {
                            var i = d.camelCase(c);
                            c !== i && (a[i] = a[c],
                            delete a[c],
                            c = i);
                            if (a[c] === "hide" && g || a[c] === "show" && !g)
                                return b.complete.call(this);
                            if (e && (c === "height" || c === "width")) {
                                b.overflow = [this.style.overflow, this.style.overflowX, this.style.overflowY];
                                if (d.css(this, "display") === "inline" && d.css(this, "float") === "none")
                                    if (d.support.inlineBlockNeedsLayout) {
                                        var j = cf(this.nodeName);
                                        j === "inline" ? this.style.display = "inline-block" : (this.style.display = "inline",
                                        this.style.zoom = 1)
                                    } else
                                        this.style.display = "inline-block"
                            }
                            d.isArray(a[c]) && ((b.specialEasing = b.specialEasing || {})[c] = a[c][1],
                            a[c] = a[c][0])
                        }
                        b.overflow != null && (this.style.overflow = "hidden"),
                        b.curAnim = d.extend({}, a),
                        d.each(a, function(c, e) {
                            var f = new d.fx(h,b,c);
                            if (ca.test(e))
                                f[e === "toggle" ? g ? "show" : "hide" : e](a);
                            else {
                                var i = cb.exec(e)
                                  , j = f.cur();
                                if (i) {
                                    var k = parseFloat(i[2])
                                      , l = i[3] || (d.cssNumber[c] ? "" : "px");
                                    l !== "px" && (d.style(h, c, (k || 1) + l),
                                    j = (k || 1) / f.cur() * j,
                                    d.style(h, c, j + l)),
                                    i[1] && (k = (i[1] === "-=" ? -1 : 1) * k + j),
                                    f.custom(j, k, l)
                                } else
                                    f.custom(j, e, "")
                            }
                        });
                        return !0
                    })
                },
                stop: function(a, b) {
                    var c = d.timers;
                    a && this.queue([]),
                    this.each(function() {
                        for (var a = c.length - 1; a >= 0; a--)
                            c[a].elem === this && (b && c[a](!0),
                            c.splice(a, 1))
                    }),
                    b || this.dequeue();
                    return this
                }
            }),
            d.each({
                slideDown: ce("show", 1),
                slideUp: ce("hide", 1),
                slideToggle: ce("toggle", 1),
                fadeIn: {
                    opacity: "show"
                },
                fadeOut: {
                    opacity: "hide"
                },
                fadeToggle: {
                    opacity: "toggle"
                }
            }, function(a, b) {
                d.fn[a] = function(a, c, d) {
                    return this.animate(b, a, c, d)
                }
            }),
            d.extend({
                speed: function(a, b, c) {
                    var e = a && typeof a === "object" ? d.extend({}, a) : {
                        complete: c || !c && b || d.isFunction(a) && a,
                        duration: a,
                        easing: c && b || b && !d.isFunction(b) && b
                    };
                    e.duration = d.fx.off ? 0 : typeof e.duration === "number" ? e.duration : e.duration in d.fx.speeds ? d.fx.speeds[e.duration] : d.fx.speeds._default,
                    e.old = e.complete,
                    e.complete = function() {
                        e.queue !== !1 && d(this).dequeue(),
                        d.isFunction(e.old) && e.old.call(this)
                    }
                    ;
                    return e
                },
                easing: {
                    linear: function(a, b, c, d) {
                        return c + d * a
                    },
                    swing: function(a, b, c, d) {
                        return (-Math.cos(a * Math.PI) / 2 + .5) * d + c
                    }
                },
                timers: [],
                fx: function(a, b, c) {
                    this.options = b,
                    this.elem = a,
                    this.prop = c,
                    b.orig || (b.orig = {})
                }
            }),
            d.fx.prototype = {
                update: function() {
                    this.options.step && this.options.step.call(this.elem, this.now, this),
                    (d.fx.step[this.prop] || d.fx.step._default)(this)
                },
                cur: function() {
                    if (this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null))
                        return this.elem[this.prop];
                    var a, b = d.css(this.elem, this.prop);
                    return isNaN(a = parseFloat(b)) ? !b || b === "auto" ? 0 : b : a
                },
                custom: function(a, b, c) {
                    function g(a) {
                        return e.step(a)
                    }
                    var e = this
                      , f = d.fx;
                    this.startTime = d.now(),
                    this.start = a,
                    this.end = b,
                    this.unit = c || this.unit || (d.cssNumber[this.prop] ? "" : "px"),
                    this.now = this.start,
                    this.pos = this.state = 0,
                    g.elem = this.elem,
                    g() && d.timers.push(g) && !cc && (cc = setInterval(f.tick, f.interval))
                },
                show: function() {
                    this.options.orig[this.prop] = d.style(this.elem, this.prop),
                    this.options.show = !0,
                    this.custom(this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur()),
                    d(this.elem).show()
                },
                hide: function() {
                    this.options.orig[this.prop] = d.style(this.elem, this.prop),
                    this.options.hide = !0,
                    this.custom(this.cur(), 0)
                },
                step: function(a) {
                    var b = d.now()
                      , c = !0;
                    if (a || b >= this.options.duration + this.startTime) {
                        this.now = this.end,
                        this.pos = this.state = 1,
                        this.update(),
                        this.options.curAnim[this.prop] = !0;
                        for (var e in this.options.curAnim)
                            this.options.curAnim[e] !== !0 && (c = !1);
                        if (c) {
                            if (this.options.overflow != null && !d.support.shrinkWrapBlocks) {
                                var f = this.elem
                                  , g = this.options;
                                d.each(["", "X", "Y"], function(a, b) {
                                    f.style["overflow" + b] = g.overflow[a]
                                })
                            }
                            this.options.hide && d(this.elem).hide();
                            if (this.options.hide || this.options.show)
                                for (var h in this.options.curAnim)
                                    d.style(this.elem, h, this.options.orig[h]);
                            this.options.complete.call(this.elem)
                        }
                        return !1
                    }
                    var i = b - this.startTime;
                    this.state = i / this.options.duration;
                    var j = this.options.specialEasing && this.options.specialEasing[this.prop]
                      , k = this.options.easing || (d.easing.swing ? "swing" : "linear");
                    this.pos = d.easing[j || k](this.state, i, 0, 1, this.options.duration),
                    this.now = this.start + (this.end - this.start) * this.pos,
                    this.update();
                    return !0
                }
            },
            d.extend(d.fx, {
                tick: function() {
                    var a = d.timers;
                    for (var b = 0; b < a.length; b++)
                        a[b]() || a.splice(b--, 1);
                    a.length || d.fx.stop()
                },
                interval: 13,
                stop: function() {
                    clearInterval(cc),
                    cc = null
                },
                speeds: {
                    slow: 600,
                    fast: 200,
                    _default: 400
                },
                step: {
                    opacity: function(a) {
                        d.style(a.elem, "opacity", a.now)
                    },
                    _default: function(a) {
                        a.elem.style && a.elem.style[a.prop] != null ? a.elem.style[a.prop] = (a.prop === "width" || a.prop === "height" ? Math.max(0, a.now) : a.now) + a.unit : a.elem[a.prop] = a.now
                    }
                }
            }),
            d.expr && d.expr.filters && (d.expr.filters.animated = function(a) {
                return d.grep(d.timers, function(b) {
                    return a === b.elem
                }).length
            }
            );
            var cg = /^t(?:able|d|h)$/i
              , ch = /^(?:body|html)$/i;
            "getBoundingClientRect"in c.documentElement ? d.fn.offset = function(a) {
                var b = this[0], c;
                if (a)
                    return this.each(function(b) {
                        d.offset.setOffset(this, a, b)
                    });
                if (!b || !b.ownerDocument)
                    return null;
                if (b === b.ownerDocument.body)
                    return d.offset.bodyOffset(b);
                try {
                    c = b.getBoundingClientRect()
                } catch (e) {}
                var f = b.ownerDocument
                  , g = f.documentElement;
                if (!c || !d.contains(g, b))
                    return c ? {
                        top: c.top,
                        left: c.left
                    } : {
                        top: 0,
                        left: 0
                    };
                var h = f.body
                  , i = ci(f)
                  , j = g.clientTop || h.clientTop || 0
                  , k = g.clientLeft || h.clientLeft || 0
                  , l = i.pageYOffset || d.support.boxModel && g.scrollTop || h.scrollTop
                  , m = i.pageXOffset || d.support.boxModel && g.scrollLeft || h.scrollLeft
                  , n = c.top + l - j
                  , o = c.left + m - k;
                return {
                    top: n,
                    left: o
                }
            }
            : d.fn.offset = function(a) {
                var b = this[0];
                if (a)
                    return this.each(function(b) {
                        d.offset.setOffset(this, a, b)
                    });
                if (!b || !b.ownerDocument)
                    return null;
                if (b === b.ownerDocument.body)
                    return d.offset.bodyOffset(b);
                d.offset.initialize();
                var c, e = b.offsetParent, f = b, g = b.ownerDocument, h = g.documentElement, i = g.body, j = g.defaultView, k = j ? j.getComputedStyle(b, null) : b.currentStyle, l = b.offsetTop, m = b.offsetLeft;
                while ((b = b.parentNode) && b !== i && b !== h) {
                    if (d.offset.supportsFixedPosition && k.position === "fixed")
                        break;
                    c = j ? j.getComputedStyle(b, null) : b.currentStyle,
                    l -= b.scrollTop,
                    m -= b.scrollLeft,
                    b === e && (l += b.offsetTop,
                    m += b.offsetLeft,
                    d.offset.doesNotAddBorder && (!d.offset.doesAddBorderForTableAndCells || !cg.test(b.nodeName)) && (l += parseFloat(c.borderTopWidth) || 0,
                    m += parseFloat(c.borderLeftWidth) || 0),
                    f = e,
                    e = b.offsetParent),
                    d.offset.subtractsBorderForOverflowNotVisible && c.overflow !== "visible" && (l += parseFloat(c.borderTopWidth) || 0,
                    m += parseFloat(c.borderLeftWidth) || 0),
                    k = c
                }
                if (k.position === "relative" || k.position === "static")
                    l += i.offsetTop,
                    m += i.offsetLeft;
                d.offset.supportsFixedPosition && k.position === "fixed" && (l += Math.max(h.scrollTop, i.scrollTop),
                m += Math.max(h.scrollLeft, i.scrollLeft));
                return {
                    top: l,
                    left: m
                }
            }
            ,
            d.offset = {
                initialize: function() {
                    var a = c.body, b = c.createElement("div"), e, f, g, h, i = parseFloat(d.css(a, "marginTop")) || 0, j = "<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";
                    d.extend(b.style, {
                        position: "absolute",
                        top: 0,
                        left: 0,
                        margin: 0,
                        border: 0,
                        width: "1px",
                        height: "1px",
                        visibility: "hidden"
                    }),
                    b.innerHTML = j,
                    a.insertBefore(b, a.firstChild),
                    e = b.firstChild,
                    f = e.firstChild,
                    h = e.nextSibling.firstChild.firstChild,
                    this.doesNotAddBorder = f.offsetTop !== 5,
                    this.doesAddBorderForTableAndCells = h.offsetTop === 5,
                    f.style.position = "fixed",
                    f.style.top = "20px",
                    this.supportsFixedPosition = f.offsetTop === 20 || f.offsetTop === 15,
                    f.style.position = f.style.top = "",
                    e.style.overflow = "hidden",
                    e.style.position = "relative",
                    this.subtractsBorderForOverflowNotVisible = f.offsetTop === -5,
                    this.doesNotIncludeMarginInBodyOffset = a.offsetTop !== i,
                    a.removeChild(b),
                    d.offset.initialize = d.noop
                },
                bodyOffset: function(a) {
                    var b = a.offsetTop
                      , c = a.offsetLeft;
                    d.offset.initialize(),
                    d.offset.doesNotIncludeMarginInBodyOffset && (b += parseFloat(d.css(a, "marginTop")) || 0,
                    c += parseFloat(d.css(a, "marginLeft")) || 0);
                    return {
                        top: b,
                        left: c
                    }
                },
                setOffset: function(a, b, c) {
                    var e = d.css(a, "position");
                    e === "static" && (a.style.position = "relative");
                    var f = d(a), g = f.offset(), h = d.css(a, "top"), i = d.css(a, "left"), j = (e === "absolute" || e === "fixed") && d.inArray("auto", [h, i]) > -1, k = {}, l = {}, m, n;
                    j && (l = f.position()),
                    m = j ? l.top : parseInt(h, 10) || 0,
                    n = j ? l.left : parseInt(i, 10) || 0,
                    d.isFunction(b) && (b = b.call(a, c, g)),
                    b.top != null && (k.top = b.top - g.top + m),
                    b.left != null && (k.left = b.left - g.left + n),
                    "using"in b ? b.using.call(a, k) : f.css(k)
                }
            },
            d.fn.extend({
                position: function() {
                    if (!this[0])
                        return null;
                    var a = this[0]
                      , b = this.offsetParent()
                      , c = this.offset()
                      , e = ch.test(b[0].nodeName) ? {
                        top: 0,
                        left: 0
                    } : b.offset();
                    c.top -= parseFloat(d.css(a, "marginTop")) || 0,
                    c.left -= parseFloat(d.css(a, "marginLeft")) || 0,
                    e.top += parseFloat(d.css(b[0], "borderTopWidth")) || 0,
                    e.left += parseFloat(d.css(b[0], "borderLeftWidth")) || 0;
                    return {
                        top: c.top - e.top,
                        left: c.left - e.left
                    }
                },
                offsetParent: function() {
                    return this.map(function() {
                        var a = this.offsetParent || c.body;
                        while (a && (!ch.test(a.nodeName) && d.css(a, "position") === "static"))
                            a = a.offsetParent;
                        return a
                    })
                }
            }),
            d.each(["Left", "Top"], function(a, c) {
                var e = "scroll" + c;
                d.fn[e] = function(c) {
                    var f = this[0], g;
                    if (!f)
                        return null;
                    if (c !== b)
                        return this.each(function() {
                            g = ci(this),
                            g ? g.scrollTo(a ? d(g).scrollLeft() : c, a ? c : d(g).scrollTop()) : this[e] = c
                        });
                    g = ci(f);
                    return g ? "pageXOffset"in g ? g[a ? "pageYOffset" : "pageXOffset"] : d.support.boxModel && g.document.documentElement[e] || g.document.body[e] : f[e]
                }
            }),
            d.each(["Height", "Width"], function(a, c) {
                var e = c.toLowerCase();
                d.fn["inner" + c] = function() {
                    return this[0] ? parseFloat(d.css(this[0], e, "padding")) : null
                }
                ,
                d.fn["outer" + c] = function(a) {
                    return this[0] ? parseFloat(d.css(this[0], e, a ? "margin" : "border")) : null
                }
                ,
                d.fn[e] = function(a) {
                    var f = this[0];
                    if (!f)
                        return a == null ? null : this;
                    if (d.isFunction(a))
                        return this.each(function(b) {
                            var c = d(this);
                            c[e](a.call(this, b, c[e]()))
                        });
                    if (d.isWindow(f)) {
                        var g = f.document.documentElement["client" + c];
                        return f.document.compatMode === "CSS1Compat" && g || f.document.body["client" + c] || g
                    }
                    if (f.nodeType === 9)
                        return Math.max(f.documentElement["client" + c], f.body["scroll" + c], f.documentElement["scroll" + c], f.body["offset" + c], f.documentElement["offset" + c]);
                    if (a === b) {
                        var h = d.css(f, e)
                          , i = parseFloat(h);
                        return d.isNaN(i) ? h : i
                    }
                    return this.css(e, typeof a === "string" ? a : a + "px")
                }
            }),
            a.jQuery = d
        }
        )(window);
        vwoe_$ = vwo_$ = jQuery;
    }
    )();
} catch (e) {
    VWOInjected.errorReport(e, printStackTrace(), 'to_inject_head:4');
}

function change_URL(href) {
    try {
        if (typeof (href) == "undefined" || typeof (href) == "object")
            return;

        if (isEditorProxyUrl(href))
            return href;

        var this_url = parseUri(vwo_document_real_url);

        var slash_stripped;

        var href_parsed;

        var href_encoded;

        var Base64Encode;

        if (!href)
            return href;

        if (href.charAt(0) == "#")
            //anchor
            return href;
        else if (href.charAt(0) == "/") //URL pointing to root
        {
            href = this_url.protocol + "://" + this_url.host + href;

        } else if (href.indexOf("://") > -1) //URL pointing to root
        {

            href = href;
        } else {
            if (typeof vwoe_$('base').attr("href") == "string") {
                var str = vwoe_$('base').attr("href");
                if (str.charAt(str.length - 1) != "/") {
                    str += "/";
                }
                return str + href;
            }
            href = this_url.protocol + "://" + this_url.host + this_url.directory + href;

        }

        slash_stripped = false;
        if (href.charAt(href.length - 1) == "/") {
            href = href.substr(0, href.length - 1);
            slash_stripped = true;
        }

        href_parsed = parseUri(href);

        Base64Encode = window.btoa || window.Base64.encode;

        href_encoded = Base64Encode(href_parsed.protocol + "://" + href_parsed.host) + (href_parsed.path ? href_parsed.path : '') + (href_parsed.query ? "?" + href_parsed.query : "") + (href_parsed.anchor ? "#" + href_parsed.anchor : "");

        if (slash_stripped || href_parsed.path == "")
            href_encoded += "/";

        return "/editorProxy/" + href_encoded;
    } catch (e) {
        VWOInjected.errorReport(e, printStackTrace(), 'to_inject_head::change_URL', arguments);
    }
}

function change_all_urls_to_relative() {
    try {
        var href, action;
        vwoe_$("a").each(function() {
            href = vwoe_$(this).attr("href");
            if (typeof href == "string" && href.indexOf('javascript:') == -1 && (typeof vwoe_$('base').attr("href") == "undefined" || (typeof vwoe_$('base').attr("href") == "string" && (href.indexOf('http') == 0 || href.indexOf('/') == 0)))) {
                if (!vwoe_$(this).attr("origurl")) {
                    vwoe_$(this).attr("origurl", href);
                }
                vwoe_$(this).get(0).setAttribute("href", change_URL(href));
            }
        });

        vwoe_$("form").each(function() {
            action = vwoe_$(this).attr("action");
            if (typeof action == "string" && (typeof vwoe_$('base').attr("href") == "undefined" || (typeof vwoe_$('base').attr("href") == "string" && (action.indexOf('http') == 0 || action.indexOf('/') == 0)))) {
                if (!vwoe_$(this).attr("origurl")) {
                    vwoe_$(this).attr("origurl", action);
                }
                vwoe_$(this).get(0).setAttribute("action", change_URL(action));
            }
        });
    } catch (e) {
        VWOInjected.errorReport(e, printStackTrace(), 'to_inject_head::change_all_urls_to_relative', arguments);
    }
}

function change_all_urls_to_original() {
    try {
        var orig;
        vwoe_$("a").each(function() {
            orig = vwoe_$(this).attr("origurl");
            if (orig) {
                vwoe_$(this).removeAttr('origurl').get(0).setAttribute("href", orig);
            }
        });

        vwoe_$("form").each(function() {
            orig = vwoe_$(this).attr("origurl");
            if (orig) {
                vwoe_$(this).removeAttr('origurl').get(0).setAttribute("action", orig);
            }
        });
    } catch (e) {
        VWOInjected.errorReport(e, printStackTrace(), 'to_inject_head::change_all_urls_to_original', arguments);
    }
}

/*
Sets video iframe URLs with wmode=transparent[&vwo_prev_wmode=x]
where optional part is set if wmode was already present in query params
and x = previous wmode value
*/
function fix_video_wmode(mode) {/*$iframes = vwoe_$('iframe');
	for(var i = $iframes.length; i--;) {
		var $iframe = vwoe_$($iframes[i]);
		var src = $iframe.attr('src');
		if(/https?:\/\/.*youtube.com\/embed/.test(src)) {
			// if wmode param already present, then change, else append
			var match = src.match(/\?.*wmode=(.*?)&/);
			// continue if its already transparent
			if(match && match[1] && match[1] == 'transparent')
				continue;
			if(match && match[1]]){
				$iframe.attr('src', src.replace(match[1], mode + '&vwo_prev_wmode=' + match[1]));

			}
			else if (src.indexOf('?') != -1)
				$iframe.attr('src', src + '&wmode=' + mode);
			else
				$iframe.attr('src', src + '?wmode=' + mode);
		}
	}*/
}
;define("jquery", (function(global) {
    return function() {
        var ret, fn;
        return ret || global.vwoe_$;
    }
    ;
}(this)));

define('jQuery-1-6-4', ['jquery'], function($) {
    return $;
});
/**
 * Functionality to bind keyboard shortcuts
 *
 * Supported keys - any combination of ctrl, alt, shift, cmd and alphanumeric characters
 *
 * Examples -
 * - keyboardShortcuts.addKeyBinding('ctrl+a', function() {}, context)
 * - keyboardShortcuts.addKeyBinding('alt+shift+e', function() {}, context)
 * - keyboardShortcuts.addKeyBinding(['alt+shift+e', 'cmd+shift+e'], function() {}, context)
 *
 */
define('designer/KeyboardShortcuts', [], function() {
    var KeyboardShortcuts = function() {

        this.keyBindings = [];

        this.initialize = function() {
            var self = this;
            document.onkeydown = function(e) {
                for (var i = 0; i < self.keyBindings.length; i++) {
                    var keyBinding = self.keyBindings[i];
                    if (keyBinding.key === String.fromCharCode(e.which).toLowerCase() && e.ctrlKey === !!keyBinding.ctrlKey && e.shiftKey === !!keyBinding.shiftKey && e.altKey === !!keyBinding.altKey && e.metaKey === !!keyBinding.metaKey) {
                        //Execute the associated callback
                        keyBinding.callback.apply(keyBinding.context);

                        //Prevent the default behavior if defined at the time of adding a key binding
                        if (keyBinding.preventDefaultBehavior) {
                            e.preventDefault();
                        }
                    }
                }
            }
        }
        ;

        /**
		* Add a new key binding
		* @param keyBindingString - combination of keys to be mapped - Array or string, individual keys should be separated by +
		* @param callback - callback function to be executed when the given combination of keys is pressed
		* @param preventDefaultBehavior - whether to prevent the default behavior of the keyboard action
		* @param context - context to be used while executing the callback function (optional)
		*/
        this.addKeyBinding = function(keyBindingString, callback, preventDefaultBehavior, context) {
            if (keyBindingString) {
                //If keyString is an array, run this function for all the elements in the array
                if (Array.isArray(keyBindingString)) {
                    for (var i = 0; i < keyBindingString.length; i++) {
                        this.addKeyBinding(keyBindingString[i], callback, preventDefaultBehavior, context);
                    }
                } else {
                    var tokens = keyBindingString.split('+');
                    var keyBinding = {};
                    for (var i = 0; i < tokens.length; i++) {
                        if (tokens[i].toLowerCase() === 'ctrl') {
                            keyBinding.ctrlKey = true;
                        } else if (tokens[i].toLowerCase() === 'shift') {
                            keyBinding.shiftKey = true;
                        } else if (tokens[i].toLowerCase() === 'alt') {
                            keyBinding.altKey = true;
                        } else if (tokens[i].toLowerCase() === 'cmd') {
                            keyBinding.metaKey = true;
                        } else if (tokens[i].length === 1) {
                            keyBinding.key = tokens[i].toLowerCase();
                        } else {
                            return;
                        }
                    }

                    keyBinding.preventDefaultBehavior = preventDefaultBehavior;

                    //Callback is mandatory
                    if (callback) {
                        keyBinding.callback = callback;
                    } else {
                        return;
                    }

                    keyBinding.context = context;
                    this.keyBindings.push(keyBinding);
                }
            }
        }
        ;

        this.initialize();
    };

    //Ensuring that there is only one instance on the window
    /* eslint camelcase: "off" */
    window._vwo_keyboardShortcuts = window._vwo_keyboardShortcuts || new KeyboardShortcuts();
    return window._vwo_keyboardShortcuts;
});

define('designer/KeyboardShortcutsManager', ['designer/FrameContext', 'jQuery-1-6-4', 'designer/KeyboardShortcuts'], function(frameContext, $, keyboardShortcuts) {
    'use strict';

    var KEYBOARD_SHORTCUT_KEYS = {
        OPEN_CODE_EDITOR: ['cmd+shift+2', 'ctrl+shift+2'],
        SAVE_CHANGES_IN_EDITOR: ['cmd+s', 'ctrl+s']
    };

    var keyboardShortcutsManager = {
        parentFrame: {
            addKeyboardShortcuts: function() {
                if (!window._vwo_disableKeyboardShortcuts) {
                    //Add the keyboard shortcut to open code editor
                    keyboardShortcuts.addKeyBinding(KEYBOARD_SHORTCUT_KEYS.OPEN_CODE_EDITOR, function() {
                        frameContext.services.topFrameManager.showCodeEditor();
                    });

                    //Add the keyboard shortcut to save unsaved changes. Prevent the default behavior as well.
                    keyboardShortcuts.addKeyBinding(KEYBOARD_SHORTCUT_KEYS.SAVE_CHANGES_IN_EDITOR, function() {
                        frameContext.services.topFrameManager.saveEditorChanges();
                    }, true);
                }
            }
        },
        topWindowFrame: {
            addKeyboardShortcuts: function() {
                //Add the keyboard shortcut to open code editor
                keyboardShortcuts.addKeyBinding(KEYBOARD_SHORTCUT_KEYS.OPEN_CODE_EDITOR, function() {
                    $('#vwo-js-global-code').click();
                });

                //Add the keyboard shortcut to save unsaved changes. Prevent the default behavior as well
                keyboardShortcuts.addKeyBinding(KEYBOARD_SHORTCUT_KEYS.SAVE_CHANGES_IN_EDITOR, function() {
                    topFrameInjected.frameContext.services.topFrameManager.parentFrame.saveEditorChanges();
                }, true);
            }
        },
        childFrame: {
            addKeyboardShortcuts: function() {
                if (!window._vwo_disableKeyboardShortcuts) {
                    if (window.vwoLoadingMode === 'mobile') {
                        this.topWindowFrame.addKeyboardShortcuts();
                    } else {
                        //Add the keyboard shortcut to open code editor
                        keyboardShortcuts.addKeyBinding(KEYBOARD_SHORTCUT_KEYS.OPEN_CODE_EDITOR, function() {
                            $('#vwo-js-global-code').click();
                        });

                        //Add the keyboard shortcut to save unsaved changes. Prevent the default behavior as well.
                        keyboardShortcuts.addKeyBinding(KEYBOARD_SHORTCUT_KEYS.SAVE_CHANGES_IN_EDITOR, function() {
                            VWOInjected.frameContext.services.topFrameManager.parentFrame.saveEditorChanges();
                        }, true);
                    }
                }
            }
        }
    };

    keyboardShortcutsManager = frameContext.registerService('keyboardShortcutsManager', keyboardShortcutsManager);
    return keyboardShortcutsManager;
});

define('designer/ElementManager', ['designer/FrameContext', 'designer/ElementMetadata', 'designer/VWOElement', 'jQuery-1-6-4', 'designer/KeyboardShortcutsManager'], function(frameContext, ElementMetadata, VWOElement, $) {
    'use strict';

    /* eslint camelcase: "off" */
    var vwoe_$ = frameContext.isParentFrame() && window.vwoe_$;

    var elementManager = {
        parentFrame: {

            pointerEventsAllowed: {
                applied: false
            },

            initialize: function() {
                // add event listener to reset the editor on clicking outside anywhere on the screen except editor elements
                document.body.removeEventListener('mousedown', this.onMouseDown, true);
                document.body.addEventListener('mousedown', this.onMouseDown, true);

                this.onMouseMove = this.onMouseMove.bind(this);

                //Add keyboard shortcuts
                frameContext.services.keyboardShortcutsManager.addKeyboardShortcuts();
            },

            onMouseDown: function(e) {
                if (e.target.tagName.toLowerCase() === 'body' && !VWOEditor.selecting) {
                    VWOEditor.resetEditor();
                    elementManager.childFrame.resetEditor();
                }
            },

            updateContextualBoxCoordinates: function(contextualBoxCoordinates) {
                this.pointerEventsAllowed.contextualBoxCoordinates = contextualBoxCoordinates;
                this.childFrame.updateContextualBoxCoordinates(contextualBoxCoordinates);
            },

            allowPointerEvents: function(boundingCoordinates, contextualBoxCoordinates) {
                this.pointerEventsAllowed.x1 = boundingCoordinates.x1 + (VWOEditor.isMobile ? VWOEditor.mobileFrame.offset.left : 0);
                this.pointerEventsAllowed.x2 = boundingCoordinates.x2 + (VWOEditor.isMobile ? VWOEditor.mobileFrame.offset.left : 0);
                this.pointerEventsAllowed.y1 = boundingCoordinates.y1 + (VWOEditor.isMobile ? VWOEditor.mobileFrame.offset.top : 0);
                this.pointerEventsAllowed.y2 = boundingCoordinates.y2 + (VWOEditor.isMobile ? VWOEditor.mobileFrame.offset.top : 0);

                this.pointerEventsAllowed.contextualBoxCoordinates = contextualBoxCoordinates;

                document.body.removeEventListener('mousemove', this.onMouseMove, true);
                document.body.addEventListener('mousemove', this.onMouseMove, true);
            },

            onMouseMove: function(e) {
                if (!this.pointerEventsAllowed.applied && e.pageX >= this.pointerEventsAllowed.x1 && e.pageX <= this.pointerEventsAllowed.x2 && e.pageY >= this.pointerEventsAllowed.y1 && e.pageY <= this.pointerEventsAllowed.y2) {

                    //Check if the mouse is not moving inside contextual box coordinates
                    if (!this.pointerEventsAllowed.contextualBoxCoordinates || (e.pageX < this.pointerEventsAllowed.contextualBoxCoordinates.left || e.pageX > this.pointerEventsAllowed.contextualBoxCoordinates.right || e.pageY < this.pointerEventsAllowed.contextualBoxCoordinates.top || e.pageY > this.pointerEventsAllowed.contextualBoxCoordinates.bottom)) {

                        //Check if the mouse is not moving on the menubar
                        if (e.clientY < window.innerHeight - 60) {
                            this.pointerEventsAllowed.applied = true;

                            //Remove the offset added when the data is shared with the child element
                            if (VWOEditor.isMobile) {
                                this.pointerEventsAllowed.x1 -= VWOEditor.mobileFrame.offset.left;
                                this.pointerEventsAllowed.x2 -= VWOEditor.mobileFrame.offset.left;
                                this.pointerEventsAllowed.y1 -= VWOEditor.mobileFrame.offset.top;
                                this.pointerEventsAllowed.y2 -= VWOEditor.mobileFrame.offset.top;
                            }
                            this.childFrame.allowPointerEventsThroughFrame(this.pointerEventsAllowed);
                        }
                    }

                }
            },

            resetPointerEventsAllowed: function() {
                this.pointerEventsAllowed.applied = false;

                if (VWOEditor.isMobile) {
                    this.pointerEventsAllowed.x1 += VWOEditor.mobileFrame.offset.left;
                    this.pointerEventsAllowed.x2 += VWOEditor.mobileFrame.offset.left;
                    this.pointerEventsAllowed.y1 += VWOEditor.mobileFrame.offset.top;
                    this.pointerEventsAllowed.y2 += VWOEditor.mobileFrame.offset.top;
                }

                //this.pointerEventsAllowed.contextualBoxCoordinates = null;
            },

            /**
			 * Resumes the selectElement work that the child frame started.
			 *
			 * @param  {ElementMetadata} metadata               The metadata of the element childFrame sent.
			 * @param  {Boolean}         shouldTriggerRearrange Whether rearrange op should be triggered.
			 */
            selectElement: function(metadata, shouldTriggerRearrange) {
                var self = this;

                //Hide the settings box if open
                hideSettingsBox();

                if (VWOEditor.isMobileApp) {
                    //Disable pointer command so that while making changes on an element, other elements are not highlighted.
                    VWOEditor.mobileApp.toggleAllowPointerCommand(false);
                }
                VWOEditor.findElement(vwoe_$(metadata.selectorPath)).then(function(el) {
                    self.updateElement(el, metadata, shouldTriggerRearrange);
                });
            },

            // Sets the mouse position used for gravitize
            setMousePosition: function(position) {
                VWOEditor.x = position.x;
                VWOEditor.y = position.y;
            },

            // Adjusts the contextual box
            gravitize: function() {
                if (VWOEditor.el) {
                    $('#vwo-contextual-box').gravitize($('body'), VWOEditor.el.jq, VWOEditor.x, VWOEditor.y);
                }
            },

            isSelecting: function() {
                return VWOEditor.selecting;
            },

            setIsSelecting: function(value) {
                VWOEditor.selecting = value;
                this.childFrame.setIsSelecting(value);
            },

            setFrameState: function(isEditorFrameCollapsed) {
                VWOEditor.angularScope.isEditorFrameCollapsed = isEditorFrameCollapsed;
                VWOEditor.angularScope.$digest();
            },

            /**
			 * Updates the given VWOElement instance with the metadata provided.
			 *
			 * @param  {VWOElement}      el                     The existing VWOElement instance to update
			 * @param  {ElementMetadata} metadata               Metadata of the selected element.
			 * @param  {Boolean}         shouldTriggerRearrange Whether rearrange op should be triggered.
			 */
            updateElement: function(el, metadata, shouldTriggerRearrange) {
                var self = VWOEditor;
                var u;
                // undefined

                if (VWOEditor.type === 'design' && this.isSelecting() && metadata.selectorPath) {
                    // if this element is not already being edited in any of the variations
                    if (!el || metadata.selectorPath === 'HEAD') {
                        el = new VWOElement(metadata.selectorPath,u,u,metadata.tagName,metadata.editGroupClass,metadata.parentTagName,metadata.shortSelectorPath,metadata.id);
                    } else {
                        el = el.copy(metadata.parentTagName, metadata.shortSelectorPath, metadata.id);
                        el.jq = vwoe_$('.' + el.elClass);
                        // in mvt if the current variation is not the variation of this element, create copy and empty changes
                        if (el.variation !== el.variation.section.currentVariation()) {
                            el.changes = {};
                            el.operations = [];
                        }
                    }

                    this.setIsSelecting(false);

                    // Cache information received about this element.
                    el.linkUrl = metadata.anchorHref;
                    el.formUrl = metadata.formAction;

                    // store references
                    self.el = el;

                    // check if we need to trigger an auto rearrange op. This is used in case of
                    // auto parent select feature of rearrange op
                    if (shouldTriggerRearrange) {
                        self.el.jq.addClass(self.el.elClass).then(function() {
                            self.el.rearrange();
                        });

                        // align menu according to new selected element
                        this.gravitize();
                    }

                    // hack: if rearrange is neither true nor false, trigger a show menu
                    if (typeof shouldTriggerRearrange !== 'boolean') {
                        var obj = this;
                        setTimeout(function() {
                            self.showMenu(self.x, self.y, obj.getIdsOfMenuItemsToShow(metadata), shouldTriggerRearrange);
                        });
                        self.setElementParentsDataOnScope(metadata.parentElementsInfo);
                    }

                    // add or change goal related options in the context menu
                    var classes = {
                        itself: metadata.className,
                        siblings: metadata.siblingsClassNames,
                        children: metadata.descendantsClassNames,
                        parents: metadata.parentsClassNames
                    };

                    self.updateGoalOptionsInContextMenu(classes, metadata.anchorHref, metadata.formAction, metadata.selectorPath, metadata.screenPath);
                    self.populateGoalWidget(metadata.anchorHref, metadata.formAction, metadata.selectorPath);

                    // toggle which box should be visible
                    window.showGoalVariationBox('variations');
                    window.hideGoalVariationBox('goals');
                }
            },

            /**
			 * Uses the element metadata to identify which context menu items need to be shown.
			 *
			 * @param  {ElementMetadata} metadata The metadata of the element to identify ids using.
			 */
            getIdsOfMenuItemsToShow: function(metadata) {
                var ids = [];

                // what all operations are available on this element
                if (metadata.isImage) {
                    ids = ['#vwo-menu-change-image', '#vwo-menu-edit-image', '#vwo-menu-edit', '#vwo-menu-format'];
                } else if (metadata.isAnchor || metadata.isContainedInAnAnchor) {
                    ids = ['#vwo-menu-change-href', '#vwo-menu-edit', '#vwo-menu-format'];
                } else if (!metadata.isIframe) {
                    ids = ['#vwo-menu-edit', '#vwo-menu-format'];
                } else {
                    ids = ['#vwo-menu-format'];
                }

                if (metadata.isForm || metadata.isContainedInAForm) {
                    ids.push('#vwo-menu-track-submits');
                }
                if (metadata.hasBackgroundImage) {
                    ids.push('#vwo-menu-change-bkgImg', '#vwo-menu-edit-bkg-image');
                }
                if (metadata.containsOnlyTextNode) {
                    ids.push('#vwo-menu-edit-text');
                }

                if (!metadata.isIframe) {
                    ids.push('#vwo-menu-track-clicks');
                }

                return ids;
            },

            resetEditor: function() {
                VWOEditor.resetEditor();
            },

            resetPointerEvents: function() {
                this.pointerEventsAllowed.applied = false;

                //Remove mousemove event listeners if any attached
                document.body.removeEventListener('mousemove', this.onMouseMove, true);
            }
        },
        topWindowFrame: {
            showFrame: function() {
                $('iframe#test_page').css('height', '100%');
            },

            hideFrame: function() {
                $('iframe#test_page').css('height', '60px');
            },

            allowPointerEventsThroughFrame: function() {
                $('iframe#test_page').css('pointer-events', 'none');
            },

            blockPointerEventsThroughFrame: function() {
                $('iframe#test_page').css('pointer-events', 'auto');
            },

            getMobileFrameRect: function() {
                var frame = $('iframe#mobile_iframe');
                return {
                    offset: frame.offset(),
                    outerHeight: frame.outerHeight(),
                    outerWidth: frame.outerWidth()
                };
            }
        },
        childFrame: {

            pointerEventsAllowed: {},

            // Adds some event listeners to document in capture phase, like mouseover, mousedown, etc.
            initialize: function() {

                this.parentFrame.initialize();

                //Add keyboard shortcuts
                VWOInjected.frameContext.services.keyboardShortcutsManager.addKeyboardShortcuts();

                // add the listeners in capture phase
                document.body.removeEventListener('mouseover', this.onMouseOver, true);
                document.body.addEventListener('mouseover', this.onMouseOver, true);

                document.body.removeEventListener('mousedown', this.onMouseDown, true);
                document.body.addEventListener('mousedown', this.onMouseDown, true);

                // disable context menu and double click in design mode
                document.oncontextmenu = this.onContextMenu;
                document.dblclick = this.onDoubleClick;

                window.removeEventListener('scroll', this.onScroll);
                window.addEventListener('scroll', this.onScroll);

                this.onMouseMoveForPointerEvents = this.onMouseMoveForPointerEvents.bind(this);
                this.onMouseLeaveForPointerEvents = this.onMouseLeaveForPointerEvents.bind(this);
            },

            onScroll: function(e) {
                elementManager.parentFrame.setMousePosition({
                    x: e.pageX,
                    y: e.pageY
                });
                elementManager.parentFrame.gravitize();
            },

            onDoubleClick: function() {
                return window.VWOInjected.interactionMode !== 'design';
            },

            onContextMenu: function() {
                return window.VWOInjected.interactionMode !== 'design';
            },

            onMouseOver: function(e) {
                if (e.ctrlKey) {
                    return;
                }
                elementManager.highlightElement(e.target);
            },

            onMouseDown: function(e, shouldTriggerRearrange) {
                var selected = elementManager.selectElement(e.target, shouldTriggerRearrange);
                if (selected) {
                    elementManager.parentFrame.setMousePosition({
                        x: parseInt(e.pageX, 10) || 0 - window.pageXOffset,
                        y: parseInt(e.pageY, 10) || 0 - window.pageYOffset
                    });
                    e.preventDefault();
                    e.stopImmediatePropagation();
                }
            },

            isSelecting: function() {
                return window.VWOInjected.selecting;
            },

            setIsSelecting: function(value) {
                window.VWOInjected.selecting = value;
            },

            /**
			 * Highlights an element by showing a border around it.
			 *
			 * @param  {Element} element The element node to show a border around
			 * @param  {Boolean}         Indicates whether the highlight was successful or not.
			 *                           It is unsuccessful for body or for editor related elements.
			 */
            highlightElement: function(element) {
                var metadata = new ElementMetadata(element);
                if (metadata.isEditorElement || metadata.isBody) {
                    return false;
                }

                // if we are in design mode and are selecting, proceed
                if (window.VWOInjected.interactionMode === 'design' && this.isSelecting()) {
                    window.VWOInjected.highlighted = element;
                    $(element).borderify();

                    return true;
                }

                return false;
            },

            /**
			 * Selects an element by showing a border and shim around it.
			 *
			 * @param  {Element}         element                The element node to select.
			 * @param  {Boolean}         shouldTriggerRearrange Whether rearrange operation should be triggered.
			 * @param  {Boolean|Promise}                        Indicates whether the selection was successful or not.
			 *                                                  It is unsuccessful for body or for editor related elements.
			 */
            selectElement: function(element, shouldTriggerRearrange) {
                var self = this
                  , $element = $(element);

                // if designing, and iframe glass
                if (window.VWOInjected.interactionMode === 'design' && $element.hasClass('_vwo_iframe_glass')) {
                    // get the element using the dataset of the glass
                    $element = $(element.dataset.xpath);
                    element = $element.get(0);
                }

                var metadata = new ElementMetadata(element);

                // if the click is on glass or border, ignore
                if (metadata.isEditorElement || metadata.isBody) {
                    return false;
                }

                // pass the control over to the parent frame
                var promise = this.parentFrame.selectElement(metadata, shouldTriggerRearrange);

                if (window.VWOInjected.interactionMode === 'design' && this.isSelecting()) {
                    this.setIsSelecting(false);
                    $element.borderify().shimmy();

                    //If the element is selected, expand the editor frame
                    this.expandToFullHeight();

                    //Block the pointer events through frame
                    frameContext.services.topFrameManager.parentFrame.hideVariationsAndGoalsMenu();
                    frameContext.services.topFrameManager.blockPointerEventsThroughEditorFrame();

                    // a click on the glass surrounding the selected element saves the current operation
                    $('._vwo_glass').unbind('click').click(function() {
                        self.parentFrame.resetEditor();
                    });

                    // set the xpaths of all siblings before the op begins.
                    // so that we can know if the xpaths change after this op.
                    $element.parent().children().each(function() {
                        $(this).data('_vwo_xpath', $(this).selectorPath());
                    });

                    return promise;
                }

                return false;
            },

            resetEditor: function() {
                if (window.vwoLoadingMode === 'mobile') {
                    elementManager.topWindowFrame.hideFrame();
                } else {
                    $('iframe#test_page').css('height', '60px');
                }
                this.destroyListenersForPointerEvents();
                this.parentFrame.setFrameState(true);
            },

            expandToFullHeight: function() {
                if (window.vwoLoadingMode === 'mobile') {
                    elementManager.topWindowFrame.showFrame();
                } else {
                    $('iframe#test_page').css('height', '100%');
                }
                this.parentFrame.setFrameState(false);

                //Hide any open notification
                frameContext.services.topFrameManager.hideNotification();
            },

            updateContextualBoxCoordinates: function(contextualBoxCoordinates) {
                this.pointerEventsAllowed.contextualBoxCoordinates = contextualBoxCoordinates;
            },

            allowPointerEventsThroughFrame: function(pointerEventsAllowed) {
                var scrollTop = $(document).scrollTop();
                pointerEventsAllowed.y1 += scrollTop;
                pointerEventsAllowed.y2 += scrollTop;
                this.pointerEventsAllowed = pointerEventsAllowed;

                if (window.vwoLoadingMode !== 'mobile') {
                    $('iframe#test_page').css('pointer-events', 'none');
                } else {
                    this.topWindowFrame.allowPointerEventsThroughFrame();
                }

                document.body.removeEventListener('mousemove', this.onMouseMoveForPointerEvents, true);
                document.body.addEventListener('mousemove', this.onMouseMoveForPointerEvents, true);

                if (window.vwoLoadingMode === 'mobile') {
                    document.body.removeEventListener('mouseleave', this.onMouseLeaveForPointerEvents, true);
                    document.body.addEventListener('mouseleave', this.onMouseLeaveForPointerEvents, true);
                }
            },

            onMouseLeaveForPointerEvents: function(e) {
                this.pointerEventsAllowed.applied = false;
                this.parentFrame.resetPointerEventsAllowed();
                this.blockPointerEventsThroughFrame();
                document.body.removeEventListener('mousemove', this.onMouseMoveForPointerEvents, true);
                document.body.removeEventListener('mouseleave', this.onMouseLeaveForPointerEvents, true);
            },

            onMouseMoveForPointerEvents: function(e) {

                var mouseInsideContextualBox = this.pointerEventsAllowed.contextualBoxCoordinates && e.pageX > this.pointerEventsAllowed.contextualBoxCoordinates.left && e.pageX < this.pointerEventsAllowed.contextualBoxCoordinates.right && e.pageY > this.pointerEventsAllowed.contextualBoxCoordinates.top && e.pageY < this.pointerEventsAllowed.contextualBoxCoordinates.bottom;
                var mouseOutsideSelectedArea = e.pageX < this.pointerEventsAllowed.x1 || e.pageX > this.pointerEventsAllowed.x2 || e.pageY < this.pointerEventsAllowed.y1 || e.pageY > this.pointerEventsAllowed.y2;
                var mouseInsideMenubarArea = window.vwoLoadingMode !== 'mobile' ? e.clientY > (window.innerHeight - 60) : false;

                if (this.pointerEventsAllowed.applied && (mouseOutsideSelectedArea || mouseInsideContextualBox || mouseInsideMenubarArea)) {
                    this.pointerEventsAllowed.applied = false;
                    this.parentFrame.resetPointerEventsAllowed();
                    this.blockPointerEventsThroughFrame();
                    document.body.removeEventListener('mousemove', this.onMouseMoveForPointerEvents, true);
                    document.body.removeEventListener('mouseleave', this.onMouseLeaveForPointerEvents, true);
                }
            },

            blockPointerEventsThroughFrame: function() {
                if (window.vwoLoadingMode !== 'mobile') {
                    $('iframe#test_page').css('pointer-events', 'auto');
                } else {
                    this.topWindowFrame.blockPointerEventsThroughFrame();
                }
            },

            destroyListenersForPointerEvents: function() {
                //Remove Event listener from child frame
                document.body.removeEventListener('mousemove', this.onMouseMoveForPointerEvents, true);

                //Remove Event Listener from parent frame
                this.parentFrame.resetPointerEvents()
            }
        }
    };

    elementManager = frameContext.registerService('elementManager', elementManager);
    return elementManager;
});

define('designer/operations/RearrangeOperation', ['designer/FrameContext', 'designer/operations/BaseOperation', 'designer/ElementManager'], function(frameContext, baseOperation, elementManager) {
    'use strict';

    /* eslint camelcase: "off" */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;

    $.fn.dragAlong = function($node) {
        $node = $($node);

        this.drag('start', function(ev, dd) {
            $node.css({
                position: $node.css('position') === 'static' ? 'relative' : $node.css('position'),
                display: $node.css('display').match(/table/i) ? 'block' : $node.css('display')
            });

            dd.initialLeft = parseInt($node.css('left'), 10) || 0;
            dd.initialTop = parseInt($node.css('top'), 10) || 0;
            dd.dragAlongNode = $node;
        });

        this.drag(function(ev, dd) {
            $node.css({
                top: dd.initialTop + dd.deltaY,
                left: dd.initialLeft + dd.deltaX
            });
        });

        return this;
    }
    ;

    var rearrangeOperation = $.extend(true, {}, frameContext.serviceDefinitions.baseOperation, {
        name: 'rearrange2',
        type: 'rearrange2',
        title: 'Rearrange',
        hasHandles: true,
        handleThickness: 25,
        spacingForGravitize: 40,

        parentFrame: {
            initialize: function initialize(el, options) {
                var self = this;
                this.el = el = el || VWOEditor.el;
                this.options = options = options || {};

                if (this.shouldApplyOldRearrange()) {
                    return VWOEditor.start().then(el.rearrange.bind(el));
                }

                baseOperation.initialize.apply(this);

                this.el.currentOp = this.name;

                this.childFrame.saveControl(el).then(function(updatedEl) {
                    $.extend(true, el, updatedEl);
                    self.childFrame.initialize(el, options);
                });

                this.childFrame.lightenShim();

                if (VWOEditor.isMobile) {
                    this.allowPointerEventsThroughSelectedElement();
                }
            },

            shouldApplyOldRearrange: function() {
                var currentState;

                // if the element has and old rearrange operation on it, it should be edited
                // and new rearrange should not be applied
                //
                function rearrangeFilter(stackEntry) {
                    return stackEntry.op.opName === 'rearrange' && currentState.elements[stackEntry.el].elClass === VWOEditor.el.elClass;
                }

                if (VWOEditor.test === 'mvt') {
                    // must loop through every section and see if an old rearrange is present
                    for (var i in VWOEditor.sections) {
                        if (VWOEditor.sections.hasOwnProperty(i)) {
                            var section = VWOEditor.sections[i];
                            currentState = section.currentVariation().currentState();
                            if (currentState.stack && currentState.stack.filter(rearrangeFilter).length) {
                                return true;
                            }
                        }
                    }
                } else {
                    currentState = VWOEditor.currentState();
                    return !!(currentState.stack && currentState.stack.filter(rearrangeFilter).length);
                }
            },

            onProgress: function onProgress(params) {
                this.update(params);
                this.updateUI();
            },

            update: function(params) {
                var el = this.el;
                // TODO: Instead of assigning params to tempchanges, it shud be rather
                // merged with temchanges. Test it.
                el.tempChanges[this.name] = params;
            },

            updateUI: function updateUI() {
                $('#vwo-contextual-box').fadeOut('fast');

                baseOperation.updateUI.call(this);
            },

            gravitize: function() {
                $('#vwo-contextual-box').fadeIn('fast').gravitize($('body'), VWOEditor.el.jq, VWOEditor.x, VWOEditor.y, rearrangeOperation.spacingForGravitize);
                if (VWOEditor.isMobile) {
                    frameContext.services.elementManager.topWindowFrame.blockPointerEventsThroughFrame();
                    this.allowPointerEventsThroughSelectedElement();
                }
            },

            allowPointerEventsThroughSelectedElement: function() {
                $.when(VWOEditor.el.jq.getBoundingCoordinates()).then(function(boundingCoordinates) {
                    frameContext.services.elementManager.allowPointerEvents(boundingCoordinates);
                });
            },

            persist: function() {
                var rearrangeChanges = this.el.tempChanges[this.name];
                if (!rearrangeChanges) {
                    return;
                }

                delete rearrangeChanges.css;

                this.el.tempChanges[this.name] = rearrangeChanges;

                return baseOperation.persist.apply(this, [].slice.call(arguments));
            },

            deactivate: function() {
                this.childFrame.rearrangeGlass.remove();
                this.childFrame.darkenShim();

                baseOperation.deactivate.apply(this);
            },

            serializeChanges: function(elSelectorPath, changes) {
                return ('.each(function () {' + '\n	var destP = vwo_$(' + JSON.stringify(changes.parentShortSelectorPath || changes.parentSelectorPath) + '),' + '\n		dest = destP.nonEmptyContents().eq(' + changes.indexInParent + ');' + '\n	if (dest.length)' + '\n		dest.before(this);' + '\n	else' + '\n		destP.append(this);' + '\n})');
            }
        },
        childFrame: {
            lightenShim: function() {
                $('._vwo_glass').addClass('_vwo_glass--light');
            },

            darkenShim: function() {
                $('._vwo_glass').removeClass('_vwo_glass--light');
            },

            // Auto select the parent element if need be.
            // This is done for elements that do not contain any sibling elements
            selectParentElementIfNeeded: function(jq) {
                var self = this;

                if (jq.siblings().length === 0) {
                    var $parent = jq.parent();
                    if (!$parent || !$parent.length) {
                        return;
                    }
                    while ($parent.parent().children().length <= 1 || $parent.get(0).tagName.toLowerCase() === 'body') {
                        $parent = $parent.parent();
                    }

                    elementManager.parentFrame.setIsSelecting(true);
                    elementManager.setIsSelecting(true);
                    elementManager.highlightElement($parent);
                    $.when(elementManager.selectElement($parent, false)).then(function() {
                        self.parentFrame.initialize();
                    });

                    return true;
                }
            },

            updateHandles: function(el, options) {
                options = options || {};

                var $node = $('.' + el.elClass);

                this.rearrangeGlass.updateForNode($node);

                if (options.showHandle) {
                    this.rearrangeGlass.get().html('...<br>...<br>...<br>...').addClass('_vwo_rearrange_handle').css(this.getHandlePositionAroundElement($node));

                    // Call gravitize once to adjust the menu according to rearrange placeholder.
                    this.parentFrame.gravitize();

                    $('#_vwo_glass').hide();
                }
            },

            rearrangeGlass: {
                get: function() {
                    if (!this._node) {
                        this._node = $('<div id="_vwo_rearrange_glass_layer"></div>').appendTo('body');
                    }
                    return this._node;
                },

                updateForNode: function($node) {
                    var offset = {
                        left: 0,
                        top: 0
                    };

                    if (window.getComputedStyle(document.body).getPropertyValue('position') !== 'static') {
                        offset.left -= ($('body')[0].getBoundingClientRect().left + $(document).scrollLeft());
                        offset.top -= ($('body')[0].getBoundingClientRect().top + $(document).scrollTop());
                    } else {
                        offset.left += parseInt(window.getComputedStyle(document.getElementsByTagName('body')[0]).getPropertyValue('border-left-width').replace('px', ''), 10);
                        offset.top += parseInt(window.getComputedStyle(document.getElementsByTagName('body')[0]).getPropertyValue('border-top-width').replace('px', ''), 10);
                    }

                    this.get().css({
                        left: $node.offset().left + offset.left,
                        top: $node.offset().top + offset.top,
                        height: $node.outerHeight(),
                        width: $node.outerWidth(),
                        cursor: 'move'
                    });
                },

                remove: function() {
                    this.get().remove();
                    delete this._node;
                }
            },

            initialize: function initialize(el, options) {
                var $node = $('.' + el.elClass);

                if (this.selectParentElementIfNeeded($node)) {
                    return;
                }

                this.el = el;
                this.options = options = options || {};

                this.rearrangeGlass.get().unbind('dragstart, drag, drop').dragAlong($node).drag('start', function(ev, dd) {
                    frameContext.services.elementManager.resetEditor();
                }).drag(this.onDrag.bind(this)).drop(this.onDrop.bind(this));

                this.updateHandles(el, options);
            },

            onDrag: function(ev, dd) {
                var $node = dd.dragAlongNode;

                dd.changes = dd.changes || {};

                $node.borderify().shimmy();
                $('.identifier').addClass('identifier--hidden');

                $('#_vwo_rearrange_glass_layer, ._vwo_glass, ._vwo_outline_border').css('pointer-events', 'none');
                $node.css('pointer-events', 'none');

                var $targetElement = $(document.elementFromPoint(ev.pageX - $(document).scrollLeft(), ev.pageY - $(document).scrollTop()));

                $('#_vwo_rearrange_glass_layer, ._vwo_glass, ._vwo_outline_border').css('pointer-events', 'auto');
                $node.css('pointer-events', 'auto');

                function applyRearrange() {
                    if (!$targetElement.parent().hasVWOClass()) {
                        $targetElement.parent().addVWOClass();
                    }
                    dd.changes.parentSelectorPath = $targetElement.parent().selectorPath();
                    dd.changes.parentShortSelectorPath = $targetElement.parent().shortSelectorPath();
                    dd.changes.parentVWOClass = $targetElement.parent().getVWOClass();
                    dd.changes.indexInParent = $targetElement.parent().nonEmptyContents().index($targetElement.get(0));
                    var insertPosition = $targetElement.showRearrangePlaceholder({
                        top: ev.pageY,
                        left: ev.pageX
                    });
                    if (insertPosition === 'after') {
                        dd.changes.indexInParent++;
                    }

                    $('._vwo_rearrange_container').removeClass('_vwo_rearrange_container');
                    $targetElement.parent().addClass('_vwo_rearrange_container');
                }

                if ($targetElement.length && // to prevent random rearranges on small movements, prevent
                // the item from being inserted as a sibling to its parent
                // or the item in its own child
                !$.contains($targetElement.get(0), $node.get(0)) && !$.contains($node.get(0), $targetElement.get(0))) {
                    if (/^(td|th|tr|li)$/i.test($node.attr('tagName'))) {
                        // if tag names of the two nodes are not the same, and tag name of one of the parents matches
                        if ($targetElement.attr('tagName') !== $node.attr('tagName') && $targetElement.parents().is($node.attr('tagName'))) {
                            $targetElement = $targetElement.parents($node.attr('tagName')).eq(0);
                        }
                        if ($targetElement.attr('tagName') === $node.attr('tagName')) {
                            applyRearrange();
                        }
                    } else {
                        // rearranging an element inside an element that has just one child makes no sense
                        while ($targetElement.parent().children().length === 1) {
                            $targetElement = $targetElement.parent();
                        }
                        applyRearrange();
                    }
                }

                // Communicate about the progress event to the parent frame.
                this.parentFrame.onProgress(dd.changes);

                window.VWOInjected.enableMagicScroll();
            },

            onDrop: function(ev, dd) {

                frameContext.services.elementManager.expandToFullHeight();

                var $node = dd.dragAlongNode;

                // remove rearrange placeholder
                $('#_vwo_glass_rearrange').remove();
                $('._vwo_rearrange_container').removeClass('_vwo_rearrange_container');

                this.applyControl(this.el);
                this.apply(this.el, null, dd.changes);

                $node.borderify().shimmy();
                $('.identifier').removeClass('identifier--hidden');

                this.rearrangeGlass.updateForNode($node);

                this.parentFrame.updateUI();
                this.parentFrame.gravitize();

                window.VWOInjected.disableMagicScroll();
            },

            getControl: function getControl(jq) {
                var parent = jq.parent();
                if (!parent.hasVWOClass()) {
                    parent.addVWOClass();
                }
                var retval = {
                    css: {
                        display: jq.css('display'),
                        position: jq.css('position'),
                        left: jq.css('left'),
                        top: jq.css('top'),
                        zIndex: jq.css('z-index')
                    },
                    indexInParent: parent.nonEmptyContents().index(jq.get(0)),
                    parentSelectorPath: parent.selectorPath(),
                    parentShortSelectorPath: parent.shortSelectorPath(),
                    parentVWOClass: parent.getVWOClass()
                };

                return retval;
            },

            applyChanges: function(jq, changes) {
                var $parent = $();
                if (changes.parentVWOClass) {
                    $parent = $('.' + changes.parentVWOClass);
                }
                if (!$parent.length) {
                    $parent = $(window.VWOInjected.processXpath(changes.parentSelectorPath));
                }

                var $referenceElement = $parent.nonEmptyContents().eq(changes.indexInParent);

                if ($referenceElement.get(0) !== jq.get(0)) {
                    if ($referenceElement.length) {
                        $referenceElement.before(jq);
                    } else {
                        $parent.append(jq);
                    }
                }

                if (changes.css) {
                    jq.css(changes.css);
                }
            },

            /**
			 * Calculates the postion of rearrange handle around the passed rectangle.
			 * @param  {object} pivotElementRect Bounding rectangle of the pivot element around which handle needs to
			 * @param  {object} pivotElementOffset Offset object of the pivot element.
			 * @return {object}                  Offset object of the handle -> { top, left }
			 */
            getHandlePositionAroundElement: function getHandlePositionAroundElement($node) {
                var pivotElementRect = $node.get(0).getBoundingClientRect()
                  , pivotElementOffset = $node.offset()
                  , position = {}
                  , handleThickness = rearrangeOperation.handleThickness;

                // Check 'left' possibility.
                if (pivotElementRect.left > handleThickness) {
                    position = {
                        left: pivotElementOffset.left - handleThickness,
                        top: pivotElementOffset.top
                    };
                } else if (window.innerWidth - (pivotElementRect.left + pivotElementRect.width) > handleThickness) {
                    // Right
                    position = {
                        left: pivotElementOffset.left + pivotElementRect.width,
                        top: pivotElementOffset.top
                    };
                } else if (pivotElementRect.top > handleThickness) {
                    // Top
                    position = {
                        left: pivotElementOffset.left,
                        top: pivotElementOffset.top - handleThickness
                    };
                } else if (window.innerHeight - (pivotElementRect.top + pivotElementRect.height) > handleThickness) {
                    // Bottom
                    position = {
                        left: pivotElementOffset.left,
                        top: pivotElementOffset.top + pivotElementRect.height
                    };
                } else {
                    // Left aligned aligned with the pivot element.
                    position = {
                        left: pivotElementOffset.left,
                        top: pivotElementOffset.top
                    };
                }
                return position;
            }
        }
    });

    return frameContext.registerService('rearrangeOperation', rearrangeOperation);
});

define('designer/operations/ResizeOperation', ['designer/FrameContext', 'designer/operations/BaseOperation', 'designer/inject/utils'], function(frameContext, baseOperation, utils) {
    'use strict';

    /* eslint camelcase: "off" */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;
    var vwoe_$ = frameContext.isParentFrame() && window.vwoe_$;
    var VWOInjected = window.VWOInjected;

    var resizeOperation = $.extend(true, {}, frameContext.serviceDefinitions.baseOperation, {
        name: 'resize',
        type: 'css',
        title: 'Resize',
        parentFrame: {
            initialize: function initialize(el) {
                baseOperation.initialize.apply(this);

                this.el = el = el || VWOEditor.el;

                var d = new $.Deferred()
                  , self = this;

                // set current op on el.
                // todo: ideally this should be unnecessary.
                el.currentOp = this.name;

                // Update values in the Resize widget based on the values
                // retrieved from the child frame.
                function updateUI() {
                    $.when(el.jq.css('display'), el.jq.css('z-index'), el.jq.width(), el.jq.outerWidth(), el.jq.height(), el.jq.outerHeight()).then(function(display, zIndex, width, outerWidth, height, outerHeight) {
                        if (self.isMobileApp) {
                            height = $('#vwo-resize-height').val().replace(/-?([\d]*)/, parseInt($('#vwo-resize-height').val(), 10) || 0);
                            width = $('#vwo-resize-width').val().replace(/-?([\d]*)/, parseInt($('#vwo-resize-width').val(), 10) || 0);
                        } else {
                            var diffH = outerHeight - height
                              , diffW = outerWidth - width;
                            height = $('#vwo-resize-height').val().replace(/-?([\d]*)/, (parseInt($('#vwo-resize-height').val(), 10) || 0) - diffH);
                            width = $('#vwo-resize-width').val().replace(/-?([\d]*)/, (parseInt($('#vwo-resize-width').val(), 10) || 0) - diffW);
                        }
                        self.el.update({
                            height: height,
                            width: width,
                            display: display,
                            zIndex: zIndex
                        }, true);
                    });
                }

                // Add a change listener to the Bring to Front checkbox.
                $('#vwo-resize-z').unbind('change').bind('change', function() {
                    var that = this;
                    self.el.jq.css('display').then(function(display) {
                        self.el.update({
                            width: $('#vwo-resize-width').val(),
                            height: $('#vwo-resize-height').val(),
                            display: display,
                            zIndex: $(that).is(':checked') ? 2500000 : 'auto'
                        });
                    });
                });

                $('#vwo-resize-aspect-ratio').attr('checked', false);
                self.childFrame.toggleAspectRatio(el, false);

                $('#vwo-resize-aspect-ratio').unbind('change').bind('change', function() {
                    self.childFrame.toggleAspectRatio(el, $(this).is(':checked'));
                });

                // Listen for arrow keys to update the element's UI on keyup.
                $('.numeric').unbind('keyup').unbind('keydown').bind('keyup', function() {
                    updateUI();
                }).bind('keydown', function(e) {
                    // replicate the behaviour of a numeric stepper
                    // todo: this is obsolete. <input type=number> solves this already.
                    // 38 = up arrow
                    // 40 = down arrow
                    if ([38, 40].indexOf(e.which) !== -1) {
                        var val = parseInt(this.value, 10) || 0;
                        if (e.which === 38) {
                            $(this).val(val + 1 + this.value.replace('' + val, ''));
                        } else if (e.which === 40) {
                            $(this).val(val - 1 + this.value.replace('' + val, ''));
                        }
                    }
                    updateUI();
                });

                // not sure why this is being done, but this is apparently important
                if (!VWOEditor.isMobileApp) {
                    el.jq.cleanAndReapplyClass(el.elClass).thenResolve(d);
                } else {
                    d.resolve();
                }

                return d.then(function() {
                    // save the control
                    self.childFrame.saveControl(el).then(function(updatedEl) {
                        // when control is saved in child, it should be updated on this instance
                        // of VWOElement as well. (Since the element would get copied in process
                        // of communication with the child frame.)
                        $.extend(true, el, updatedEl);
                        el.jq = vwoe_$('.' + el.elClass);
                    });
                    // and delegate the rest of the initialization to the child frame.
                    self.childFrame.initialize(el);
                });
            },
            onProgress: function onProgress(params, uiParams) {
                this.update(params);
                this.updateUI(uiParams || params);
            },
            /**
			 * Update the element's tempChanges with the most-to-date changes (progress) of this operation
			 * while this operation is in progress.
			 *
			 * @param  {Object}  params      The changeset to update tempChanges for this operation with.
			 *                               Constitutes position, top, left and z-index css values of the element.
			 * @param  {Boolean} shouldApply Should updation be delegated to the child frame to reflect
			 *                               back on the target element as well? Ordinarily this would not
			 *                               be needed. So defaults to false.
			 */
            update: function(params, shouldApply) {
                var el = this.el;
                // TODO: Instead of assigning params to tempchanges, it shud be rather
                // merged with temchanges. Test it.
                el.tempChanges[this.name] = params;

                if (!shouldApply) {
                    return;
                }

                this.childFrame.apply(el, null, params).then(function() {
                    // Realign the shim and glass after op has completed
                    el.jq.borderify().shimmy();
                    $.when(el.jq.outerWidth(), el.jq.outerHeight()).then(function(outerWidth, outerHeight) {
                        vwoe_$('#_vwo_glass_layer').css({
                            height: outerHeight,
                            width: outerWidth
                        });
                    });
                });
            },
            /**
			 * Update the Resize widget with the most up-to-date changes (progress) of this operation.
			 * @param  {Object}  params   The changeset to update the widget using.
			 *                            Constitutes position, top, left and z-index css values of the element.
			 */
            updateUI: function updateUI(params) {
                var distanceUnit = VWOEditor.isMobileApp ? 'pts' : 'px';

                VWOEditor.refreshCoalHighlights();

                $('#vwo-resize-width').val((parseInt(params.width, 10) || 0) + (('' + params.width).replace('' + (parseInt(params.width, 10) || 0), '') || distanceUnit));
                $('#vwo-resize-height').val((parseInt(params.height, 10) || 0) + (('' + params.height).replace('' + (parseInt(params.height, 10) || 0), '') || distanceUnit));
                $('#vwo-resize-z').attr('checked', +params.zIndex === 2500000);
                $('#vwo-contextual-box').gravitize($('body'), VWOEditor.el.jq, VWOEditor.x, VWOEditor.y);
            }
        },
        childFrame: {
            /**
			 * Initializes some stuff in the child frame after parent is done with its part.
			 * This mostly includes setting up a jQuery UI Draggable on the selected element.
			 * @param  {VWOElement} el  The element we're dealing with.
			 */
            initialize: function initialize(el) {
                var $node = $('.' + el.elClass)
                  , width = $node.width()
                  , height = $node.height()
                  , outerWidth = $node.outerWidth()
                  , outerHeight = $node.outerHeight()
                  , offset = $node.offset()
                  , display = $node.css('display')
                  , self = this;

                // FIXME: Check if this is the right behavior or not. Adding inline-block to random
                // elements can destroy page layout. It was anyways not working for a long time now.
                // display = (display === 'inline') ? 'inline-block' : display;

                this.parentFrame.onProgress({
                    display: display,
                    height: height + 'px',
                    width: width + 'px',
                    zIndex: $node.css('z-index')
                }, {
                    height: outerHeight,
                    width: outerWidth
                });

                if (window.getComputedStyle(document.body).getPropertyValue('position') !== 'static') {
                    offset.left -= ($('body')[0].getBoundingClientRect().left + $(document).scrollLeft());
                    offset.top -= ($('body')[0].getBoundingClientRect().top + $(document).scrollTop());
                } else {
                    offset.left += parseInt(window.getComputedStyle(document.getElementsByTagName('body')[0]).getPropertyValue('border-left-width').replace('px', ''), 10);
                    offset.top += parseInt(window.getComputedStyle(document.getElementsByTagName('body')[0]).getPropertyValue('border-top-width').replace('px', ''), 10);
                }

                // setup the glass layer and 8 corners to resize the object.
                var layer = $('<div id="_vwo_glass_layer">' + '<div class="handle NE"></div>' + '<div class="handle NN"></div>' + '<div class="handle NW"></div>' + '<div class="handle WW"></div>' + '<div class="handle EE"></div>' + '<div class="handle SW"></div>' + '<div class="handle SS"></div>' + '<div class="handle SE"></div>' + '</div>' + '<style>#_vwo_glass_layer:after { cursor: default; }</style>').appendTo('body').css({
                    left: offset.left,
                    top: offset.top,
                    height: outerHeight,
                    width: outerWidth
                }).drag('start', function(ev, dd) {
                    dd.attr = ev.target.className;
                    dd.width = $node.width();
                    dd.height = $node.height();
                    // Calculating ratio for maintainning Aspect Ratio
                    dd.ratio = dd.width / dd.height;
                }).drag(function(ev, dd) {
                    // Getting the isAspectRatioEnabled flag from the data saved on the current node (by @toggleAspectRatio method) selected in child, and calculating the aspect ratio accordingly.
                    var isAspectRatioEnabled = $node.data('isAspectRatioEnabled'), props = {
                        display: display
                    }, constrainedDeltaY, constrainedDeltaX;

                    // note the use of height internally. This is because we can only modify the height, but to the user, what is visible is the outerHeight, so we show him that
                    if (isAspectRatioEnabled) {
                        if (dd.attr.indexOf('E') > -1) {
                            constrainedDeltaY = dd.deltaX / dd.ratio;
                            constrainedDeltaX = constrainedDeltaY * dd.ratio;
                            props.width = Math.max(20, dd.width + constrainedDeltaX);
                            props.height = Math.max(20, dd.height + constrainedDeltaY);
                        } else if (dd.attr.indexOf('S') > -1) {
                            constrainedDeltaX = dd.deltaY * dd.ratio;
                            constrainedDeltaY = constrainedDeltaX / dd.ratio;
                            props.height = Math.max(20, dd.height + constrainedDeltaY);
                            props.width = Math.max(20, dd.width + constrainedDeltaX);
                        } else if (dd.attr.indexOf('W') > -1) {
                            constrainedDeltaY = dd.deltaX / dd.ratio;
                            constrainedDeltaX = constrainedDeltaY * dd.ratio;
                            props.width = Math.max(20, dd.width - constrainedDeltaX);
                            props.height = Math.max(20, dd.height - constrainedDeltaY);
                        } else if (dd.attr.indexOf('N') > -1) {
                            constrainedDeltaX = dd.deltaY * dd.ratio;
                            constrainedDeltaY = constrainedDeltaX / dd.ratio;
                            props.height = Math.max(20, dd.height - constrainedDeltaY);
                            props.width = Math.max(20, dd.width - constrainedDeltaX);
                        }
                    } else {
                        if (dd.attr.indexOf('E') > -1) {
                            props.width = Math.max(20, dd.width + dd.deltaX);
                        }
                        if (dd.attr.indexOf('S') > -1) {
                            props.height = Math.max(20, dd.height + dd.deltaY);
                        }
                        if (dd.attr.indexOf('W') > -1) {
                            props.width = Math.max(20, dd.width - dd.deltaX);
                        }
                        if (dd.attr.indexOf('N') > -1) {
                            props.height = Math.max(20, dd.height - dd.deltaY);
                        }
                    }
                    props.zIndex = $node.css('z-index');
                    if (props.height !== undefined) {
                        props.height += 'px';
                    } else {
                        props.height = $node.height() + 'px';
                    }
                    if (props.width !== undefined) {
                        props.width += 'px';
                    } else {
                        props.width = $node.width() + 'px';
                    }

                    $node.css(props).borderify().shimmy();

                    $('#_vwo_glass_layer').css({
                        height: $node.outerHeight(),
                        width: $node.outerWidth()
                    });

                    // send progress op call to parent

                    self.parentFrame.onProgress(props, {
                        height: $node.outerHeight(),
                        width: $node.outerWidth()
                    });

                    layer.css({
                        left: $node.offset().left,
                        top: $node.offset().top,
                        height: $node.outerHeight(),
                        width: $node.outerWidth()
                    });

                    VWOInjected.enableMagicScroll();
                });
            },
            toggleAspectRatio: function(el, isAspectRatioEnabled) {
                // Saving the flag's data on the selected DOM node itself.
                $('.' + el.elClass).data('isAspectRatioEnabled', isAspectRatioEnabled);
            },
            /**
			 * Gets the control values for the given element and this operation.
			 * For this operation, it actually gets the most current changes. This is
			 * called by saveControl only if control has not been get yet.
			 *
			 * So it might seem like a misleading name for what this code does, but this
			 * function acts like a protected function that was overriden from its base
			 * class but is not supposed to be publicly accessed.
			 *
			 * @param  {jQuery}  jq  The jQuery reference to the element we're dealing with.
			 * @return {Object}      Returns the current changeset for resize operation.
			 *                       Constitutes display, height, width and z-index css values of the element.
			 */
            getControl: function getControl(jq, el) {
                if (el.control.changeSRC) {
                    VWOInjected.applyControlForOp(el, {
                        attr: el.control.changeSRC,
                        opName: 'changeSRC'
                    });
                }

                var retval = {
                    height: jq.css('height'),
                    width: jq.css('width'),
                    zIndex: jq.css('z-index'),
                    display: jq.css('display')
                };

                if (el.control.changeSRC) {
                    VWOInjected.applyOp(el, {
                        attr: el.changes.changeSRC,
                        opName: 'changeSRC'
                    });
                }

                return retval;
            },
            /**
			 * Actually applies the css changes passed in the parameters to the given jquery element.
			 * For resize, this is as simple as calling jq.css().
			 *
			 * @param  {jQuery}  jq       The jQuery reference to the element we're dealing with.
			 * @param  {Object}  changes  A list of resize-related css changes to apply.
			 *                            Constitutes display, height, width and z-index css values of the element.
			 */
            applyChanges: function(jq, changes) {
                utils.applyCssChanges(jq, changes);
            }
        }
    });

    return frameContext.registerService('resizeOperation', resizeOperation);
});

define('designer/operations/InsertOperation', ['designer/FrameContext', 'designer/operations/BaseOperation', 'designer/MarkupCleaner'], function(frameContext, baseOperation, markupCleaner) {
    'use strict';

    /* eslint camelcase: "off" */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;

    // There are four kinds of actions supported by the insert operation as defined
    // in this enum below. These actions are actually jQuery methods that will be
    // called on the reference element of the insert operation.
    var InsertActionEnum = {
        AFTER: 'after',
        BEFORE: 'before',
        PREPEND: 'prepend',
        APPEND: 'append'
    };

    var insertOperation = $.extend(true, {}, frameContext.serviceDefinitions.baseOperation, {
        name: 'insert',
        type: 'insert',
        parentFrame: {
            /**
			 * Initializes an insert operation.
			 *
			 * @param  {VWOElement}         el                           The element which was selected.
			 * @param  {Object}             elementToInsert              The element that needs to be inserted.
			 *                                                           It can be referred by either the selectorPath
			 *                                                           or the markup. Pick either of the below two:
			 * @param  {String}             elementToInsert.selectorPath The selectorPath of the source element
			 *                                                           to copy the contents from on demand.
			 * @param  {String}             elementToInsert.markup       The markup of the source element.
			 * @param  {ComputedStyleTree}  elementToInsert.styles       If the styles also need to be inserted alongside
			 *                                                           the markup, this contains the styletree of the
			 *                                                           element.
			 * @param  {String}             action                       One of the four actions defined in the enum above.
			 *                                                           Defaults to InsertActionEnum.AFTER.
			 */
            initialize: function initialize(el, elementToInsert, action) {
                baseOperation.initialize.apply(this);

                this.el = el = el || VWOEditor.el;
                var self = this
                  , d = $.Deferred();
                action = action || InsertActionEnum.AFTER;

                this.childFrame.getChangesToApply(el, elementToInsert, action).then(function(operationChanges) {
                    // This element object is presently of the element clicked. But we need to change
                    // it to represent the new inserted element. Now we do it by changing XPath, elClass,
                    // control and changes
                    el.XPath = operationChanges.targetSelectorPath;
                    el.elClass = 'vwo_' + window.getTimeStamp();
                    el.control = {};
                    el.changes = {};

                    self.childFrame.apply(el, operationChanges.targetSelectorPath, operationChanges).then(function() {
                        // hack: this is necessary otherwise endOperation returns early
                        el.currentOp = self.name;
                        el.tempChanges[self.name] = operationChanges;
                        el.jq = window.vwoe_$(el.XPath);

                        // save the changes
                        self.persist(el).then(function() {
                            d.resolve(el);
                            self.deactivate();
                        });
                    });
                });

                return d;
            },

            serializeChanges: function(elSelectorPath, changes) {
                var js = '.';

                if (changes.sourceSelectorPath) {
                    js += changes.action + '(vwo_$(' + JSON.stringify(window.processXpath(changes.sourceSelectorPath)) + ').clone(true))';
                } else {
                    js += changes.action + '(' + JSON.stringify(changes.sourceMarkup.replace(/(vwo_([\d]{13}))|_vwo_group/g, '').replace(/class="\s*"/ig, '')) + ')';
                }

                return js;
            }
        },
        childFrame: {
            /**
			 * Gets what changes should be applied for the given element to insert.
			 *
			 * @param  {VWOElement}         el                           The element which was selected.
			 * @param  {String}             elementToInsert.selectorPath The selectorPath of the source element
			 *                                                           to copy the contents from on demand.
			 * @param  {String}             elementToInsert.markup       The markup of the source element.
			 * @param  {ComputedStyleTree}  elementToInsert.styles       If the styles also need to be inserted alongside
			 *                                                           the markup, this contains the styletree of the
			 *                                                           element.
			 * @param  {String}             action                       One of the four actions defined in the enum above.
			 *                                                           Defaults to InsertActionEnum.AFTER.
			 * @return {Object}                                          Returns an object containing the operation changes
			 *                                                           that are needed to insert this element. The returned
			 *                                                           object contains the following properties:
			 *                                                            * action: the action passed in the parameters
			 *                                                            * targetSelectorPath: the selector path of the final element inserted
			 *                                                            * referenceSelectorPath: the selector path of the element around which
			 *                                                              the element is inserted
			 *                                                            * sourceSelectorPath | sourceMarkup: either of the two are included
			 *                                                              in the return value, depending on what kind of insert operation it is
			 *                                                              (by reference or by value).
			 */
            getChangesToApply: function(el, elementToInsert, action) {
                elementToInsert = elementToInsert || {
                    markup: '<span></span>'
                };
                action = action || InsertActionEnum.AFTER;

                var sourceMarkup, // the selector path of the element to be inserted
                sourceSelectorPath, sourceTagName, // the selector path of the reference element after or before which the element needs
                // to be inserted
                referenceSelectorPath, // the selector path of the final element inserted as a result of this element
                targetSelectorPath;

                if (elementToInsert.selectorPath) {
                    // if selectorPath was provided, fetch the source element's metadata
                    sourceSelectorPath = elementToInsert.selectorPath;
                    sourceTagName = $(sourceSelectorPath).attr('tagName');
                } else if (elementToInsert.markup) {
                    sourceMarkup = elementToInsert.markup;

                    var element = document.createElement('div');
                    element.innerHTML = sourceMarkup;
                    sourceTagName = $(sourceMarkup).get(0).tagName;
                }

                // originally, the referenceSelectorPath is that of the element selected
                referenceSelectorPath = el.XPath;

                switch (action) {
                case InsertActionEnum.AFTER:
                    targetSelectorPath = referenceSelectorPath + ' + ' + sourceTagName;
                    break;
                case InsertActionEnum.BEFORE:
                    // Calculate selector path if a tag X is added before tag Y
                    // DIV > P:first-child + Y   ->   DIV > P:first-child + X
                    // DIV > Y:first-child       ->   DIV > X:first-child
                    var components = referenceSelectorPath.split('>');
                    var lastComponent = components[components.length - 1].split('+');

                    lastComponent.splice(-1, 1, ' ' + sourceTagName + (lastComponent.length === 1 ? ':first-child' : ''));
                    components.splice(-1, 1, lastComponent.join('+'));

                    targetSelectorPath = components.join('>');
                    break;
                case InsertActionEnum.PREPEND:
                    targetSelectorPath = referenceSelectorPath + ' > ' + sourceTagName + ':first-child';
                    break;
                case InsertActionEnum.APPEND:
                    targetSelectorPath = referenceSelectorPath + ' > ' + sourceTagName + ':last-child';
                    break;
                }

                // the changeset
                var operationChanges = {
                    action: action,
                    targetSelectorPath: targetSelectorPath,
                    referenceSelectorPath: referenceSelectorPath
                };

                if (sourceSelectorPath) {
                    operationChanges.sourceSelectorPath = sourceSelectorPath;
                } else if (sourceMarkup) {
                    operationChanges.sourceMarkup = sourceMarkup;
                }

                return operationChanges;
            },

            // An insert operation has no control. Its control is basically an existential paradox.
            // It was not present on the original page.
            hasControl: function() {
                return true;
            },
            getControl: function() {},
            saveControl: function() {},
            /**
			 * Apply this operation. This function contains the stripped down version of apply from its
			 * superclass. The logic in this is mostly specific to this particular operation.
			 *
			 * @param  {VWOElement}  el        The element in consideration.
			 * @param  {String}      xpath     The selector path of the element to get it by. This exists here
			 *                                 just for legacy reasons and could very well be a property of el
			 *                                 itself.
			 *                                 TODO: as things are standardized, remove this parameter.
			 * @param  {Object}      changes   A hashmap containing the changes to apply on the element.
			 * @param  {Boolean}     isControl Are the given set of changes being applied actually control settings?
			 *                                 If so, the behaviour of certain operations might change.
			 */
            apply: function(el, xpath, changes, isControl) {
                if (!el.isSectionPathModified) {
                    xpath = window.VWOInjected.processXpath(xpath);
                }

                var jq = $('.' + el.elClass);

                if (isControl) {
                    if (!jq.length) {
                        jq = $(xpath).addClass(el.elClass);
                    }

                    if (!jq.length) {
                        return;
                    }
                }

                this.applyChanges(jq, changes, isControl);

                if (!isControl) {
                    jq = $('.' + el.elClass);
                    if (!jq.length) {
                        jq = $(xpath).addClass(el.elClass);
                    }
                }
            },
            /**
			 * Actually applies the insert element related changes given in the parameters.
			 * Essentially, either inserts the element or removes it, depending on the value of
			 * isControl.
			 * @param  {jQuery}  targetElement                 The jQuery reference to the element we're dealing with.
			 * @param  {Object}  changes                       An object containing the properties we need to determine
			 *                                                 the what, where and how of the insert operation.
			 * @param  {String}  changes.action                One of the four actions in InsertActionEnum. Determines
			 *                                                 what jQuery method to call to insert the element. (The
			 *                                                 proximity to the reference element.)
			 * @param  {String}  changes.sourceSelectorPath    The selector path of the reference element to clone
			 *                                                 the element from.
			 * @param  {String}  changes.sourceMarkup          Alternatively, you can choose to pass
			 *                                                 changes.referenceMarkup instead to perform a by-value
			 *                                                 insert.
			 * @param  {String}  changes.referenceSelectorPath The selector path of the element in whose vicinity
			 *                                                 the element ought to be inserted.
			 *
			 * @param  {Boolean} isControl                     Do we need to apply the control instead? In which case,
			 *                                                 the element is removed instead of being inserted.
			 */
            applyChanges: function(targetElement, changes, isControl) {
                if (isControl) {
                    // The element must be removed in the control state. Goodbye.
                    targetElement.remove();
                } else {
                    var $newElement;
                    if (changes.sourceSelectorPath) {
                        $newElement = $(changes.sourceSelectorPath).clone(true);
                    } else {
                        // Getting an element this way is better than just doing $(changes.sourceMarkup)
                        // because $ may fail if sourceMarkup does not start with a '<' sign.
                        $newElement = $('<div></div>').html(changes.sourceMarkup).children().first();
                    }

                    $newElement = markupCleaner.sanitizeNodeForClone($newElement);

                    var selectorPath = window.VWOInjected.processXpath(changes.referenceSelectorPath);

                    // insert the source element's clone (target element) around the reference element.
                    $(selectorPath)[changes.action || InsertActionEnum.AFTER]($newElement);
                }
            }
        }
    });

    insertOperation = frameContext.registerService('insertOperation', insertOperation);
    insertOperation.InsertActionEnum = InsertActionEnum;
    return insertOperation;
});

define('designer/operations/CopyOperation', ['designer/FrameContext', 'designer/MarkupCleaner', 'designer/operations/BaseOperation'], function(frameContext, markupCleaner) {
    'use strict';

    /* eslint camelcase: "off" */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;

    var copyOperation = $.extend(true, {}, frameContext.serviceDefinitions.baseOperation, {
        name: 'copy',
        type: 'copy',
        title: 'Copy',
        parentFrame: {
            clipboard: null,
            setElementToClipboard: function(markup, styles, parentTagName) {
                this.clipboard = {
                    // Strip the html from vwoclasses etc before copying.
                    markup: markupCleaner.cleanHTML(markup, parentTagName),
                    styles: styles
                };
            },
            /**
			 * Initialize the operation for the given element. If the element is not
			 * provided, it is picked from VWOEditor.el.
			 */
            initialize: function initialize(el) {
                var self = this;
                el = el || VWOEditor.el;

                // set this element's markup on the clipboard.
                $.when(el.jq.outerHTML(), el.jq.computedStyleTree()).then(function(outerHTML, computedStyleTree) {
                    // remove script tags in copied text
                    outerHTML = outerHTML.replace(/<script[\s\S]+?<\/script>/gim, '');
                    // remove el id from new element
                    outerHTML = outerHTML.replace(/ vwo\-el\-id\="[0-9]*"/g, '');
                    self.setElementToClipboard(outerHTML, computedStyleTree, el.parentTagName);
                    VWOEditor.close();

                    /* global editor: false */
                    setTimeout(function() {
                        editor.notifier.notify(editor.translator.t('Element copied!'));
                    });
                    VWOEditor.controllerScope.$apply();
                });
            }
        }
    });

    return frameContext.registerService('copyOperation', copyOperation);
});

define('designer/ComputedStyleTree', ['designer/FrameContext'], function(frameContext) {
    'use strict';

    /* eslint camelcase: "off" */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;
    /* jshint camelcase: true */
    var VWOInjected = window.VWOInjected;

    /**
	 * A computed style tree is a tree of objects that have their structure like
	 * a CSSStyleDeclaration. The tree corresponds to the computed styles of each of the
	 * descendants of the element provided.
	 *
	 * @param {Element} element The element to construct a style tree for.
	 */
    function ComputedStyleTree(element) {
        if (element) {
            // Private property
            Object.defineProperty(this, 'element', {
                value: element
            });

            // populate selfStyles and childStyles
            this.selfStyles = ComputedStyleTree.getSerializableCSSStyleDeclaration(window.getComputedStyle(this.element));
            this.childStyles = [];
            for (var iteratorElement = this.element.firstElementChild; iteratorElement; iteratorElement = iteratorElement.nextElementSibling) {
                if (iteratorElement.tagName === 'SCRIPT') {
                    continue;
                }
                this.childStyles.push(new ComputedStyleTree(iteratorElement));
            }
        }
    }

    /**
	 * A generic CSSStyleDeclaration object is rather slow to serialize and contains
	 * information that isn't really important to us. This function takes such a CSSStyleDeclaration
	 * object and returns an object that looks like a CSSStyleDeclaration but does not have
	 * the stuff that we don't need.
	 *
	 * @param  {CSSStyleDeclaration|Object} cssStyleDeclaration The CSSStyleDeclaration instance to make serializable.
	 * @return {Object}                                         An object that looks and behaves like a CSSStyleDeclaration
	 *                                                          but is easier and faster to serialize using JSON.stringify.
	 */
    ComputedStyleTree.getSerializableCSSStyleDeclaration = function(cssStyleDeclaration) {
        if (!cssStyleDeclaration) {
            return;
        }

        var clonedCSSStyleDeclaration = {};
        // A CSSStyleDeclaration is an example of an object that also behaves like an array.
        // It has a length indicating the number of properties it has, and those properties
        // are also the keys on the object itself.
        for (var i = 0, j = 0; i < cssStyleDeclaration.length; i++) {
            var key = cssStyleDeclaration[i], value;
            // skip vendor properties
            if (key.charAt(0) === '-') {
                continue;
            }
            clonedCSSStyleDeclaration[j++] = key;
            if (cssStyleDeclaration.getPropertyValue) {
                value = cssStyleDeclaration.getPropertyValue(key);
            } else {
                value = cssStyleDeclaration[key];
            }
            clonedCSSStyleDeclaration[key] = value;
        }
        clonedCSSStyleDeclaration.length = j;

        return clonedCSSStyleDeclaration;
    }
    ;

    /**
	 * Compares two instances of CSSStyleDeclaration and returns a CSSStyleDeclaration-like object
	 * containing the difference between the two. The returning value contains the changes in set B
	 * that changed from the ones in set A or did not exist in set A.
	 *
	 * @param  {CSSStyleDeclaration} cssStyleDeclarationA Style declaration set A
	 * @param  {CSSStyleDeclaration} cssStyleDeclarationB Style declaration set B
	 * @return {Object}                                   Returns a diff object containing the changes in
	 *                                                    set B that changed from the ones in set A or did
	 *                                                    not exist in set A.
	 */
    ComputedStyleTree.compareCSSStyleDeclarations = function(cssStyleDeclarationA, cssStyleDeclarationB) {
        for (var i = 0, j = 0, l = cssStyleDeclarationB.length, result = {}; i < l; i++) {
            var key = cssStyleDeclarationB[i]
              , valueA = cssStyleDeclarationA.getPropertyValue ? cssStyleDeclarationA.getPropertyValue(key) : cssStyleDeclarationA[key]
              , valueB = cssStyleDeclarationB.getPropertyValue ? cssStyleDeclarationB.getPropertyValue(key) : cssStyleDeclarationB[key];

            if (valueA !== valueB) {
                result[j++] = key;
                result[key] = valueB;
            }
        }
        result.length = j;
        return result;
    }
    ;

    /**
	 * Cast an object into a ComputedStyleTree instance. An alternate way of constructing a
	 * ComputedStyleTree object.
	 *
	 * @param  {Object}            object Takes a serialized instance of ComputedStyleTree.
	 * @return {ComputedStyleTree}        Returns a casted instance of ComputedStyleTree.
	 */
    ComputedStyleTree.create = function(object) {
        var styleTree = new ComputedStyleTree();

        if (object.selfStyles) {
            styleTree.selfStyles = ComputedStyleTree.getSerializableCSSStyleDeclaration(object.selfStyles);
        }

        if (object.childStyles instanceof Array) {
            styleTree.childStyles = [];
            for (var i = 0, l = object.childStyles.length; i < l; i++) {
                styleTree.childStyles[i] = ComputedStyleTree.create(object.childStyles[i]);
            }
        }

        return styleTree;
    }
    ;

    ComputedStyleTree.prototype = {
        /**
		 * Compares this style tree with the one passed in the parameters and returns a new ComputedStyleTree
		 * instance containing a diff tree of the both.
		 *
		 * @param  {ComputedStyleTree} styleTree The style tree to compare this one against.
		 * @return {ComputedStyleTree}           Returns a new style tree that contains the changes in the style
		 *                                       tree given in parameters that changed from ones in this style
		 *                                       tree or the changes that did not exist in this style tre.
		 */
        compare: function(styleTree) {
            var selfStylesDiff = ComputedStyleTree.compareCSSStyleDeclarations(this.selfStyles, styleTree.selfStyles);
            var childStylesDiff = [];
            for (var i = 0, l = this.childStyles.length; i < l; i++) {
                // This has been done in case the style tree element does not exist.
                if (styleTree.childStyles[i]) {
                    childStylesDiff.push(this.childStyles[i].compare(styleTree.childStyles[i]));
                }
            }
            return ComputedStyleTree.create({
                selfStyles: selfStylesDiff,
                childStyles: childStylesDiff
            });
        },

        /**
		 * Applies the changes in this style tree to the given element.
		 *
		 * @param  {Element} element The element to apply this tree of styles to.
		 */
        applyToElement: function(element) {
            var self = this;
            var $element = $(element);
            for (var i = this.selfStyles.length; i--; ) {
                $element.css(this.selfStyles[i], this.selfStyles[this.selfStyles[i]]);
            }
            for (var iteratorElement = element.firstElementChild, j = 0; iteratorElement; iteratorElement = iteratorElement.nextElementSibling) {
                var $child = self.childStyles[j++];
                // Check if child element actually exists
                if ($child) {
                    $child.applyToElement(iteratorElement);
                }
            }
        }
    };

    if (VWOInjected) {
        VWOInjected.ComputedStyleTree = ComputedStyleTree;
    }

    return ComputedStyleTree;
});

define('designer/operations/PasteOperation', ['designer/FrameContext', 'designer/operations/CopyOperation', 'designer/operations/InsertOperation', 'designer/operations/BaseOperation', 'designer/ComputedStyleTree'], function(frameContext, copyOperation, insertOperation, baseOperation, ComputedStyleTree) {
    'use strict';

    /* eslint camelcase: "off" */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;
    var vwoe_$ = window.vwoe_$;

    var PasteTypeEnum = {
        HTML_ONLY: 'htmlOnly',
        HTML_WITH_STYLES: 'htmlWithStyles'
    };

    var pasteOperation = $.extend(true, {}, frameContext.serviceDefinitions.insertOperation, {
        name: 'paste',
        type: 'insert',

        parentFrame: {
            pasteType: PasteTypeEnum.HTML_WITH_STYLES,
            /**
			 * Initializes the paste operation. The operation is actually a pseudo-operation
			 * that delegates to insertOperation.
			 *
			 * @param  {String} action Where to paste. (Either of after, before, prepend or append.)
			 */
            initialize: function initialize(action) {
                baseOperation.initialize.apply(this);

                var el = this.el = VWOEditor.el
                  , self = this;
                this.pasteType = PasteTypeEnum.HTML_WITH_STYLES;

                this.childFrame.getChangesToApply(el, copyOperation.clipboard, action).then(function(operationChanges) {
                    operationChanges.pasteType = self.pasteType;

                    // This element object is presently of the element clicked. But we need to change
                    // it to represent the new inserted element. Now we do it by changing XPath, elClass, id,
                    // control and changes
                    el.XPath = operationChanges.targetSelectorPath;
                    el.elClass = 'vwo_' + window.getTimeStamp();
                    el.id = '';
                    el.control = {};
                    el.changes = {};

                    self.childFrame.apply(el, operationChanges.targetSelectorPath, operationChanges).then(function() {
                        // hack: this is necessary otherwise endOperation returns early
                        el.currentOp = self.name;
                        el.tempChanges[self.name] = operationChanges;

                        el.jq = vwoe_$(el.XPath);
                        self.updateUI();
                    });
                });
            },
            // Borderify the selected element, and gravitize.
            updateUI: function() {
                VWOEditor.el.jq.borderify().shimmy();

                $('#vwo-contextual-box').gravitize($('body'), VWOEditor.el.jq, VWOEditor.x, VWOEditor.y);
            },
            // Triggered by angular.
            onPasteTypeChange: function() {
                var el = this.el
                  , self = this
                  , changes = el.tempChanges[this.name];
                changes.pasteType = this.pasteType;
                self.childFrame.applyControl(el, el.XPath).then(function() {
                    self.childFrame.apply(el, el.XPath, changes).then(function() {
                        el.jq = vwoe_$(el.XPath);
                        self.updateUI();
                    });
                });
            },
            /**
			 * Save the operation in the stack.
			 */
            persist: function() {
                // Certain properties like pasteType, sourceMarkupWithStyles do not matter
                // after the operation is complete. They need to be discarded before the
                // operation is persisted into the stack.
                var pasteChanges = this.el.tempChanges[this.name];
                if (pasteChanges.pasteType === PasteTypeEnum.HTML_WITH_STYLES) {
                    pasteChanges.sourceMarkup = pasteChanges.sourceMarkupWithStyles;
                    delete pasteChanges.sourceMarkupWithStyles;
                }
                delete pasteChanges.pasteType;
                delete pasteChanges.targetSelectorPath;

                this.el.tempChanges[this.name] = pasteChanges;

                insertOperation.persist.call(this);
            }
        },
        childFrame: {
            /**
			 * Gets what changes should be applied for the given element to insert.
			 *
			 * @param  {VWOElement}         el                           The element which was selected.
			 * @param  {String}             elementToInsert.selectorPath The selectorPath of the source element
			 *                                                           to copy the contents from on demand.
			 * @param  {String}             elementToInsert.markup       The markup of the source element.
			 * @param  {ComputedStyleTree}  elementToInsert.styles       If the styles also need to be inserted alongside
			 *                                                           the markup, this contains the styletree of the
			 *                                                           element.
			 * @param  {String}             action                       One of the four actions defined in the enum above.
			 *                                                           Defaults to InsertActionEnum.AFTER.
			 * @return {Object}                                          Returns an object containing the operation changes
			 *                                                           that are needed to insert this element. The returned
			 *                                                           object contains the following properties:
			 *                                                            * action: the action passed in the parameters
			 *                                                            * targetSelectorPath: the selector path of the final element inserted
			 *                                                            * referenceSelectorPath: the selector path of the element around which
			 *                                                              the element is inserted
			 *                                                            * sourceSelectorPath | sourceMarkup: either of the two are included
			 *                                                              in the return value, depending on what kind of insert operation it is
			 *                                                              (by reference or by value).
			 *                                                            * sourceMarkupWithStyles: if styles were passed along in the parameters,
			 *                                                              this value is populated with the sourceElement including the styles
			 *                                                              of the source element.
			 */
            getChangesToApply: function(el, elementToInsert, action) {
                var changes = insertOperation.getChangesToApply.call(this, el, elementToInsert, action);

                if (elementToInsert.styles) {
                    changes.sourceStyles = elementToInsert.styles;

                    // Set XPath and elClass on the element so that apply works correctly
                    // (it expects this kind of behaviour)
                    el.XPath = changes.targetSelectorPath;
                    el.elClass = 'vwo_' + (+new Date());

                    // pseudo-apply the operation in order to get sourceMarkupWithStyles
                    this.apply(el, el.XPath, changes);

                    var $newElement = $(changes.targetSelectorPath);
                    var newStyles = $newElement.computedStyleTree();
                    var oldStyles = ComputedStyleTree.create(changes.sourceStyles);

                    var styleDiff = newStyles.compare(oldStyles);
                    styleDiff.applyToElement($newElement.get(0));

                    // Deleting this key makes sure this action of style comparison happens
                    // only once
                    delete changes.sourceStyles;
                    changes.sourceMarkupWithStyles = $newElement.outerHTML();

                    // Revert back the operation, we were just doing so to get the changes to apply
                    this.applyControl(el, el.XPath);
                }

                return changes;
            },
            /**
			 * Actually applies the paste element related changes given in the parameters. This operation figures
			 * out what kind of paste to do, and delegates the actual task to insertOperation.applyChanges.
			 * The two kinds of pastes are - either just the markup, or the markup with styles.
			 *
			 * @param  {jQuery}  targetElement                 The jQuery reference to the element we're dealing with.
			 * @param  {Object}  changes                       An object containing the properties we need to determine
			 *                                                 the what, where and how of the insert operation.
			 * @param  {String}  changes.action                One of the four actions in InsertActionEnum. Determines
			 *                                                 what jQuery method to call to insert the element. (The
			 *                                                 proximity to the reference element.)
			 * @param  {String}  changes.pasteType             The kind of paste action to perform. Either of the two
			 *                                                 kinds in PasteTypeEnum.
			 * @param  {String}  changes.sourceMarkup          Alternatively, you can choose to pass
			 *                                                 changes.referenceMarkup instead to perform a by-value
			 *                                                 insert.
			 * @param  {String}  changes.referenceSelectorPath The selector path of the element in whose vicinity
			 *                                                 the element ought to be inserted.
			 *
			 * @param  {Boolean} isControl                     Do we need to apply the control instead? In which case,
			 *                                                 the element is removed instead of being inserted.
			 */
            applyChanges: function(targetElement, changes, isControl) {
                var sourceMarkup;
                switch (changes && changes.pasteType) {
                case PasteTypeEnum.HTML_ONLY:
                    sourceMarkup = changes.sourceMarkup;
                    break;
                case PasteTypeEnum.HTML_WITH_STYLES:
                    sourceMarkup = changes.sourceMarkupWithStyles || changes.sourceMarkup;
                    break;
                }

                if (sourceMarkup) {
                    changes = $.extend(true, {}, changes, {
                        sourceMarkup: sourceMarkup
                    });
                }

                insertOperation.applyChanges.call(this, targetElement, changes, isControl);
            }
        }
    });

    pasteOperation = frameContext.registerService('pasteOperation', pasteOperation);
    pasteOperation.PasteTypeEnum = PasteTypeEnum;
    return pasteOperation;
});

define('designer/operations/ToggleVisibilityOperation', ['designer/FrameContext', 'designer/operations/BaseOperation'], function(frameContext, baseOperation) {
    'use strict';

    /* jshint -W106 */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;

    var toggleVisibilityOperation = $.extend(true, {}, frameContext.serviceDefinitions.baseOperation, {
        name: 'visibility',
        type: 'css',
        title: 'Toggle Visibility',
        parentFrame: {
            /**
			 * Initialize the operation for given element. If the element is not
			 * provided, it is picked from VWOEditor.el.
			 * @param el {VWOElement} The element we are trying to apply the operation on.
			 */
            initialize: function initialize(el) {
                el = el || VWOEditor.el;

                baseOperation.initialize.apply(this);

                var self = this;

                el.currentOp = this.name;

                this.childFrame.saveControl(el).then(function(updatedEl) {
                    $.extend(true, el, updatedEl);
                    $.when(el.jq.css('visibility'), el.jq.hasClass('_vwo_hidden')).then(function(visibility, hasVwoHiddenClass) {
                        if (visibility === 'hidden' || hasVwoHiddenClass) {
                            el.jq.removeClass('_vwo_hidden');
                            self.persist(el, {
                                visibility: 'visible'
                            }).then(function() {
                                VWOEditor.close();
                            });
                        } else {
                            el.jq.addClass('_vwo_hidden');
                            self.persist(el, {
                                visibility: 'hidden'
                            }).then(function() {
                                VWOEditor.close();
                            });
                        }
                    });
                });
            },
            persist: function(el, changes) {
                el = el || VWOEditor.el;

                el.tempChanges.visibility = changes;

                return baseOperation.persist.call(this, el);
            }
        },
        childFrame: {
            getControl: function(jq) {
                var retval = {
                    visibility: jq.hasClass('_vwo_hidden') ? 'hidden' : jq.css('visibility')
                };
                return retval;
            },
            applyChanges: function(jq, changes) {

                //the changes might contain !important attribute. remove them before comparison
                var visibilityValue;
                if (changes && changes.visibility) {
                    visibilityValue = changes.visibility.replace(/!important/g, '').trim();
                }

                if (visibilityValue === 'visible') {
                    jq.removeClass('_vwo_hidden');
                } else if (visibilityValue === 'hidden') {
                    jq.addClass('_vwo_hidden');
                }
            }
        }
    });
    return frameContext.registerService('toggleVisibilityOperation', toggleVisibilityOperation);
});

define('designer/operations/ChangeTextOperation', ['designer/FrameContext', 'designer/operations/BaseOperation'], function(frameContext, baseOperation) {
    'use strict';

    /* jshint -W106 */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;

    var changeTextOperation = $.extend(true, {}, frameContext.serviceDefinitions.baseOperation, {
        name: 'html',
        type: 'html',
        title: 'Change Text',
        parentFrame: {
            /**
			 * Initialize the operation for given element. If the element is not
			 * provided, it is picked from VWOEditor.el.
			 * @param el {VWOElement} The element we are trying to apply the operation on.
			 */
            initialize: function initialize(el) {
                el = el || VWOEditor.el;

                baseOperation.initialize.apply(this);

                var self = this;

                el.currentOp = this.name;

                $('#vwo-text').unbind('keyup').bind('keyup', function() {
                    var changes = $(this).val();
                    self.update(el, changes);
                    self.childFrame.apply(el, el.XPath, changes);
                });

                this.childFrame.saveControl(el).then(function(updatedEl) {
                    $.extend(true, el, updatedEl);

                    var html;
                    if (!el.changes.html) {
                        html = el.control.html;
                    } else {
                        html = el.changes.html;
                    }
                    el.tempChanges.html = html;

                    html = $('<div>').html(html).text();

                    self.updateUI(html);
                    self.update(el, html);
                });
            },

            update: function(el, html) {
                if (html !== undefined) {
                    html = this.htmlEncode(html);
                }
                el.tempChanges[this.name] = html;
            },

            updateUI: function(html) {
                $('#vwo-text').val(html);
            },

            /**
			 * Helper to ensure that element inner text cannot be html
			 *
			 * @param xpath The xpath of the element
			 * @param copy if we are copying an element object
			 * @param elClass the element class to use
			 */
            htmlEncode: function(s) {
                var el = document.createElement('div');
                el.innerText = el.textContent = s;
                s = el.innerHTML;
                el = undefined;
                return s;
            }
        },

        childFrame: {
            getControl: function(jq) {
                return jq.html();
            },

            applyChanges: function(jq, changes) {
                jq.html(changes);
            }
        }
    });
    return frameContext.registerService('changeTextOperation', changeTextOperation);
});

define('designer/operations/ChangeUrlOperation', ['designer/FrameContext', 'designer/operations/BaseOperation', 'designer/ElementManager'], function(frameContext, baseOperation, elementManager) {
    'use strict';

    /* jshint -W106 */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;

    var changeUrlOperation = $.extend(true, {}, frameContext.serviceDefinitions.baseOperation, {
        name: 'changeURL',
        type: 'attr',
        title: 'Change URL',
        parentFrame: {
            /**
			 * Initialize the operation for given element. If the element is not
			 * provided, it is picked from VWOEditor.el.
			 * @param el {VWOElement} The element we are trying to apply the operation on.
			 */
            initialize: function initialize(el) {
                el = el || VWOEditor.el;

                baseOperation.initialize.apply(this);

                var self = this;
                el.currentOp = this.name;

                this.childFrame.initialize(el).then(function(success) {
                    if (!success) {
                        return;
                    }
                    $.when(self.childFrame.saveControl(el), self.childFrame.getAnchorHref(el)).then(function(updatedEl, anchorHref) {
                        $.extend(true, el, updatedEl);

                        self.update(el, {
                            href: anchorHref
                        });
                        self.updateUI(anchorHref);
                    });
                });
            },
            update: function(el, changes) {
                el.tempChanges[this.name] = changes;
            },
            updateUI: function(href) {
                $('#vwo-url').val(href);
            },
            persist: function(el) {
                el = el || VWOEditor.el;

                el.tempChanges[this.name] = {
                    href: $('#vwo-url').val()
                };
                return baseOperation.persist.call(this, el);
            }
        },
        childFrame: {
            initialize: function(el) {
                var $node = $('.' + el.elClass);

                return !this.selectParentElementIfNeeded($node);
            },

            getAnchorHref: function(el) {
                var $node = $('.' + el.elClass);

                return $node.metadata().anchorHref;
            },

            // Auto select the parent element if need be.
            // This is done for elements that do not contain any sibling elements
            selectParentElementIfNeeded: function(jq) {
                var self = this;

                if (!jq.is('a')) {
                    var $parent;
                    $parent = jq.closest('a');

                    elementManager.parentFrame.setIsSelecting(true);
                    elementManager.setIsSelecting(true);
                    elementManager.highlightElement($parent);

                    $.when(elementManager.selectElement($parent, false)).then(function() {
                        self.parentFrame.initialize();
                    });

                    return true;
                }
            },

            getControl: function(jq) {
                return {
                    href: jq.attr('href')
                };
            },

            applyChanges: function(jq, changes) {
                jq.attr(changes);
            }
        }
    });
    return frameContext.registerService('changeUrlOperation', changeUrlOperation);
});

define('designer/operations/ChangeImageOperation', ['designer/FrameContext', 'designer/operations/BaseOperation', 'designer/inject/utils'], function(frameContext, baseOperation, utils) {
    'use strict';

    /* jshint -W106 */
    /* global editor:false, absolutizeURI: false */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;
    var parsedSrcset, isPictureTag, defaultSrc;
    var srcSetDimensionRegex = /^\d+$/;

    // Credits: https://github.com/sindresorhus/srcset
    /**
	 * Gets all unique elements from an array of objects
	 * @param arr
	 */
    function deepUnique(arr) {
        return arr.sort().filter(function(el, i) {
            return JSON.stringify(el) !== JSON.stringify(arr[i - 1]);
        });
    }

    /**
	 * This method will parse the srcSet string that is being supplied and will return an object with parsed dimensions, the keys will have the dimensions and values will have the urls.
	 * @param str
	 * @returns {*}
	 */
    function parseSrcset(str) {
        str = str.replace(/\n/g, '');
        // Split by comma because srcset value changes after every comma. Hence, the split.
        // Example: 320w https://varunmalhotra.xyz, 480w https://kushagragour.in/lab/ is general way of setting srcset
        return deepUnique(str.split(',').map(function(el) {
            var ret = {};

            el.trim().split(/\s+/).forEach(function(el, i) {
                if (i === 0) {
                    return ret.url = el;
                }

                var value = el.substring(0, el.length - 1);
                var postfix = el[el.length - 1];
                var intVal = parseInt(value, 10);
                var floatVal = parseFloat(value);

                if (postfix === 'w' && srcSetDimensionRegex.test(value)) {
                    ret.width = intVal;
                } else if (postfix === 'h' && srcSetDimensionRegex.test(value)) {
                    ret.height = intVal;
                } else if (postfix === 'x' && !Number.isNaN(floatVal)) {
                    ret.density = floatVal;
                } else {
                    throw new Error('Invalid srcset descriptor: ' + el + '.');
                }
            });

            return ret;
        }));
    }

    // This will serialize the srcset object being passed into srcset string
    function serializeSrcset(srcset) {
        var src;
        for (src = 0; src < srcset.length; src++) {
            var str = srcset[src].url;
            var value;
            if (srcset[src].width) {
                value = srcset[src].width + 'w';
            } else if (srcset[src].height) {
                value = srcset[src].height + 'h';
            } else {
                value = srcset[src].density + 'x';
            }
            srcset[src] = '' + str + ' ' + value;
        }
        return srcset.join(', ');
    }

    // Parsing srcset function end
    var changeImageOperation = $.extend(true, {}, frameContext.serviceDefinitions.baseOperation, {
        name: 'changeSRC',
        type: 'attr',
        title: 'Change SRC',
        parentFrame: {
            /**
			 * Initialize the operation for given element. If the element is not
			 * provided, it is picked from VWOEditor.el.
			 * @param el {VWOElement} The element we are trying to apply the operation on.
			 */
            initialize: function initialize(el) {
                var self = this;
                el = el || VWOEditor.el;

                baseOperation.initialize.apply(this);

                el.currentOp = this.name;

                $.fn.imageUploader = function(id, secret) {
                    try {
                        // append tabs in this node... and call cb, once image has been uploaded...
                        $(this).html('');
                        var $content = $('<span class="float--left"><div class="row"><div><span style="vertical-align: top;margin: 4px 0 0;display: inline-block;width:90px;">Upload Image:</span><span style="display:inline-block;"><iframe src="//useruploads.vwo.com/browse.php?account_id=' + id + '&secret=' + secret + '" class="changeImageIframe js-browse-existing-image"></iframe></span></div><div><span style="width:90px;display:inline-block;">or specify URL:</span><span><input id="vwo-img-url" type="text" style="width: 294px;"/></span></div></div><div class="row" style="margin-top:14px;"><ul id="uploaded_images"><li>or <a id="fetch_image">Browse existing images</a></li></ul></div></span><span class="js-change-image__right-section float--right"><div class="row" style="text-align:center;width:210px;"><img id="vwo-img-preview" src="" style="max-width:200px;max-height:150px;" /></div><div class="row" style="margin:2px 0;"><span style="display:inline-block;width:50px;">Title: </span><input id="vwo-img-title" type="text" /></div><div class="row" style="margin:2px 0;"><span style="display:inline-block;width:50px;">Alt text: </span><input id="vwo-img-alt" type="text" /></div><div class="row" style="margin:2px 0;"><span style="display:inline-block;width:50px;">Size: </span><input id="vwo-img-width" type="text" size="4" value="" /> X <input id="vwo-img-height" type="text" size="4" value="" /> <em>px</em></div><div class="row" style="margin:2px 0;"><span style="display:inline-block;width:50px;">Border: </span><input id="vwo-img-border" type="text" size="1" value="0" /> <em>px</em></div></span><div class="clear"></div>');
                        $content.find('#vwo-img-preview').load(function(e) {
                            $('#vwo-img-width').val(e.target.naturalWidth);
                            $('#vwo-img-height').val(e.target.naturalHeight);
                        });
                        $content.find('#vwo-img-url').change(function(e) {
                            $('#vwo-menu-change-image-content img#vwo-img-preview').attr('src', $(e.target).val());
                        });
                        $content.find('#fetch_image').click(function() {
                            $('#uploaded_images').html('<img src="../images/line-loading.gif" />');
                            $.ajax({
                                url: $('iframe.js-browse-existing-image').attr('src') + '&list',
                                dataType: 'jsonp',
                                success: function(data) {
                                    $('#uploaded_images').html('');
                                    if (!data.length) {
                                        $('#uploaded_images').html('<span style="color:red">There are no images uploaded by you yet</span>');
                                        return;
                                    }
                                    for (var i in data) {
                                        if (data.hasOwnProperty(i)) {
                                            $('#uploaded_images').append('<li class="uimg"><span><img src="' + data[i] + '" /></span></li>');
                                        }
                                    }
                                    $('#vwo-contextual-box').gravitize(/*$('#test_page')*/
                                    $('body'), VWOEditor.el ? VWOEditor.el.jq : null, VWOEditor.x, VWOEditor.y);
                                    $('#uploaded_images .uimg span').click(function(e) {
                                        $('img#vwo-img-preview').attr('src', $(this).children('img').attr('src'));
                                        $('#vwo-img-url').val($(this).children('img').attr('src'));
                                        $('#vwo-img-title, #vwo-img-alt').val('');
                                        $('#vwo-img-border').val(0);
                                    });
                                }
                            });
                            return false;
                        });
                        $content.appendTo(this);
                    } catch (e) {
                        errorReport(e, printStackTrace(), 'ui::$.fn.imageUploader', arguments);
                    }
                }
                ;
                $('#vwo-menu-change-image-content .row').imageUploader(editor.accountId, editor.aviarySecret);

                this.childFrame.saveControl(el).then(function(updateEl) {
                    $.extend(true, el, updateEl);
                    self.childFrame.getControl(null, el).then(function(data) {
                        self.updateUI(data);
                    });
                });
            },
            updateUI: function(params) {
                if (params.srcset) {
                    parsedSrcset = parseSrcset(params.srcset);
                    var useruploadsURL = '//useruploads.vwo.com/browse.php';
                    var element = '<div class="srcset-list">Srcset: <ul id="js-editor-srcset">', i, displayVal, displayUrl;
                    var imgFrameUrl = useruploadsURL + '?account_id=' + window.editor.accountId + '&secret=' + window.editor.aviarySecret + '&current_uploader_index=';
                    element += '<li style="margin-bottom: 7px; display: flex;"><input style="width: 17%;" data-srcset-index="' + 'default' + '" class="srcset-dimension" type="text" value="' + 'Default' + '" disabled="true"><div class="srcset-url-container"><input data-srcset-index="' + 'default' + '" type="text" placeholder="Copy URL or click on Upload"  class="float--right srcset-url-input srcset-url-input-index-default' + '" value="' + absolutizeURI(params.src, VWOEditor.vwo_document_real_url, VWOEditor.frameLocation) + '"><span class="srcset-file-upload-container" frameIndex="default">UPLOAD<iframe class="srcset-file-upload srcset-frame-index-default' + '" id="uploadFrame-default' + '" src="' + imgFrameUrl + 'default' + '" class="changeImageIframe js-change-image-iframe  Mt(7px)"></iframe></span></div></li>';
                    for (i = 0; i < parsedSrcset.length; i++) {
                        displayUrl = absolutizeURI(parsedSrcset[i].url, VWOEditor.vwo_document_real_url, VWOEditor.frameLocation);
                        if (parsedSrcset[i].width) {
                            displayVal = parsedSrcset[i].width + 'w';
                        } else if (parsedSrcset[i].height) {
                            displayVal = parsedSrcset[i].height + 'h';
                        } else if (parsedSrcset[i].density) {
                            displayVal = parsedSrcset[i].density + 'x';
                        } else if (parsedSrcset[i].key) {
                            displayVal = parsedSrcset[i].key;
                        }
                        element += '<li style="margin-bottom: 7px; display: flex;"><input style="width: 17%;" data-srcset-index="' + i + '" class="srcset-dimension srcset-dimension-index-' + (i + 1) + '" type="text" value="' + displayVal + '"><div class="srcset-url-container"><input data-srcset-index="' + i + '" type="text" placeholder="Copy URL or click on Upload"  class="float--right srcset-url-input srcset-url-input-index-' + (i + 1) + '" value="' + displayUrl + '"><span class="srcset-file-upload-container" frameIndex="' + (i + 1) + '">UPLOAD<iframe class="srcset-file-upload srcset-frame-index-' + (i + 1) + '" id="uploadFrame' + (i + 1) + '" src="' + imgFrameUrl + (i + 1) + '" class="changeImageIframe js-change-image-iframe  Mt(7px)"></iframe></span></div></li>';
                    }
                    element += '</ul></div>';

                    // append src set uploader
                    $('#vwo-menu-change-image-content > div > span.float--left').prepend(element);
                    // Hide upload image
                    $('#vwo-menu-change-image-content > div > span.float--left > div:nth-child(2)').hide();
                    // Hide browse existing images
                    $('#vwo-menu-change-image-content > div > span.float--left > div:nth-child(3)').hide();
                    $('.context-menu-content #vwo-img-preview').attr('src', absolutizeURI(params.src, VWOEditor.vwo_document_real_url, VWOEditor.frameLocation));

                    var srcsetUrlElements = document.getElementsByClassName('srcset-url-input');
                    for (var srcsetIndex = 0; srcsetIndex < srcsetUrlElements.length; srcsetIndex++) {
                        srcsetUrlElements[srcsetIndex].onchange = function() {
                            var data = this.getAttribute('data-srcset-index');
                            if (parseInt(data)) {
                                parsedSrcset[parseInt(data)].url = this.value;
                            } else {
                                defaultSrc = this.value;
                            }
                        }
                        ;
                    }

                    // Add blue border
                    $('.srcset-url-input').bind('focus', function() {
                        $(this).parent().css('border', '1px solid #298ee9');
                        $(this).val(absolutizeURI($(this).val(), VWOEditor.vwo_document_real_url, VWOEditor.frameLocation));
                        $('#vwo-menu-change-image-content img#vwo-img-preview').attr('src', $(this).val());
                    });

                    // Remove error border if any
                    $('.srcset-url-input').bind('blur', function() {
                        $(this).parent().css('border', '');
                    });

                    // On focusing in, we need to set the correct preview on the right hand side
                    $('.srcset-dimension').bind('focus', function() {
                        var srcSetIndex = parseInt($(this).attr('data-srcset-index')) + 1;
                        $('#vwo-menu-change-image-content img#vwo-img-preview').attr('src', $('.srcset-url-input-index-' + srcSetIndex).val());
                    });

                    // On changing source set dimension
                    $('.srcset-dimension').bind('change', function() {
                        var value = $(this).val();
                        if (/^[0-9]*[wxh]$/gi.test(value)) {
                            var srcSetIndex = parsedSrcset[$(this).attr('data-srcset-index')];
                            var srcSetType = value[value.length - 1];
                            // set everything undefined since we have a valid use case here
                            srcSetIndex.width = srcSetIndex.height = srcSetIndex.density = undefined;
                            if (srcSetType === 'w') {
                                srcSetIndex.width = parseInt(value.substr(0, value.indexOf('w')));
                            } else if (srcSetType === 'h') {
                                srcSetIndex.height = parseInt(value.substr(0, value.indexOf('h')));
                            } else {
                                srcSetIndex.density = parseInt(value.substr(0, value.indexOf('x')));
                            }
                            $(this).css('border', '');
                        } else {
                            $(this).css('border', '1px solid red');
                        }
                    });

                    $('#vwo-img-url').val(absolutizeURI(params.currentSrc, VWOEditor.vwo_document_real_url, VWOEditor.frameLocation));
                } else {
                    parsedSrcset = null;
                    $('#vwo-img-url').val(params.src);
                    $('#vwo-img-preview').attr('src', absolutizeURI(params.src, VWOEditor.vwo_document_real_url, VWOEditor.frameLocation));
                    $('#vwo-img-alt').val(params.alt);
                    $('#vwo-img-title').val(params.title);
                    $('#vwo-img-width').val(params.width);
                    $('#vwo-img-height').val(params.height);
                    $('#vwo-img-border').val(params.border);
                }
            },
            persist: function(el) {
                el = el || VWOEditor.el;
                if (parsedSrcset) {
                    var i;
                    for (i = 0; i < parsedSrcset.length; i++) {
                        parsedSrcset[i].url = $('.srcset-url-input-index-' + (i + 1)).val();
                        var val = $('.srcset-dimension-index-' + (i + 1)).val();
                        if (/^[0-9]*[wxh]$/gi.test(val)) {
                            var postfix = val[val.length - 1];
                            val = parseInt(val.substr(0, val.indexOf(postfix)));
                            parsedSrcset[i].width = parsedSrcset[i].height = parsedSrcset[i].density = undefined;
                            if (postfix === 'w') {
                                parsedSrcset[i].width = val;
                            } else if (postfix === 'h') {
                                parsedSrcset[i].height = val;
                            } else if (postfix === 'x') {
                                parsedSrcset[i].density = val;
                            }
                            $('.srcset-dimension-index-' + (i + 1)).css('border', '');
                        } else {
                            if (!isPictureTag) {
                                $('.srcset-dimension-index-' + (i + 1)).css('border', '1px solid red');
                                return;
                            }
                        }
                    }

                    defaultSrc = $('.srcset-url-input-index-default').val();

                    el.tempChanges[this.name] = {
                        alt: $('#vwo-img-alt').val(),
                        title: $('#vwo-img-title').val(),
                        border: $('#vwo-img-border').val(),
                        src: defaultSrc,
                        srcSet: serializeSrcset(parsedSrcset)
                    };
                } else {
                    el.tempChanges[this.name] = {
                        alt: $('#vwo-img-alt').val(),
                        title: $('#vwo-img-title').val(),
                        width: $('#vwo-img-width').val(),
                        height: $('#vwo-img-height').val(),
                        border: $('#vwo-img-border').val(),
                        src: $('#vwo-img-url').val()
                    };
                }
                return baseOperation.persist.call(this, el);
            }
        },
        childFrame: {
            getControl: function(jq, el) {
                if (!jq || !jq.length) {
                    jq = $('.' + el.elClass);
                }
                if (!jq || !jq.length) {
                    jq = $(el.shortSelectorPath || el.XPath);
                }

                return {
                    src: utils.getOriginalUrlFromProxyUrl(jq.attr('src')),
                    alt: jq.attr('alt'),
                    title: jq.attr('title'),
                    width: jq.attr('width'),
                    height: jq.attr('height'),
                    border: jq.attr('border'),
                    srcset: jq.attr('srcset'),
                    currentSrc: jq.attr('currentSrc')
                };
            },
            applyChanges: function(jq, changes) {
                jq.attr(changes);
            }
        }
    });
    return frameContext.registerService('changeImageOperation', changeImageOperation);
});

define('designer/operations/ChangeBackgroundImageOperation', ['designer/FrameContext', 'designer/operations/BaseOperation', 'designer/inject/utils'], function(frameContext, baseOperation, utils) {
    'use strict';

    /* jshint -W106 */
    /* jshint -W101 */
    /* global editor:false, absolutizeURI: false */

    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;

    var changeBackgroundImageOperation = $.extend(true, {}, frameContext.serviceDefinitions.baseOperation, {
        name: 'backgroundImg',
        type: 'css',
        title: 'Change Background Image',
        parentFrame: {
            /**
			 * Initialize the operation for given element. If the element is not
			 * provided, it is picked from VWOEditor.el.
			 * @param el {VWOElement} The element we are trying to apply the operation on.
			 */
            initialize: function initialize(el) {
                el = el || VWOEditor.el;

                baseOperation.initialize.apply(this);

                var self = this;
                el.currentOp = this.name;

                $('#vwo-menu-change-bkgImg-content .row').imageUploader(editor.accountId, editor.aviarySecret);

                this.childFrame.saveControl(el).then(function(updateEl) {
                    $.extend(true, el, updateEl);
                    $.when(el.jq.css('background-image')).then(function(backgroundImage) {
                        var url = backgroundImage.replace(/^url\(('|")?(.*?)('|")?\)$/, '$2');

                        url = url.replace(new RegExp('^' + VWOEditor.frameLocation.protocol + '\/\/' + VWOEditor.frameLocation.host), '');
                        url = utils.getOriginalUrlFromProxyUrl(url);
                        self.updateUI({
                            url: url
                        });
                    });
                });
            },
            updateUI: function(params) {
                $('.js-change-image__right-section .row').not(':first-child').hide();
                $('#vwo-img-url').val(params.url);
                $('#vwo-img-preview').attr('src', absolutizeURI(params.url, VWOEditor.vwo_document_real_url, VWOEditor.frameLocation));
            },
            persist: function(el) {
                el = el || VWOEditor.el;
                el.tempChanges[this.name] = {
                    'background-image': 'url(' + $('#vwo-img-url').val() + ')'
                };
                return baseOperation.persist.call(this, el);
            }
        },
        childFrame: {
            getControl: function(jq) {
                return jq.css('background-image');

            },
            applyChanges: function(jq, changes) {
                utils.applyCssChanges(jq, changes);
            }
        }
    });
    return frameContext.registerService('changeBackgroundImageOperation', changeBackgroundImageOperation);
});

define('designer/operations/EditImageOperation', ['designer/FrameContext', 'designer/operations/BaseOperation'], function(frameContext, baseOperation) {
    'use strict';

    /* jshint -W106 */
    /* global editor:false */
    /* global updateLoadingMessage:false */
    /* global absolutizeURI:false */
    /* global avairyTimeout:false */
    /* global reportCustomError:false */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;

    var editImageOperation = $.extend(true, {}, frameContext.serviceDefinitions.baseOperation, {
        name: 'editImg',
        type: 'attr',
        title: 'Edit Image',
        parentFrame: {
            /**
			 * Initialize the operation for given element. If the element is not
			 * provided, it is picked from VWOEditor.el.
			 * @param el {VWOElement} The element we are trying to apply the operation on.
			 */
            initialize: function initialize(el) {
                el = el || VWOEditor.el;

                baseOperation.initialize.apply(this);

                el.currentOp = this.name;

                var self = this;
                this.childFrame.saveControl(el).then(function(updateEl) {
                    $.extend(true, el, updateEl);
                    $('#loading-glass,#loading_status').show();
                    updateLoadingMessage('<p>Loading image editor...</p>', false, true);
                    $('#vwo-contextual-box').hide();
                    $.when(el.jq.attr('src')).then(function(src) {
                        $('#_vwo_temp_image').remove();
                        var img = new Image();
                        img.style.display = 'none';
                        self.childFrame.getBaseHref().then(function(baseHref) {
                            img.src = absolutizeURI(src, baseHref || VWOEditor.vwo_document_real_url, VWOEditor.frameLocation);
                            img.id = '_vwo_temp_image';
                            document.body.appendChild(img);
                            avairyTimeout('start');
                            VWOEditor.feather.launch({
                                image: '_vwo_temp_image',
                                url: img.src,
                                onSave: function(id, src) {
                                    self.onSave(editor.accountId, editor.aviarySecret, src);
                                }
                            });
                        });
                    });
                });
            },

            saveImage: function() {
                avairyTimeout('start');
                $('#edit-image-save-btn').addClass('disabled');
                VWOEditor.feather.save();
                $('#_aviary_error').show().html('Saving...');
            },

            /**
			 * called by aviary when it saves the image. This uploads the image to useruploads.
			 * @param account The account to which to upload
			 * @param secret The secret token used to verify uploads
			 * @param src the source path of the file given by aviary
			 */
            onSave: function(account, secret, src) {
                var self = this;
                var onError = function() {
                    avairyTimeout('stop');
                    VWOEditor.resetEditor();
                };

                /* eslint camelcase: off */
                $.ajax({
                    data: {
                        secret: secret,
                        account_id: account,
                        url: encodeURI(src)
                    },
                    url: '//useruploads.vwo.com/browse.php',
                    dataType: 'jsonp',
                    success: function(imgSrc) {
                        self.validateImageUrl(imgSrc).then(function() {
                            $('#edit-image-save-btn').removeClass('disabled');
                            $('#_aviary_error').hide().html('');
                            self.onUploadSuccess(imgSrc);
                        }, onError);
                    },
                    error: onError
                });
            },

            validateImageUrl: function(url, attemptCount) {
                attemptCount = attemptCount || 0;
                var maxAttempts = 30;
                var d = $.Deferred();
                var self = this;
                var img = new Image();

                img.src = url + '?v=' + Math.random();

                img.onload = function() {
                    d.resolve();
                }
                ;

                img.onerror = function() {
                    if (attemptCount >= maxAttempts) {
                        d.reject();
                    }
                    self.validateImageUrl(url, attemptCount + 1).then(function() {
                        $('#edit-image-save-btn').removeClass('disabled');
                        $('#_aviary_error').hide().html('');
                        self.onUploadSuccess(url);
                    });
                }
                ;

                return d;
            },

            onUploadSuccess: function(url) {
                avairyTimeout('stop');
                if (url) {
                    this.persist(VWOEditor.el, url);
                } else {
                    // if the saving could not be done for some reason
                    var msg = 'There was an error while trying to save the edited image.';
                    $('#_aviary_error').show().html(msg + ' Our engineers have been notified about this error.');
                    reportCustomError({
                        cause: 'User uploads Image Upload failure',
                        imageSrc: url
                    });
                }
            },

            persist: function(el, url) {
                el = el || VWOEditor.el;
                el.tempChanges[this.name] = {
                    src: url
                };
                baseOperation.persist.apply(this);
            }
        },
        childFrame: {
            getControl: function(jq) {
                return {
                    src: jq.attr('src')
                };
            },
            applyChanges: function(jq, changes) {
                jq.attr('src', changes.src);
            },
            getBaseHref: function() {
                return document.querySelector('base') && document.querySelector('base').href;
            }
        }
    });
    return frameContext.registerService('editImageOperation', editImageOperation);
});

define('designer/operations/EditBackgroundImageOperation', ['designer/FrameContext', 'designer/inject/utils', 'designer/operations/BaseOperation', 'designer/operations/EditImageOperation'], function(frameContext, utils, baseOperation) {
    'use strict';

    /* jshint -W106 */
    /* global editor:false */
    /* global updateLoadingMessage:false */
    /* global absolutizeURI:false */
    /* global avairyTimeout:false */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;

    var editBackgroundImageOperation = $.extend(true, {}, frameContext.serviceDefinitions.editImageOperation, {
        name: 'editBkgImg',
        type: 'css',
        title: 'Edit Background Image',
        parentFrame: {
            initialize: function initialize(el) {
                el = el || VWOEditor.el;
                baseOperation.initialize.apply(this);

                el.currentOp = this.name;
                var self = this;
                this.childFrame.saveControl(el).then(function(updatedEl) {
                    $.extend(true, el, updatedEl);
                    $('#loading-glass,#loading_status').show();
                    updateLoadingMessage('<p>Loading image editor...</p>', false, true);
                    $('#vwo-contextual-box').hide();
                    $.when(el.jq.css('background-image')).then(function(bkgimg) {
                        $('#_vwo_temp_image').remove();
                        var img = new Image();
                        img.style.display = 'none';
                        var src = absolutizeURI(bkgimg, VWOEditor.vwo_document_real_url, VWOEditor.frameLocation);
                        img.src = src;
                        img.id = '_vwo_temp_image';
                        document.body.appendChild(img);
                        avairyTimeout('start');
                        VWOEditor.feather.launch({
                            image: '_vwo_temp_image',
                            url: src,
                            onSave: function(id, url) {
                                self.onSave(editor.accountId, editor.aviarySecret, url);
                            }
                        });
                    });
                });
            },
            persist: function(el, url) {
                el = el || VWOEditor.el;
                el.tempChanges[this.name] = {
                    'background-image': 'url(' + url + ')'
                };
                baseOperation.persist.apply(this);
            }
        },
        childFrame: {
            getControl: function(jq) {
                return {
                    'background-image': jq.css('background-image')
                };
            },
            applyChanges: function(jq, changes) {
                utils.applyCssChanges(jq, changes);
            }
        }
    });
    return frameContext.registerService('editBackgroundImageOperation', editBackgroundImageOperation);
});

define('designer/operations/SelectParentOperation', ['designer/FrameContext', 'designer/operations/BaseOperation'], function(frameContext) {
    'use strict';

    /* jshint -W106 */
    /* global request:false, vwoe_$:false*/
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;

    var selectParentOperation = $.extend(true, {}, frameContext.serviceDefinitions.baseOperation, {
        name: 'parent',
        type: 'parent',
        title: 'SelectParent',
        parentFrame: {
            /**
			 * Initialize the operation for given element. If the element is not
			 * provided, it is picked from VWOEditor.el.
			 * @param el {VWOElement} The element we are trying to apply the operation on.
			 */
            initialize: function(action, xpath) {
                var el = el || VWOEditor.el;

                // remove the class from this element, if changes is an empty object
                if ($.isEmptyObject(el.changes)) {
                    el.jq.removeClass(el.elClass);
                }
                if (action) {
                    el.jq.parent().attr('tagName').then(function(tagName) {
                        if (tagName === 'BODY') {
                            el.jq.highlight().select();
                        } else {
                            if (action === 'select') {
                                // Only set selecting flag when the action is 'select' i.e. when the user asks for an element to be in clicked state.
                                VWOEditor.selecting = true;
                                request('VWOInjected.setProperty', 'VWOInjected.selecting', true);
                                vwoe_$(xpath).highlight().select();
                            } else if (action === 'mouseover') {
                                vwoe_$(xpath).borderify().shimmy();
                            } else if (action === 'mouseleave') {
                                el.jq.borderify().shimmy();
                            }
                        }
                    });
                }
            },
            selectElementParent: function selectElementParent(parent) {
                VWOEditor.controllerScope.trackSegmentEvent(VWOEditor.controllerScope.SegmentAnalyticsEnum.COMMON.EDITOR_OPERATION, {
                    opName: VWOEditor.controllerScope.SegmentAnalyticsEnum.OPERATIONS.SELECT_PARENT
                });
                this.initialize('select', parent.selectorPath);
            },
            highlightElementParent: function highlightElementParent(parent) {
                this.initialize('mouseover', parent.selectorPath);
            },
            removeElementParentHighlight: function removeElementParentHighlight(parent) {
                this.initialize('mouseleave', parent.tagName);
            }
        }
    });
    return frameContext.registerService('selectParentOperation', selectParentOperation);
});

define('designer/operations/ChangeCSSOperation', ['designer/FrameContext', 'designer/operations/BaseOperation', 'designer/inject/utils'], function(frameContext, baseOperation, utils) {
    'use strict';

    /* jshint -W106 */
    /* jshint -W116 */
    /* jshint -W015 */
    /* jshint -W120 */
    /* jshint -W101 */
    /* global absolutizeURI: false */
    /* eslint eqeqeq: off */
    /* eslint camelcase: off */

    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.jQ164;

    var changeCSSOperation = $.extend(true, {}, frameContext.serviceDefinitions.baseOperation, {
        name: 'changeCSS',
        type: 'css',
        title: 'Change Styling',
        parentFrame: {
            /**
			 * Initialize the operation for given element. If the element is not
			 * provided, it is picked from VWOEditor.el.
			 * @param el {VWOElement} The element we are trying to apply the operation on.
			 */
            initialize: function initialize(el) {
                el = el || VWOEditor.el;

                baseOperation.initialize.apply(this);

                var self = this;

                // set current op on el.
                // todo: ideally this should be unnecessary.
                el.currentOp = this.name;

                var propArray = VWOEditor.cssList.map(function(obj) {
                    return obj.name;
                });

                this.childFrame.saveControl(el).then(function(updatedEl) {
                    $.extend(true, el, updatedEl);
                });

                $.when(el.jq.getStyleValues(propArray)).then(function(styleValues) {
                    self.updateUI({}, styleValues);
                });
            },
            updateUI: function(params, styleValues) {
                var self = this;
                var type, item, temp;
                var copyObj = $.extend(true, {}, VWOEditor.el.changes.changeCSS);
                var divCSS = $('#vwo-menu-change-css-content');
                divCSS.find('div[id^="changeCSS"]').remove();

                for (var i = 0, il = VWOEditor.cssList.length; i < il; i++) {
                    item = VWOEditor.cssList[i];
                    type = item.type;
                    if (divCSS.find('div.row#changeCSS' + type).length == 0) {
                        // CSS properties list
                        divCSS.find('div.row.sample').clone().attr('id', 'changeCSS' + type).removeClass('sample').appendTo(divCSS).show();
                        divCSS.find('div#changeCSS' + type + '.row div.css-heading.sample').attr('id', 'type-' + type).removeClass('sample').html(type.charAt(0).toUpperCase() + type.substr(1).toLowerCase()).show().end().find('div#changeCSS' + type + '.row div.css-content.sample').removeClass('sample');
                    }
                    if (type != 'custom') {
                        // Inner options of CSS properties list
                        temp = divCSS.find('div#changeCSS' + item.type + '.row div.css-content div.sample').clone();
                        temp.appendTo(divCSS.find('div#changeCSS' + item.type + '.row div.css-content')).removeClass('sample').show();
                        temp.find('.name').html(item.name);

                        if (temp.find('.name').html().indexOf('color') != -1) {
                            temp.find('.name, .value, .edit').addClass('colorCSS');
                        }
                        if (item.name == 'visibility' && $(VWOEditor.el.jq).hasClass('_vwo_hidden')) {
                            temp.find('.value-input').children().val('hidden').end().end().find('.value, .original-value').html('hidden');
                        } else {
                            var v = styleValues[item.name];
                            if (temp.find('.name').html() == 'background-image') {
                                v = (/url\(/.test(v) ? 'url("' + absolutizeURI(v) + '")' : v);
                            }
                            temp.find('.value-input').children().val(v).end().end().find('.value, .original-value').html(v);
                        }

                        temp.find('.help').html(item.help);
                        if (copyObj && copyObj[item.name]) {
                            delete copyObj[item.name];
                        }
                    }
                }

                if (copyObj) {
                    type = 'custom';
                    for (var prop in copyObj) {
                        if (copyObj[prop] != '') {
                            temp = divCSS.find('div#changeCSS' + type + '.row div.css-content div.sample').clone();
                            temp.appendTo(divCSS.find('div#changeCSS' + type + '.row div.css-content')).removeClass('sample').show();
                            temp.find('*').addClass('customCSS').end().find('.name').html('<span class="custom-name"></span><input class="custom-input hidden" placeholder="property" type="text">').end().find('.custom-name').html(prop).end().find('.custom-input').val(prop).end().find('.value-input').children().val(copyObj[prop]);
                            if (temp.find('.name').html().indexOf('color') !== -1) {
                                temp.find('.name, .value, .edit').addClass('colorCSS');
                            }
                            temp.find('.value, .original-value').html(copyObj[prop]);
                        }
                    }
                }

                if (!VWOEditor.isMobileApp) {
                    divCSS.find('div[id^="changeCSS"]:last .css-content').append('<div id="addCSS"><a>Add</a></div>');
                }

                $('div#addCSS').click(function() {
                    $('#changeCSScustom .css-content div.property:not(.sample)').each(function() {
                        $(this).find('.value').click();
                    });
                    var temp = $(this).siblings('.sample').clone().removeClass('sample').insertBefore($(this)).show();
                    temp.find('*').addClass('customCSS');
                    temp.find('.flag').html(1).end().find('.name').html('<span class="custom-name"></span><input class="custom-input hidden" placeholder="property" type="text">').end().find('.value').click().end().find('.custom-input').focus();
                });

                $('div.property:not(.sample) a.edit:not(.colorCSS), div.property:not(.sample) span.value:not(.colorCSS)').die().live('click', function() {
                    var Obj = {};
                    var $property = $(this).parents('.property').addClass('edit');
                    $property.find('input').focus().end().siblings().removeClass('edit').end().siblings(':not(#addCSS)').each(function() {
                        // close all other input elements
                        var $this = $(this);
                        if (($this.find('.value-input').children().val() != $this.find('.original-value').html()) || $this.find('.value').hasClass('customCSS')) {
                            if ($this.find('.name').hasClass('colorCSS')) {
                                var color = VWOEditor.getJPickerColorObject($this.find('.value-input').children().val());
                                color = $.jPicker.ColorMethods.rgbaToHex(color);
                                if ($.trim('#' + color.substr(0, 6)) != $.trim($this.find('.original-value').text())) {
                                    $this.find('.flag').html(1);
                                } else {
                                    $this.find('.flag').html(0);
                                }
                            } else {
                                $this.find('.flag').html(1);
                            }
                            if ($this.find('.value').hasClass('customCSS')) {
                                var val = $this.find('span.name').find('.custom-input').val();
                                if (val == '') {
                                    $this.remove();
                                } else {
                                    $this.find('span.name').find('.custom-name').html(val);
                                    if ($this.find('.custom-input').is(':visible')) {
                                        $this.find('.custom-input').hide();
                                        $this.find('.custom-name').show();
                                    }
                                    $this.find('.value').html(VWOEditor.getValue($this.find('.value-input').children().val())).show();
                                    if ($this.find('.picker').find('table.jPicker').length > 0) {
                                        $this.find('.picker').find('table.jPicker').find('.Ok').click();
                                    }
                                    Obj[$this.find('span.name').find('.custom-name').html()] = $.trim($this.find('span.value').text());
                                }
                            } else {
                                $this.find('.value').html(VWOEditor.getValue($this.find('.value-input').children().val())).show();
                                if ($this.find('.picker').find('table.jPicker').length > 0) {
                                    $this.find('.picker').find('table.jPicker').find('.Ok').click();
                                }
                                Obj[$this.find('span.name').html()] = $.trim($this.find('span.value').text());
                            }
                        } else {
                            $this.find('.flag').html(0).end().find('.value-input').children().val($this.find('.original-value').html()).end().find('.value').html(VWOEditor.getValue($this.find('.original-value').html())).show();
                            if ($this.find('.picker').find('table.jPicker').length > 0) {
                                $this.find('.picker').find('table.jPicker').find('.Cancel').click();
                            }
                        }
                        $this.find('.picker').find('table.jPicker').remove();
                    });
                    self.update(Obj);
                    if ($(this).hasClass('customCSS')) {
                        $property.find('.custom-input, .custom-name').toggle();
                    }
                });

                $('div.property:not(.sample) a.cancel').die().live('click', function(e) {
                    var Obj = {};
                    var $property = $(this).parents('.property').removeClass('edit');
                    if ($(this).hasClass('customCSS')) {
                        $property.remove();
                    } else {
                        $property.find('.flag').html(0).end().find('.value-input').children().val($.trim($property.find('span.original-value').text()));
                        Obj[$property.find('span.name').html()] = $.trim($property.find('span.original-value').text());
                    }
                    divCSS.find('div[id^="changeCSS"] div.css-content div:not(.sample) span.flag').each(function() {
                        if ($(this).html() == 1) {
                            if ($(this).hasClass('customCSS')) {
                                Obj[$(this).siblings('span.name').find('.custom-name').html()] = $.trim(VWOEditor.getValue($(this).siblings('.value-input').children().val()));
                            } else {
                                Obj[$(this).siblings('span.name').html()] = $.trim(VWOEditor.getValue($(this).siblings('.value-input').children().val()));
                            }
                        }
                    });
                    VWOEditor.el.applyControlForOp({
                        opName: 'changeCSS'
                    });
                    self.update(Obj);
                    e.stopPropagation();
                });

                $('div.property:not(.sample) a.save').die().live('click', function(e) {
                    var Obj = {};
                    var $property = $(this).parents('.property').removeClass('edit');
                    $property.find('.flag').html(1);
                    if ($(this).hasClass('customCSS')) {
                        var val = $property.find('span.name').children('.custom-input').val();
                        $property.find('.custom-name').html(val).show().end().find('.custom-input').hide();
                    }
                    $property.find('span.value').html($.trim(VWOEditor.getValue($property.find('.value-input').children().val())));
                    if ($(this).hasClass('customCSS')) {
                        Obj[$property.find('span.name').find('.custom-name').html()] = $.trim(VWOEditor.getValue($property.find('.value-input').children().val()));
                    } else {
                        Obj[$property.find('span.name').html()] = $.trim(VWOEditor.getValue($property.find('.value-input').children().val()));
                    }
                    self.update(Obj);
                    e.stopPropagation();
                });

                $('div.property:not(.sample) span.value-input').die().live('keyup', function(e) {
                    // Live Update of EditCSS
                    var Obj = {}, field;
                    divCSS.find('div[id^="changeCSS"] div.css-content div.property:not(.sample)').each(function() {
                        var $this = $(this);
                        if ($this.find('.flag').html() == 1) {
                            field = $this.find('span.name').html();
                            if ($this.find('span.value-input').hasClass('customCSS')) {
                                field = $this.find('span.name').find('.custom-input').val();
                            }
                            Obj[field] = $this.find('span.value-input').children().val();
                            $.when(VWOEditor.el.jq.css(field), field).then(function(v, field) {
                                if (field == 'background-image') {
                                    v = (/url\(/.test(v) ? 'url("' + absolutizeURI(v, VWOEditor.vwo_document_real_url, VWOEditor.frameLocation) + '")' : v);
                                }
                                if (VWOEditor.el.control.changeCSS[field] == undefined) {
                                    VWOEditor.el.control.changeCSS[field] = $.trim(v);
                                }
                            });
                        }
                    });

                    field = $(this).siblings('span.name').html();
                    if ($(this).hasClass('customCSS')) {
                        field = $(this).siblings('span.name').find('.custom-input').val();
                    }
                    var that = this;
                    $.when(VWOEditor.el.jq.css(field), field).then(function(v, field) {
                        if (field == 'background-image') {
                            v = (/url\(/.test(v) ? 'url("' + absolutizeURI(v, VWOEditor.vwo_document_real_url, VWOEditor.frameLocation) + '")' : v);
                        }
                        Obj[field] = $(that).children().val();
                        if (VWOEditor.el.control.changeCSS[field] == undefined) {
                            VWOEditor.el.control.changeCSS[field] = $.trim(v);
                        }
                        self.update(Obj);
                    });
                    e.stopPropagation();
                }).live('keypress', function(e) {
                    if (e.keyCode == 13) {
                        $(this).parents('.property').find('.save').click();
                    }
                    e.stopPropagation();
                });

                $('.customCSS .custom-input').die().live('keyup', function(e) {
                    var Obj = {};
                    var $property = $(this).parents('.property');
                    if ($(this).val() != '' && $property.find('.value-input').children().val() != '') {
                        Obj[$(this).siblings('.custom-name').html()] = '';
                        VWOEditor.el.changes.changeCSS[$(this).siblings('.custom-name').html()] = VWOEditor.el.control.changeCSS[$(this).siblings('.custom-name').html()];
                        self.update(Obj);
                        $property.find('.value-input').keyup();
                    }
                    e.stopPropagation();
                });

                $('span.value.colorCSS').each(function() {
                    var temp = $(this).parents('.property');
                    var color = temp.find('.value-input').children().val();
                    $('div.property:not(.sample) .colorCSS .value-input').children().val(color);
                    //If color is already a hex string.
                    if (typeof color === 'string' && color.indexOf('#') == 0) {
                        temp.find('.value, .original-value').html('<span class="show-color" style="background:' + color.substr(0, 7) + ';"></span> ' + color.substr(0, 7));
                    } else {
                        var colorObj = VWOEditor.getJPickerColorObject(color);
                        if (colorObj == 'transparent' || colorObj.a == 0) {
                            color = '00000000';
                            temp.find('.value, .original-value').html('<span class="show-color transparent" style="background:transparent;"></span>&nbsp;transparent');
                        } else {
                            temp.find('.value, .original-value').html('<span class="show-color" style="background:' + color + ';"></span>' + color);
                        }
                    }
                    temp.find('span.value').after('<span class="picker"></span>');
                });

                $('span.value.colorCSS').die().live('click', function(e) {
                    // Live Query Color Picker Functionality
                    var self_temp = $(this);
                    self_temp.parents('.css-content').find('div.property:not(.sample)').each(function() {
                        if ($(this).find('.value-input').is(':visible')) {
                            $(this).find('.save').click();
                        }
                        if ($(this).find('.picker').find('table.jPicker').length > 0) {
                            $(this).find('.picker').find('table.jPicker').find('.Ok').click();
                        }
                    });

                    self_temp.siblings('.picker').jPicker({
                        color: {
                            active: new $.jPicker.Color({
                                ahex: VWOEditor.getColor(self_temp)
                            })
                        }
                    }, function(color) {
                        // Commit Call back
                        var all = color.val('all');
                        var clr, transparentColor = clr = all && '#' + all.ahex || 'transparent';
                        if (clr != 'transparent') {
                            if (all.a == 255) {
                                clr = 'rgb(' + all.r + ',' + all.g + ',' + all.b + ')';
                                transparentColor = '#' + VWOEditor.hex(all.r) + VWOEditor.hex(all.g) + VWOEditor.hex(all.b);
                            } else {
                                // Alpha Value returned by jPicker is between 0-255. To get the correct value, alpha value has been divided by 255.
                                transparentColor = clr = 'rgba(' + all.r + ',' + all.g + ',' + all.b + ',' + parseFloat((all.a / 255).toFixed(2)) + ')';
                            }
                        }

                        VWOEditor.el.jq.css(self_temp.siblings('span.name').html(), clr);
                        self_temp.html('<span class="show-color' + (clr == 'transparent' ? ' transparent' : '') + '" style="background:' + transparentColor + ';"></span> ' + transparentColor);
                        self_temp.siblings('.value-input').children().val(clr);
                        if (self_temp.siblings('.original-value').html() != self_temp.html()) {
                            self_temp.siblings('.flag').html(1);
                        } else {
                            self_temp.siblings('.flag').html(0);
                        }
                        self_temp.siblings('.picker').find('table.jPicker').remove();
                    }, function(color) {
                        // Live Call back
                        var Obj = {}
                          , all = color.val('all');
                        var clr = all && '#' + all.ahex || 'transparent';
                        if (clr != 'transparent') {
                            if (all.a == 255) {
                                clr = '#' + VWOEditor.hex(all.r) + VWOEditor.hex(all.g) + VWOEditor.hex(all.b);
                            } else {
                                clr = 'rgba(' + all.r + ',' + all.g + ',' + all.b + ',' + parseFloat((all.a / 255).toFixed(2)) + ')';
                            }
                        }
                        if (VWOEditor.el.control.changeCSS[self_temp.siblings('span.name').html()] === undefined) {
                            VWOEditor.el.jq.css(self_temp.siblings('span.name').html()).then(function(css) {
                                VWOEditor.el.control.changeCSS[self_temp.siblings('span.name').html()] = $.trim(css);
                            });
                        }
                        Obj[self_temp.siblings('span.name').html()] = clr;
                        self.update(Obj);
                        self_temp.html('<span class="show-color' + (clr == 'transparent' ? ' transparent' : '') + '" style = "background:' + clr + ';"></span> ' + clr);
                    }, function() {
                        self_temp.siblings('.picker').find('table.jPicker').remove();
                    });
                    e.stopPropagation();
                });

                $('div.property:not(.sample)').find('a.edit.colorCSS').live('click', function(e) {
                    $(this).parent().siblings('span.value').click();
                    e.stopPropagation();
                });
                divCSS.find('.sample').hide().end().find('.row .css-heading').click(function() {
                    var $this = $(this);
                    divCSS.find('.css-heading').each(function() {
                        $(this).removeClass('bold open');
                        $(this).siblings('.css-content').find('div.property:not(.sample)').each(function() {
                            if ($(this).find('.name').hasClass('customCSS') && $(this).find('.name').find('.custom-input').val() == '') {
                                $(this).remove();
                            }
                            if ($(this).find('.value-input').is(':visible')) {
                                $(this).find('.save').click();
                            }
                            if ($(this).find('.picker').find('table.jPicker').length > 0) {
                                $(this).find('.picker').find('table.jPicker').find('.Ok').click();
                            }
                        });
                    });
                    $this.addClass('bold open');
                    if ($this.next('.css-content').is(':not(:visible)')) {
                        divCSS.find('.css-content').slideUp(250);
                        $this.next('.css-content').slideToggle(250, function() {
                            $('#vwo-contextual-box').gravitize($('body'), VWOEditor.el.jq, VWOEditor.el.x, VWOEditor.el.y);
                        });
                    }
                });
                divCSS.find('div[id^="changeCSS"]:eq(0) .css-heading').click();
            },

            updateCSS: function(el) {
                var cssObj = {}, def;
                $('#vwo-menu-change-css-content div[id^="changeCSS"] div.css-content div:not(.sample)').each(function() {
                    var $property = $(this);
                    if ($property.find('.name').hasClass('customCSS') && $property.find('.name').find('.custom-input').val() == '') {
                        $property.remove();
                    }
                    if ($property.find('.value-input').is(':visible')) {
                        $property.find('.save').click();
                    }
                    if ($property.find('.picker').find('table.jPicker').length > 0) {
                        $property.find('.picker').find('table.jPicker').find('.Ok').click();
                    }

                    if ($property.find('.flag').html() == 1) {
                        if ($property.find('span.name').hasClass('customCSS')) {
                            cssObj[$property.find('span.name').find('.custom-name').html()] = $.trim($property.find('.value').text());
                        } else {
                            cssObj[$property.find('span.name').html()] = $.trim($property.find('span.value').text());
                            if ($.trim($property.find('span.name').html()) == 'visibility' && $.trim($property.find('span.value').text()) == 'visible') {
                                def = el.removeOp('visibility');
                            }
                        }
                    }
                });

                el.tempChanges[this.name] = cssObj;

                return def;
            },

            persist: function(el) {
                var self = this
                  , args = [].slice.call(arguments);
                el = el || this.el || VWOEditor.el;
                $.when(this.updateCSS(el)).then(function() {
                    if (el && el.tempChanges && el.tempChanges.changeCSS && el.tempChanges.changeCSS['background-image']) {
                        // valid background image has a 3-4 character extension
                        if (/\..{3,4}$/.test(el.tempChanges.changeCSS['background-image'])) {
                            el.tempChanges.changeCSS['background-image'] = 'url(\'' + el.tempChanges.changeCSS['background-image'] + '\')';
                        }
                    }

                    baseOperation.persist.apply(self, args);
                });
            }
        },
        childFrame: {
            getControl: function(jq, el, propList) {
                if (!propList || !propList.length) {
                    return {};
                }

                el.control.changeCSS = el.control.changeCSS || {};

                for (var i = propList.length; i--; ) {
                    if (el.control[this.name][propList[i]] !== undefined) {
                        propList.splice(i, 1);
                    }
                }

                return jq.getStyleValues(propList);
            },

            applyChanges: function(jq, changes) {
                utils.applyCssChanges(jq, changes);
            }
        }
    });
    return frameContext.registerService('changeCSSOperation', changeCSSOperation);
});

define('designer/operations/ContentOperation', ['designer/FrameContext', 'designer/operations/BaseOperation', 'designer/MarkupCleaner', 'jQuery-1-6-4'], function(frameContext, baseOperation, markupCleaner, $) {
    'use strict';

    /* jshint -W106 */
    /* jshint -W013 */

    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : $;
    var contentOperation = $.extend(true, {}, frameContext.serviceDefinitions.baseOperation, {
        name: 'content',
        type: 'content',
        title: 'Edit',
        parentFrame: {
            /**
			 * Initialize the operation for given element. If the element is not
			 * provided, it is picked from VWOEditor.el.
			 * @param el {VWOElement} The element we are trying to apply the operation on.
			 */
            initialize: function initialize(el, editor) {
                el = el || VWOEditor.el;
                this.editor = editor || 'codemirror';

                // set current op on el.
                // todo: ideally this should be unnecessary.
                el.currentOp = this.name;

                baseOperation.initialize.apply(this);

                var self = this;
                //HACK:  Keep only the last intance(there shouldn't be multiple instances at any time)
                //Donot remove Edit Code's js and css mirrors.
                var filterFnc = function(index, mirror) {
                    return (mirror === $('#js-code-mirror-js-wrapper .CodeMirror')[0] || mirror === $('#js-code-mirror-css-wrapper .CodeMirror')[0]);
                };

                if (editor === 'codemirror') {
                    //Get code mirror that doesn't relate to code mirror
                    var $codeMirrorWindowsToClose = $('.CodeMirror').not(filterFnc);
                    if ($codeMirrorWindowsToClose.length > 1) {
                        //Remove first instance
                        $codeMirrorWindowsToClose.eq(0).remove();
                    }
                }

                $.when(el.jq.outerHTML(), this.childFrame.saveControl(el)).then(function(outerHTML, updatedEl) {
                    $.extend(true, el, updatedEl);

                    if (el.tag === 'HEAD') {
                        self.initEditor(editor, el.changes.content || el.control.content);
                    } else {
                        // FIXME: Fallback to outerHTML in below stmt. doesn't makes sense.
                        var content = outerHTML || el.changes.content || el.control.content;

                        // If this is an old edit op when siblings could have been added, we still need to
                        // show the html with siblings so that he know what was before and also sees an error along
                        // with it.
                        if (el.changes.content && !self.isEditOperationHtmlValid(el.control.content, el.changes.content, el.parentTagName)) {
                            content = el.changes.content;
                        }

                        // if html isn't available in changes or control, outerHTML is cleaned and
                        // returned by cleanContent
                        el.jq.cleanContent(el.elClass, content).then(function(cleanedHTML) {
                            el.editHtmlControl = cleanedHTML;
                            self.initEditor(editor, cleanedHTML);
                        });
                    }
                });
            },

            /**
			 * Checks if the given HTML string has more than one root elements or if tag was changed.
			 * @param  {string} control  Control html string
			 * @param  {string} html     HTML string
			 * @return {bool}            True if all isgood. false otherwise.
			 */
            isEditOperationHtmlValid: function(control, html, parentTagName) {
                var wrapNode = document.createElement(parentTagName || 'div');

                wrapNode.innerHTML = html;
                var initialTagName = control.match(/<(\w+)/);
                initialTagName = initialTagName ? initialTagName[1] : '';
                var newTagName = wrapNode.children[0].tagName || '';
                newTagName = newTagName.toLowerCase();

                // Check user is trying to add siblings to the element being edited or change tag name.
                return !((wrapNode && wrapNode.children.length > 1) || newTagName !== initialTagName);
            },

            update: function(params) {
                var el = VWOEditor.el;
                var readyToApplyOpPromise = $.Deferred();
                var self = this;

                if (el.tag === 'HEAD') {
                    return;
                }
                if (params === '') {
                    el.jq.hide();
                    return;
                }

                $.when(el.jq.outerHTML(), el.parentTagName || el.jq.parent().attr('tagName')).then(function(outerHTML, parentTagName) {
                    var formatedContent;

                    // cache parent tagname
                    el.parentTagName = parentTagName;

                    // clean and format the content.
                    formatedContent = markupCleaner.formatContent(params, el.elClass, el.tag === 'HEAD' ? 'DIV' : parentTagName);

                    if (self.isEditOperationHtmlValid(el.control.content, formatedContent, el.parentTagName)) {
                        $('.js-edit-sibling-warning').removeClass('show');
                        $('#vwo-menu-edit-html-footer .save-btn, #vwo-menu-edit-footer .save-btn').removeClass('disabled');
                    } else {
                        // Track this error only when html becomes invalid first time after being valid.
                        if (!$('.js-edit-sibling-warning').hasClass('show')) {
                            window.editor.sendGaTrackingEvent('add-invalid-html');
                        }
                        // If not valid, show error msg and disable save btn
                        $('.js-edit-sibling-warning').addClass('show');
                        $('#vwo-menu-edit-html-footer .save-btn, #vwo-menu-edit-footer .save-btn').addClass('disabled');
                        readyToApplyOpPromise.reject();
                        return;
                    }

                    // if the input is the same as the string itself or nothing at all, y bother?
                    if (markupCleaner.cleanAndStrip(outerHTML, parentTagName, el.elClass) === markupCleaner.cleanAndStrip(params, parentTagName, el.elClass) || formatedContent === '') {
                        readyToApplyOpPromise.reject();
                        return;
                    } else {
                        readyToApplyOpPromise.resolve();
                    }
                });

                el.tempChanges[self.name] = params;

                readyToApplyOpPromise.then(function() {
                    self.childFrame.apply(el, null, params);
                });
            },

            activate: function() {
                // hack: always show help to avoid race condition
                $('#vwo-menu-edit-html-content .vwo-edit-help').show();

                baseOperation.activate.apply(this);
            },

            initEditor: function(editor, html) {
                if (editor === 'codemirror') {
                    this.initCodemirror(html);
                }
            },

            initCodemirror: function(html) {
                this.editor = 'codemirror';

                VWOEditor.mirror.setValue(html);
                VWOEditor.mirror.clearHistory();
                VWOEditor.mirror.setOption('lineWrapping', localStorage.getItem('wrapEditHTMLCode') === 'true');
                VWOEditor.mirror.refresh();
                setTimeout(function() {
                    VWOEditor.mirror.refresh();
                }, 100);
                VWOEditor.mirror.focus();
            },

            persist: function(el) {
                el = el || VWOEditor.el;
                var addJavaScriptCSSOperation = frameContext.services.addJavaScriptCSSOperation;

                if (el.tag === 'HEAD' && this !== addJavaScriptCSSOperation) {
                    return addJavaScriptCSSOperation.persist(el);
                }

                // hack
                el.currentOp = this.name;

                if (el.insertJSAPIUsed) {
                    VWOEditor.controllerScope.trackSegmentEvent(VWOEditor.controllerScope.SegmentAnalyticsEnum.OPERATIONS.INSERT_JS_API_USED);
                    el.insertJSAPIUsed = false;
                }

                var promise;

                // Only when no save button is in disabled form, we end the current operation.
                // Eg. While doing Edit, the save btn might be in disabled form in case of invalid html
                if (!$('.context-menu-footer:visible .save-btn').hasClass('disabled')) {
                    promise = el.endOperation({
                        content: VWOEditor.mirror.getValue(),
                        sourceEditor: 'codeMirror'
                    }).then(VWOEditor.close.bind(VWOEditor));
                    this.deactivate();
                } else {
                    $('#vwo-contextual-box').addClass('anim-shake');
                    setTimeout(function() {
                        $('#vwo-contextual-box').removeClass('anim-shake');
                    }, 1000);
                    promise = $.Deferred();
                    promise.reject();
                }

                return promise;
            }
        },
        childFrame: {
            // Fetch the control values for this edit operation.
            getControl: function getControl(jq, el) {
                var addJavaScriptCSSOperation = frameContext.services.addJavaScriptCSSOperation;

                // hack: delegate HEAD get control to add js/css operation
                if (jq.attr('tagName') === 'HEAD') {
                    return addJavaScriptCSSOperation.getControl(jq, el);
                }

                if (!jq.get(0)) {
                    return null;
                }
                return jq.cleanContent(el.elClass, jq.outerHTML());
            },

            // Actually applies the edit operation by doing some hocus focus and finally calling jq.replaceWith().
            applyChanges: function applyChanges(jq, changes, isControl, el) {
                var addJavaScriptCSSOperation = frameContext.services.addJavaScriptCSSOperation;

                // hack: delegate head edits to add js/css operation
                if (jq.attr('tagName') === 'HEAD') {
                    return addJavaScriptCSSOperation.applyChanges(jq, changes, isControl, el);
                }

                if (!jq.length) {
                    return;
                }

                // for custom js/css ops
                if (jq.length && jq.get(0).tagName === 'HEAD') {
                    // remove all content with vwo_var in it, and only append the content...
                    jq.find('.vwo_variation').remove();
                    jq.append(markupCleaner.formatContent(changes, 'vwo_variation'));
                    return;
                }

                // s = tempContainer
                var tempContainer = document.createElement(jq.parent().get(0).tagName);

                // todo: standardize these functions
                tempContainer.innerHTML = markupCleaner.formatContent(jq.cleanContent(el.elClass, changes), el.elClass, jq.parent().get(0).tagName);

                // remove all elements that were created with the target element
                // todo: move this to utils/standardize
                $('[class*=vwo_group_' + el.elClass.replace(/vwo_/, '') + ']').remove();

                this._executeScripts(tempContainer);

                // replace this element with first child of the tempContainer
                jq.each(function eachCallback() {
                    this.parentNode.replaceChild(tempContainer.childNodes[0].cloneNode(true), this);
                });
                tempContainer.removeChild(tempContainer.childNodes[0]);

                jq = $('.' + el.elClass);

                // Add each childnode in reverse order to get the desired order finally.
                // todo: test this
                jq.each(function() {
                    for (var i = tempContainer.childNodes.length; i--; ) {
                        this.parentNode.insertBefore(tempContainer.childNodes[i].cloneNode(true), this.nextSibling);
                    }
                });
            },

            /**
			 * Executes all scripts in the given container node by appending it to the document head and
			 * then removing it.
			 *
			 * @param  {HTMLElement} containerNode The node in which the script tags should be executed.
			 */
            _executeScripts: function(containerNode) {
                var script, elem, data, i, head = document.getElementsByTagName('head')[0] || document.documentElement;
                for (i = 0; i < containerNode.childNodes.length; i++) {
                    if (containerNode.childNodes[i].tagName === 'SCRIPT') {
                        script = document.createElement('script');
                        elem = containerNode.childNodes[i];
                        data = (elem.text || elem.textContent || elem.innerHTML || '');

                        try {
                            script.appendChild(document.createTextNode(data));
                        } catch (e) {
                            script.text = data;
                        }
                        head.insertBefore(script, head.firstChild);
                        head.removeChild(script);
                    }
                }
            }
        }
    });
    return frameContext.registerService('contentOperation', contentOperation);
});

define('designer/operations/LegacyRearrangeOperation', ['designer/FrameContext', 'designer/operations/BaseOperation', 'designer/ElementManager'], function(frameContext) {
    'use strict';

    /* eslint camelcase: "off" */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;

    /* global vwoe_$: false */

    var legacyRearrangeOperation = $.extend(true, {}, frameContext.serviceDefinitions.baseOperation, {
        name: 'rearrange',
        type: 'rearrange',
        title: 'sort',

        childFrame: {
            getControl: function(jq) {
                return jq.prevNextAppend();
            },

            applyChanges: function(jq, changes) {
                var me = jq.get(0)
                  , current = jq.parent().children().index(me)
                  , node = jq.parent().children().eq(changes.index).get(0);
                if (changes.index < current) {
                    node.parentNode.insertBefore(me, node);
                } else if (changes.index > current) {
                    node.parentNode.insertBefore(me, node.nextSibling);
                }
                // this hack forces chrome to redraw tables. Chrome distorts tables without this
                vwoe_$(me).parent().fadeOut(1, function() {
                    vwoe_$(this).show();
                });
            }
        }
    });
    return frameContext.registerService('legacyRearrangeOperation', legacyRearrangeOperation);
});

define('designer/operations/AddJavaScriptCSSOperation', ['designer/FrameContext', 'designer/operations/ContentOperation', 'designer/operations/BaseOperation', 'designer/MarkupCleaner'], function(frameContext, contentOperation, baseOperation, markupCleaner) {
    'use strict';

    /* jshint -W106 */
    /* jshint -W013 */
    /* global vwoe_$, VWOInjected, VWOElement, request, showCombiLimitExceedMessage */

    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;

    // This check if the operation is already initialized. This is to prevent multiple initializations.
    var isInitialized = false;

    var addJavaScriptCSSOperation = $.extend(true, {}, frameContext.serviceDefinitions.contentOperation, {
        name: 'content',
        type: 'content',
        title: 'Add JavaScript/CSS',

        parentFrame: {
            initialize: function initialize() {
                if (!isInitialized) {
                    var self = this;
                    isInitialized = true;

                    VWOEditor.totalCombinations = VWOEditor.getTotalCombinationsWhenSectionIsAdded();
                    if (VWOEditor.isCombiLimitExceeded(VWOEditor.totalCombinations)) {
                        showCombiLimitExceedMessage(VWOEditor.totalCombinations, true);
                        return;
                    }
                    var el = VWOEditor.el;
                    if (!el) {
                        el = VWOEditor.findElement(vwoe_$('head'));
                    }
                    VWOEditor.dragX = 0;
                    VWOEditor.dragY = 0;
                    $.when(el).then(function(el) {
                        if (VWOEditor.type !== 'browse' && VWOEditor.selecting) {
                            if (!el || VWOEditor.test !== 'ab') {
                                el = new VWOElement('HEAD');
                            } else {
                                el = el.copy();
                                el.jq = vwoe_$('.' + el.elClass);
                            }
                        }
                        el.jq.shimmy().shimmy().shimmy();
                        vwoe_$('._vwo_glass').unbind('click').click(function() {
                            VWOInjected.request('VWOEditor.resetEditor');
                        });
                        VWOEditor.selecting = false;
                        request('VWOInjected.setProperty', 'VWOInjected.selecting', false);

                        // we have a head element. show the editor
                        VWOEditor.el = el;
                        VWOEditor.showMenu(null, null, null, true);

                        $('#vwo-contextual-box #insert_jsapi_button').hide();
                        //hide insert jsapi button

                        $('#vwo-contextual-box #insert_jsapi_button').data('edithead', 1);

                        $('#vwo-menu-edit-html-content .vwo-addjscss-help').show();

                        contentOperation.initialize.call(self, VWOEditor.el, 'codemirror');
                    });
                }

            },

            activate: baseOperation.activate,

            initEditor: function(editor, html) {
                var mirror = VWOEditor.mirror;
                mirror.setValue(html ? html : '');
                $('#vwo-contextual-menu').VWOContextMenu('openContent', 'vwo-menu-edit-html', 'Insert JavaScript/CSS', $('#vwo-contextual-menu'));
                mirror.refresh();
            },

            deactivate: function() {
                isInitialized = false;
                baseOperation.deactivate.call(this);
            }
        },
        childFrame: {
            getControl: function() {
                return ('<script type="text/javascript">\n' + '/* You can use inline Javascript or JQuery (as shorthand vwo_$) or link to an external' + ' JavaScript file using "src" attribute */\n' + '<\/script>\n' + '<style>\n' + '/* Write inline styling here or link to an external stylesheet using link tag */\n' + '</style>\n');
            },

            applyChanges: function applyChanges(jq, changes) {
                if (!jq.length) {
                    return;
                }

                // remove all content with vwo_var in it, and only append the content...
                jq.find('.vwo_variation').remove();
                jq.append(markupCleaner.formatContent(changes, 'vwo_variation'));
            }
        }
    });
    return frameContext.registerService('addJavaScriptCSSOperation', addJavaScriptCSSOperation);
});

define('designer/FontFinder', ['designer/FrameContext'], function(frameContext) {
    'use strict';

    /* eslint camelcase: "off" */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;
    /* jshint camelcase: true */
    var VWOInjected = window.VWOInjected;

    var detectedFonts = [];

    /**
	 * Takes an array as input and returns an array with only unique elements from
	 * that array.
	 *
	 * @param  {Array} array The array to find unique elements from.
	 * @return {Array}       An array containing only unique elements from the original
	 *                       array.
	 */
    function arrayUnique(array) {
        if (!(array instanceof Array)) {
            return array;
        }
        var unique = [];
        for (var i = 0; i < array.length; i++) {
            if (unique.indexOf(array[i]) >= 0) {
                continue;
            }
            unique.push(array[i]);
        }
        return unique;
    }

    /**
	 * Returns a list of properly title-cased font names from a font family string.
	 *
	 * @param  {String}   fontFamily The font family string to parse.
	 * @return {String[]}            Returns an array of strings each of which correspond
	 *                               to individual font names picked up from the font-family.
	 *
	 * @example
	 *     getFontsFromFontFamily('\'Helvetica Neue\', "Lucida grande", helvetica, arial, sans-serif');
	 *     => ['Helvetica Neue', 'Lucida Grande', 'Helvetica', 'Arial', 'Sans-Serif']
	 */
    function getFontsFromFontFamily(fontFamily) {
        fontFamily = fontFamily || '';
        return fontFamily.split(',').map(function(fontName) {
            fontName = fontName.trim().replace(/^['"]|['"]$/g, '');
            if (/^(serif|sans-serif|monospace)$/.test(fontName)) {
                return fontName;
            }

            return fontName.replace(/(?:^|\s|-)\S/g, function(c) {
                return c.toUpperCase();
            });
        }).filter(function(fontName) {
            return !/^(auto|inherit)$/.test(fontName);
        });
    }

    function getCSSRules(styleSheet) {
        try {
            return styleSheet.cssRules;
        } catch (e) {
            return;
        }
    }

    /**
	 * Scans all css rules in all stylesheets of the current document and returns
	 * a list of font names discovered by this method.
	 *
	 * @param  {HTMLDocument} document The document on which styleSheets should be searched for.
	 * @return {String[]}              Returns a list of fonts discovered.
	 */
    function findFontsFromCSSRules(document) {
        document = document || window.document;

        var detectedFonts = [];
        var styleSheets = document.styleSheets;
        if (!styleSheets) {
            return [];
        }

        for (var i = 0, il = styleSheets.length; i < il; i++) {
            var cssRules = getCSSRules(styleSheets[i]);
            if (!cssRules) {
                continue;
            }
            for (var j = 0, jl = cssRules.length; j < jl; j++) {
                if (!cssRules[j].style) {
                    continue;
                }
                for (var k = 0, kl = cssRules[j].style.length; k < kl; k++) {
                    var styleName = cssRules[j].style[k];
                    if (styleName === 'font-family') {
                        detectedFonts.push.apply(detectedFonts, getFontsFromFontFamily(cssRules[j].style.getPropertyValue(styleName)));
                    }
                }
            }
        }

        return arrayUnique(detectedFonts);
    }

    /**
	 * Appends all common elements in the DOM and tries ot collect the default fonts used for them.
	 * Removes the inserted elements after the job is done.
	 *
	 * @param  {HTMLDocument} document The document on which common elements should be inserted.
	 * @return {String[]}              Returns a list of fonts discovered.
	 */
    function findFontsFromCommonElements(document) {
        document = document || window.document;

        var commonElementsMarkup = '<address></address>' + '<article></article>' + '<footer></footer>' + '<header></header>' + '<h1></h1>' + '<h2></h2>' + '<h3></h3>' + '<h4></h4>' + '<h5></h5>' + '<h6></h6>' + '<hgroup></hgroup>' + '<nav></nav>' + '<section></section>' +
        '<blockquote></blockquote>' + '<div></div>' + '<ul><li></li></ul>' + '<ol><li></li></ol>' + '<main></main>' + '<ol></ol>' + '<p></p>' + '<pre></pre>' + '<ul></ul>' +
        '<a></a>' + '<abbr></abbr>' + '<b></b>' + '<cite></cite>' + '<code></code>' + '<data></data>' + '<dfn></dfn>' + '<em></em>' + '<i></i>' + '<kbd></kbd>' + '<mark></mark>' + '<q></q>' + '<s></s>' + '<small></small>' + '<span></span>' + '<strong></strong>' + '<sub></sub>' + '<sup></sup>' + '<time></time>' + '<u></u>' + '<var></var>' + '<del></del>' + '<ins></ins>';

        var container = document.createElement('div');
        container.innerHTML = commonElementsMarkup;
        document.body.appendChild(container);
        var detectedFonts = findFontsInNode(container);
        document.body.removeChild(container);
        return detectedFonts;
    }

    /**
	 * Recursively traverses the entire DOM tree (starting with body), and collects
	 * the font names for each of the elements from their computed styles.
	 *
	 * @param  {HTMLDocument} document The document on which fonts should be searched for.
	 * @return {String[]}              Returns a list of fonts discovered.
	 */
    function findFontsByDOMTraversal(document) {
        document = document || window.document;

        return findFontsInNode(document.body);
    }

    /**
	 * Recursively traverses the DOM tree provided in the parameters and collects
	 * the font names for each of its descendants from their computed styles.
	 *
	 * @param  {Node}     node The node to find fonts using.
	 * @return {String[]}      Returns a list of fonts discovered.
	 */
    function findFontsInNode(node) {
        var fontFamily = window.getComputedStyle(node).getPropertyValue('font-family');
        var detectedFonts = getFontsFromFontFamily(fontFamily);
        for (var iteratorNode = node.firstElementChild; iteratorNode; iteratorNode = iteratorNode.nextElementSibling) {
            detectedFonts.push.apply(detectedFonts, findFontsInNode(iteratorNode));
        }
        return arrayUnique(detectedFonts);
    }

    /**
	 * Compares two font families and retuns a boolean indicating if they are equivalent.
	 *
	 * @param  {String}  fontFamilyA Font family string A
	 * @param  {String}  fontFamilyB Font family string B
	 * @return {Boolean}             Returns true if the given font families are equivalent.
	 */
    function compareFontFamilies(fontFamilyA, fontFamilyB) {
        fontFamilyA = fontFamilyA || '';
        fontFamilyB = fontFamilyB || '';

        var fontsA = getFontsFromFontFamily(fontFamilyA.toLowerCase());
        var fontsB = getFontsFromFontFamily(fontFamilyB.toLowerCase());

        return fontsA[0] === fontsB[0];
    }

    var fontFinder = {
        /**
		 * Detects fonts used on a web page by using various methods.
		 *
		 * @return {String[]} Returns a list of fonts discovered sorted alphabetically.
		 */
        detectFonts: function() {
            detectedFonts = arrayUnique([].concat(findFontsFromCSSRules(), findFontsFromCommonElements(), findFontsByDOMTraversal()));
            detectedFonts.sort();
            return detectedFonts;
        },
        /**
		 * Removes all detected fonts.
		 */
        reset: function() {
            detectedFonts.length = 0;
        },

        compareFontFamilies: compareFontFamilies
    };

    // test code
    $.extend(fontFinder, {
        _arrayUnique: arrayUnique,
        _findFontsInNode: findFontsInNode,
        _getFontsFromFontFamily: getFontsFromFontFamily,

        _findFontsFromCSSRules: findFontsFromCSSRules,
        _findFontsFromCommonElements: findFontsFromCommonElements,
        _findFontsByDOMTraversal: findFontsByDOMTraversal,
        _detectedFonts: function() {
            return detectedFonts;
        }
    });

    if (VWOInjected) {
        VWOInjected.fontFinder = fontFinder;
    }

    return fontFinder;
});

define('designer/operations/InlineEditOperation', ['designer/FrameContext', 'designer/operations/ContentOperation', 'designer/operations/BaseOperation', 'designer/FontFinder', 'designer/inject/utils'], function(frameContext, contentOperation, baseOperation, fontFinder, utils) {
    'use strict';

    /* eslint camelcase: "off" */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;
    var vwoe_$ = frameContext.isParentFrame() && window.vwoe_$;

    // List of commands which toggle their values on selection.
    var booleanCommands = ['bold', 'italic', 'underline', 'deleted', 'alignLeft', 'alignCenter', 'alignRight', 'alignJustify', 'orderedList', 'unorderedList'];

    // List of commands which have value
    var valueCommands = ['fontName', 'fontSize', 'color', 'backgroundColor', 'anchorHref', 'containedInAnchor'];

    // Default web-safe fonts
    var defaultFonts = [{
        label: 'Comic Sans MS',
        id: '\'Comic Sans MS\', sans-serif'
    }, {
        label: 'Tahoma',
        id: 'Tahoma, sans-serif'
    }, {
        label: 'Garamond',
        id: 'Garamond, serif'
    }, {
        label: 'Georgia',
        id: 'Georgia, serif'
    }, {
        label: 'Times New Roman',
        id: '\'Times New Roman\', serif'
    }, {
        label: 'Arial Narrow',
        id: '\'Arial Narrow\', sans-serif'
    }, {
        label: 'sans-serif',
        id: 'sans-serif'
    }, {
        label: 'serif',
        id: 'serif'
    }, {
        label: 'monospace',
        id: 'monospace'
    }];

    var getBlankOption = function() {
        return {
            label: '',
            id: ''
        };
    };

    // List of formatting options which are available for now.
    var formattingOptions = [{
        label: '<p>Normal Text<p>',
        id: 'p'
    }, {
        label: '<blockquote>Blockquote</blockquote>',
        id: 'blockquote'
    }, {
        label: '<h1>Heading 1</h1>',
        id: 'h1'
    }, {
        label: '<h2>Heading 2</h2>',
        id: 'h2'
    }, {
        label: '<h3>Heading 3</h3>',
        id: 'h3'
    }, {
        label: '<h4>Heading 4</h4>',
        id: 'h4'
    }, {
        label: '<h5>Heading 5</h5>',
        id: 'h5'
    }, {
        label: '<h6>Heading 6</h6>',
        id: 'h6'
    }];

    var inlineEditOperation = $.extend(true, {}, frameContext.serviceDefinitions.contentOperation, {
        name: 'content',
        type: 'content',
        previousHrefUrl: '',
        previousImgSrc: '',

        parentFrame: {
            fonts: [],
            formattingOptions: formattingOptions,

            fontSizeValues: (function() {
                var arr = [];
                // Font Size Value to be shown in the drop down from: 8 - 100
                for (var i = 8; i <= 100; i++) {
                    arr.push({
                        label: i.toString(),
                        id: i.toString() + 'px'
                    });
                }
                return arr;
            }
            )(),

            // Fetches all available fonts from the child frame and populates the fonts array for dropdown.
            updateFonts: function() {
                var trust = VWOEditor.controllerScope.trustAsHtml;
                var wrapInSpan = function(font) {
                    return trust('<span style="font-family: ' + (font.indexOf(' ') >= 0 ? '\'' + font + '\'' : font) + '">' + font + '</span>');
                };
                var self = this;
                this.childFrame.detectFonts().then(function(detectedFonts) {
                    self.fonts = [];
                    for (var i = 0, il = detectedFonts.length; i < il; i++) {
                        self.fonts.push({
                            label: wrapInSpan(detectedFonts[i]),
                            id: detectedFonts[i],
                            fontName: detectedFonts[i]
                        });
                    }

                    for (var j = 0, jl = defaultFonts.length; j < jl; j++) {
                        if (detectedFonts.indexOf(defaultFonts[j].label) === -1) {
                            self.fonts.push({
                                label: wrapInSpan(defaultFonts[j].label),
                                id: defaultFonts[j].id,
                                fontName: defaultFonts[j].label
                            });
                        }
                    }

                    self.fonts.sort(function(a, b) {
                        if (a.fontName < b.fontName) {
                            return -1;
                        }
                        if (a.fontName > b.fontName) {
                            return 1;
                        }
                        return 0;
                    });
                });
            },

            /**
			 * Initializes an inline edit operation.
			 *
			 * @param  {VWOElement}  el  The element which was selected.
			 */
            initialize: function initialize(el) {

                this.el = el = el || VWOEditor.el;

                this.isActive = true;

                var self = this
                  , d = $.Deferred();

                baseOperation.initialize.call(this);

                // set current op on el.
                // todo: ideally this should be unnecessary.
                el.currentOp = this.name;

                this.el = el;

                el.jq.cleanAndReapplyClass(el.elClass).thenResolve(d);

                this.updateFonts();

                // Reset Undo/Redo States
                this.currentStackIndex = -1;
                this.stack = [];

                return d.then(function() {
                    // save the control
                    $.when(el.jq.outerHTML(), self.childFrame.saveControl(el), el.jq.getBoundingCoordinates()).then(function(outerHTML, updatedEl, boundingCoordinates) {
                        // TODO: Following should be done in base operation itself, not in every operation.
                        // when control is saved in child, it should be updated on this instance
                        // of VWOElement as well. (Since the element would get copied in process
                        // of communication with the child frame.)
                        var content = outerHTML || el.changes.content || el.control.content;
                        $.extend(true, el, updatedEl);
                        el.jq = vwoe_$('.' + el.elClass);

                        el.jq.cleanContent(el.elClass, content).then(function(cleanedHTML) {
                            el.editHtmlControl = cleanedHTML;
                        });

                        setTimeout(function() {
                            var $contextualBox = $('#vwo-contextual-box');
                            var $contextualBoxOffset = $contextualBox.offset();
                            var contextualBoxCoordinates = {
                                top: $contextualBoxOffset.top,
                                left: $contextualBoxOffset.left,
                                right: $contextualBoxOffset.left + $contextualBox.width(),
                                bottom: $contextualBoxOffset.top + $contextualBox.height()
                            };
                            frameContext.services.elementManager.allowPointerEvents(boundingCoordinates, contextualBoxCoordinates);
                        }, 50)

                    });
                    // and delegate the rest of the initialization to the child frame.
                    self.childFrame.initialize(el).then(function() {
                        // hack: after focus is given to redactor, someone in parent frame steals the focus
                        // so set focus again after a timeout
                        // todo: figure out why the parent frame steals the focus
                        setTimeout(function() {
                            self.focusRedactor();
                        }, 200);
                    });

                    // hide the resize and maximize icons
                    $('#vwo-contextual-menu .titlebar .resize, #vwo-contextual-box .ui-resizable-handle').hide();

                    $('body').unbind('focus.redactor').bind('focus.redactor', function() {
                        self.focusRedactor();
                    });
                });
            },

            focusRedactor: function() {
                //$('#test_page').get(0).contentWindow.focus();
                //TODO - Handle for mobile
                //window.top.focus();
                VWOEditor.frame.focus();
                this.childFrame.focusRedactor();
            },

            gravitize: function() {
                $('#vwo-contextual-box').fadeIn('fast').gravitize($('body'), VWOEditor.el.jq, VWOEditor.x, VWOEditor.y);
            },

            stack: [],
            currentStackIndex: -1,

            undo: function() {
                if (!this.isUndoable()) {
                    return;
                }
                this.childFrame.applyState(this.stack[this.currentStackIndex]);
                this.currentStackIndex--;
            },

            redo: function() {
                if (!this.isRedoable()) {
                    return;
                }
                this.childFrame.applyState(this.stack[this.currentStackIndex]);
                this.currentStackIndex++;
            },

            addState: function(html) {
                // todo: check if last state is not same as html
                if (html === this.stack[this.currentStackIndex] && !this.isRedoable()) {
                    return;
                }
                this.stack.splice(++this.currentStackIndex, this.stack.length, html);
            },

            isUndoable: function() {
                return this.currentStackIndex > 0;
            },

            isRedoable: function() {
                return this.currentStackIndex + 1 < this.stack.length;
            },

            // Click handler for options like bold, italic, underline, etc.
            onOptionClick: function(e) {
                // Do not do anything if the click was made on the URL input element.
                if (e.target === $('#js-inline-edit-link-input').get(0)) {
                    return;
                }

                var command = e.target.dataset.formatType;
                if (!command) {
                    // We need to prevent default so that ANCHOR inside the dropdowns don't eat focus.
                    e.preventDefault();
                    return;
                }

                // Execute the command in the child frame and update the formatting modal box values
                inlineEditOperation.childFrame.executeCommand(command);
            },

            /**
			 * This function is for binding the changes to the formatting modal box.
			 *
			 * @param String         command Command name like bold, italic, fontSize etc.
			 * @param Boolean|String status  For boolean commands, a true/false value indicating whether
			 *                               the property should be applied or not.
			 *                               For value commands, the value of that command.
			 */
            setCommandValue: function(command, status) {
                switch (command) {
                case 'fontName':
                    var selectedFont;
                    for (var i = 0, il = this.fonts.length; i < il; i++) {
                        if (fontFinder.compareFontFamilies(status, this.fonts[i].id)) {
                            selectedFont = this.fonts[i].id;
                            break;
                        }
                    }

                    if (!this.fonts[0].id) {
                        this.fonts.shift();
                    }

                    if (!status) {
                        this.fonts.unshift(getBlankOption());
                    }

                    this.selectedFont = selectedFont;
                    break;

                case 'fontSize':
                    if (!this.fontSizeValues[0].id) {
                        this.fontSizeValues.shift();
                    }

                    if (!status) {
                        this.fontSizeValues.unshift(getBlankOption());
                    }

                    this.selectedFontSize = parseInt(status, 10) + 'px';
                    break;

                case 'color':
                    this.selectedColor = status;
                    break;

                case 'backgroundColor':
                    this.selectedBgColor = status;
                    break;

                case 'anchorHref':
                    /*if (status && status.indexOf('/editorProxy') !== -1) {
								status = status.split('/');
								status = status[status.length - 2];
								status = '/' + status + '/';
							}*/
                    this.hrefUrl = utils.getOriginalUrlFromProxyUrl(status);
                    break;

                case 'containedInAnchor':
                    this.containedInAnchor = status;
                    break;

                case 'formatting':
                    // If blank state is already present, this should not be shown to the user in general cases.
                    if (!this.formattingOptions[0].id) {
                        this.formattingOptions.shift();
                    }

                    // If we cannot get any value, we will add the blank state in the formatting options.
                    // This happens when H1, H2 are selected together.
                    if (!status) {
                        this.formattingOptions.unshift(getBlankOption());
                    }

                    this.currentFormatting = status;
                    break;

                default:
                    var $button = $('[data-format-type="' + command + '"]');
                    if (status) {
                        $button.addClass('selected');
                    } else {
                        $button.removeClass('selected');
                    }
                }
            },

            // Handler for click on Insert Link done button.
            onLinkDoneClick: function() {
                this.childFrame.executeCommand('createLink', {
                    url: this.hrefUrl,
                    title: this.linkTitle
                });
            },

            /**
			 * Close the Insert Link dropdown
			 * @param  {String} action What action was performed: discard or done.
			 */
            closeLinkDropdown: function closeLinkDropdown(action) {
                $('#js-inline-edit-link-dropdown').removeClass('open');
                if (action === 'discard') {
                    this.hrefUrl = this.previousHrefUrl;
                    this.digestScope();
                }
            },

            // Close the insert image modal
            closeImageModal: function closeLinkDropdown(action) {
                var self = this;
                if (action === 'discard') {
                    this.childFrame.getPreviousImgSrc().then(function(url) {
                        self.childFrame.restoreImage(url);
                    });
                }
                $('#js-inline-edit-image-modal').removeClass('open');
            },

            // Called from angular on select box change.
            onFontChange: function onFontChange() {
                this.childFrame.executeCommand('fontName', {
                    fontName: this.selectedFont
                });
            },

            // Called from angular on select box change.
            onFontSizeChange: function onFontSizeChange() {
                this.childFrame.executeCommand('fontSize', {
                    fontSize: this.selectedFontSize
                });
            },

            // Called from angular on select box change.
            onFormattingChange: function() {
                this.childFrame.executeCommand('formatting', {
                    tagName: this.currentFormatting
                });
            },

            // override the deactivate function
            deactivate: function() {
                // resize, maximize icon visible by default
                $('body').unbind('focus.redactor');
                $('#vwo-contextual-menu .titlebar .resize, #vwo-contextual-box .ui-resizable-handle').show();
                this.isActive = false;
                baseOperation.deactivate.apply(this);
            },

            // Update the values of this operation in the model (tempChanges)
            update: function(code, outerHTML) {
                baseOperation.update.call(this, code);

                if (outerHTML) {
                    this.addState(outerHTML);
                }

                this.childFrame.updateToggleableCommands();
                this.childFrame.updateBorders();
            },

            // Activate Edit HTML operation.
            editHTML: function() {
                var self = this;
                this.childFrame.getCode().then(function(code) {
                    self.deactivate();
                    contentOperation.activate();
                    contentOperation.initCodemirror(code);
                    $('#vwo-contextual-menu').VWOContextMenu('openContent', 'vwo-menu-edit-html', '', $('#vwo-contextual-menu'));
                });
            },

            // Triggered when any color is selected from the color picker
            onColorSelection: function(obj) {
                if (obj.color) {
                    this.childFrame.executeCommand('color', {
                        color: obj.color
                    });
                }

                if (obj.bgColor) {
                    this.childFrame.executeCommand('backgroundColor', {
                        color: obj.bgColor
                    });
                }
            },

            // This method retains the href current state so that if any update done to the href can be discarded
            storeHrefCurrentState: function() {
                var self = this;
                this.previousHrefUrl = this.hrefUrl;
                this.childFrame.shouldDisableRemoveLink().then(function(value) {
                    self.shouldDisableRemoveLink = value;
                });

                this.childFrame.getAnchorTitle().then(function(title) {
                    self.linkTitle = title;
                    self.digestScope();
                });
            },

            // Handler for remove link button in the insert link modal box
            removeLink: function() {
                this.childFrame.executeCommand('removeLink');
            },

            // shorthand for checking phase and digesting
            digestScope: function() {
                if (!VWOEditor.angularScope.$$phase) {
                    VWOEditor.angularScope.$digest();
                }
            },

            // image uploader handler
            onImageUpload: function(file) {
                var self = this;
                // Since useruploads sends the response before it has written to the file system, hence, the timeout
                setTimeout(function() {
                    self.imageSrc = file;
                    $('#vwo-img-url-inline').val(file);
                    $('#vwo-img-preview-inline').attr('src', file);
                    self.insertImage();
                }, 1000);
            },

            // Inserts the image
            insertImage: function() {
                this.imageSrc = this.imageSrc || $('#vwo-img-url-inline').val();
                this.childFrame.executeCommand('insertImage', {
                    src: this.imageSrc
                });
            },

            // Remove image click handler for image popup
            removeImage: function() {
                this.childFrame.executeCommand('removeImage');
            },

            // Updates the selected image
            updateImage: function() {
                var self = this;
                var documentUrl;

                var imgFrameUrl = '//useruploads.vwo.com/browse.php?account_id=' + window.editor.accountId + '&secret=' + window.editor.aviarySecret;

                $('.js-change-image-iframe').attr('src', imgFrameUrl);
                $('#vwo-img-preview-inline').removeAttr('src');

                this.childFrame.getImageSrc().then(function(imgSrc) {
                    self.imageSrc = imgSrc || '';

                    self.childFrame.getDocumentUrl().then(function(url) {
                        documentUrl = url;

                        if (self.imageSrc) {
                            self.imageSrc = window.absolutizeURI(self.imageSrc, documentUrl, documentUrl);
                            $('#vwo-img-preview-inline').attr('src', self.imageSrc);
                            $('.vwo-img-preview-outline').hide();
                        } else {
                            $('.vwo-img-preview-outline').show();
                            $('#vwo-img-preview-inline').removeAttr('src');
                        }
                        $('#vwo-img-url-inline').val(self.imageSrc);
                        $('#vwo-img-preview-inline').css({
                            'max-width': '200px',
                            'max-height': '150px'
                        });
                        self.digestScope();
                    });
                });
            },

            // save the changes, override handler to destroy redactor before all is done
            persist: function() {
                // Adding the sourceEditor flag so that we can distinguish between content op origin.
                this.el.changes.sourceEditor = 'redactor';
                this.childFrame.destroyRedactor();
                baseOperation.persist.apply(this, [].slice.call(arguments));
                frameContext.services.elementManager.childFrame.destroyListenersForPointerEvents();
            },

            // cancel the changes, override handler to destroy redactor before all is done
            cancel: function() {
                this.childFrame.destroyRedactor();
                baseOperation.cancel.apply(this, [].slice.call(arguments));
                frameContext.services.elementManager.childFrame.destroyListenersForPointerEvents();
            },

            disableLinkOption: function(isParentLink) {
                if (isParentLink) {
                    $('.cmd--link').parent().addClass('disabled');
                } else {
                    $('.cmd--link').parent().removeClass('disabled');
                }
            },

            disableOptionsForInlineEl: function(isInline) {
                if (isInline) {
                    $('a[class*="cmd--align-"], .cmd--unordered-list, .cmd--ordered-list, .cmd--indent, .cmd--outdent, .cmd--formatting-type').parent().addClass('disabled');
                } else {
                    $('a[class*="cmd--align-"], .cmd--unordered-list, .cmd--ordered-list, .cmd--indent, .cmd--outdent, .cmd--formatting-type').parent().removeClass('disabled');
                }
            },

            disableFormattingOptions: function(disableFormat) {
                if (disableFormat) {
                    $('.cmd--formatting-type').parent().addClass('disabled');
                } else {
                    $('.cmd--formatting-type').parent().removeClass('disabled');
                }
            },

            disableOptionsForParagraph: function(disableOptions) {
                if (disableOptions) {
                    $('.cmd--unordered-list, .cmd--ordered-list').parent().addClass('disabled');
                } else {
                    $('.cmd--unordered-list, .cmd--ordered-list').parent().removeClass('disabled');
                }
            }
        },
        childFrame: {
            // a list of detected fonts on this page
            detectedFonts: [],

            /**
			 * Child frame part of the initializations
			 * @param  {VWOElement}  el  The element which was selected.
			 */
            initialize: function initialize(el) {
                var self = this
                  , $node = $('.' + el.elClass);

                if (!$node.length) {
                    return;
                }

                this.el = el;
                this.redactorNode = VWOInjected.redactor_$($node);

                // Paragraphize set false to prevent redactor from converting everything to P
                this.redactorNode.redactor({
                    paragraphize: false,
                    replaceDivs: false,
                    imageEditable: false,
                    toolbar: false,
                    linebreaks: (function() {
                        var selfIsP = self.redactorNode.parents().andSelf().is('p');
                        var selfIsHeader = self.redactorNode.parents().andSelf().is('h1, h2, h3, h4, h5, h6');
                        var selfIsInline = /^(inline|inline-block)$/.test(self.redactorNode.css('display'));
                        return selfIsP || selfIsInline || selfIsHeader;
                    }
                    )(),
                    deniedTags: [],
                    syncCallback: function() {
                        self.parentFrame.update(self.getCode(), self.getOuterHTML());
                    }
                });

                this.redactor = VWOInjected.redactor_$.data(this.redactorNode[0], 'redactor');

                this.focusRedactor();
                this.updateBorders();

                // Hack to handle inline elements for correctly borderifying the element
                if (this.redactorNode.css('display') === 'inline') {
                    this.redactorNode.addClass('redactor-inline-block');
                }

                // Listen for update events.
                //$node.unbind('input.inlineEdit').bind('input.inlineEdit', function onInputChange() {
                //	self.parentFrame.update(self.getCode(), self.getOuterHTML());
                //});

                $node.unbind('mouseup.inlineEdit').bind('mouseup.inlineEdit', function() {
                    self.updateToggleableCommands();
                    self.updateBorders();
                });

                $node.unbind('blur.inlineEdit').bind('blur.inlineEdit', function() {
                    self.saveSelection();
                });

                this.disableEventListeners();

                // Disable Link when parent is link
                this.parentFrame.disableLinkOption(this.redactorNode.parents().is('a'));

                // Hide Block operations for inline elements
                this.parentFrame.disableOptionsForInlineEl(self.redactorNode.css('display') === 'inline');

                this.parentFrame.disableFormattingOptions(self.redactorNode.is('p, blockquote, pre, h1, h2, h3, h4, h5, h6'));

                this.parentFrame.disableOptionsForParagraph(this.redactorNode.parents().is('p') || this.redactorNode.is('p'));
            },

            disableEventListeners: function() {
                if (this.redactorNode.parents().is('a')) {
                    this.redactorNode.parents('a').bind('click.vwo', function(e) {
                        e.preventDefault();
                    });
                }

                this.listenerFn = function(e) {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                }
                ;

                this.redactorNode[0].addEventListener('dragstart', this.listenerFn, true);
                this.redactorNode[0].addEventListener('drop', this.listenerFn, true);
            },

            enableEventListeners: function() {
                if (this.redactorNode.parents().is('a')) {
                    this.redactorNode.parents('a').unbind('click.vwo');
                }

                if (!this.listenerFn) {
                    return;
                }

                this.redactorNode[0].removeEventListener('dragstart', this.listenerFn);
                this.redactorNode[0].removeEventListener('drop', this.listenerFn);

                delete this.listenerFn;
            },

            // Set focus to the damn thing, shorthand
            focusRedactor: function() {
                this.redactorNode.focus();
            },

            // Save selection before executing a command; Redactor is not perfect
            saveSelection: function() {
                if (this.redactor && this.redactor.selection) {
                    this.redactor.selection.removeMarkers();
                    this.redactor.selection.save();
                }
            },

            // do all the cleanup work to destroy this instance of redactor
            destroyRedactor: function() {
                this.enableEventListeners();
                this.redactor.core.destroy();
                delete this.redactorNode;
                delete this.redactor;
            },

            // Redactor's code.get only gets the inner HTML, so this is a wrapper
            // to get the outerHTML as well.
            getCode: function() {
                var code = this.redactor.code.get();
                var openingTag = $(this.redactorNode).openingTagHTML().replace('contenteditable="true"', '').replace(/redactor-[a-z0-9-]*/ig, '').replace(/vwo_[0-9]{13}/ig, '').replace('_vwo_inline_image', '').replace(/class="\s*"/gi, '').replace('dir="ltr"', '');
                var closingTag = $(this.redactorNode).closingTagHTML();
                return openingTag + code + closingTag;
            },

            // Updates borders around an element
            updateBorders: function() {
                this.parentFrame.gravitize();
                $(this.redactorNode).borderify().shimmy();
                $('#_vwo_glass').hide();
            },

            /**
			 * Executes all scripts in the given container node by appending it to the document head and
			 * then removing it.
			 *
			 * @param  {HTMLElement} containerNode The node in which the script tags should be executed.
			 */
            _executeScripts: function(containerNode) {
                var script, elem, data, i, head = document.getElementsByTagName('head')[0] || document.documentElement;
                for (i = 0; i < containerNode.childNodes.length; i++) {
                    if (containerNode.childNodes[i].tagName === 'SCRIPT') {
                        script = document.createElement('script');
                        elem = containerNode.childNodes[i];
                        data = (elem.text || elem.textContent || elem.innerHTML || '');

                        try {
                            script.appendChild(document.createTextNode(data));
                        } catch (e) {
                            script.text = data;
                        }
                        head.insertBefore(script, head.firstChild);
                        head.removeChild(script);
                    }
                }
            },

            // Process the toggleable commands and send their statuses to the parent frame
            // for updating the view.
            updateToggleableCommands: function() {
                // Get selected nodes
                var nodes = this.redactor && this.redactor.selection.getNodes();
                var node = nodes[0];

                var blockNodes = this.redactor && this.redactor.selection.getBlocks();

                if (!node) {
                    node = this.redactorNode.get(0);
                    nodes = $(node);
                }

                if (!blockNodes[0]) {
                    blockNodes = $(this.redactorNode);
                }

                var commandState, i, l;
                var tagName = ''
                  , fontSize = ''
                  , fontName = ''
                  , color = ''
                  , bgColor = '';

                for (i = 0,
                l = booleanCommands.length; i < l; i++) {
                    commandState = this.queryCommandState(node, booleanCommands[i]);
                    this.parentFrame.setCommandValue(booleanCommands[i], commandState);
                }

                for (i = 0,
                l = valueCommands.length; i < l; i++) {
                    commandState = this.queryCommandValue(node, valueCommands[i]);

                    if (!(blockNodes[0] && (valueCommands[i] === 'fontSize' || valueCommands[i] === 'fontName' || valueCommands[i] === 'color' || valueCommands[i] === 'backgroundColor'))) {
                        this.parentFrame.setCommandValue(valueCommands[i], commandState);
                    }
                }

                // Get formatting of the block nodes
                if (blockNodes.length && blockNodes[0]) {
                    // If the formatting of all the block nodes is same as the first element, continue.
                    // Else, return '' since more than one formatting value exists.
                    tagName = blockNodes[0].tagName.toLowerCase();

                    for (i = 1; i < blockNodes.length; i++) {
                        if (blockNodes[i].tagName.toLowerCase() !== tagName) {
                            tagName = '';
                            break;
                        }
                    }
                }

                if (nodes.length && nodes[0]) {
                    fontSize = this.getCommonStyle('font-size', nodes);
                    fontName = this.getCommonStyle('font-family', nodes);
                    color = this.getCommonStyle('color', nodes);
                    bgColor = this.getCommonStyle('background-color', nodes);
                }

                this.parentFrame.setCommandValue('formatting', tagName);
                this.parentFrame.setCommandValue('fontSize', fontSize);
                this.parentFrame.setCommandValue('fontName', fontName);
                this.parentFrame.setCommandValue('color', color);
                this.parentFrame.setCommandValue('backgroundColor', bgColor);

                // race condition
                this.parentFrame.digestScope();
            },

            getCommonStyle: function(property, nodes) {
                var propertyValue = window.getComputedStyle(nodes[0]).getPropertyValue(property);

                for (var i = 1; i < nodes.length; i++) {
                    if (window.getComputedStyle(nodes[i]).getPropertyValue(property) !== propertyValue) {
                        propertyValue = '';
                        break;
                    }
                }

                return propertyValue;
            },

            /**
			 * For boolean commands, this tells whether a command is active or not.
			 *
			 * @param  {Element} node    The node on which the command needs to be queried.
			 * @param  {String}  command A command like bold, italic, etc.
			 * @return {Boolean}         If the command is active, returns true. False, otherwise.
			 */
            queryCommandState: function(node, command) {
                var computed = window.getComputedStyle(node);
                switch (command) {
                case 'bold':
                    var fontWeight = computed.getPropertyValue('font-weight');
                    return fontWeight === 'bold' || fontWeight === 'bolder' || parseInt(fontWeight, 10) >= 700;
                case 'italic':
                    return computed.getPropertyValue('font-style') === 'italic';
                case 'underline':
                case 'deleted':
                    var cssValue = command === 'underline' ? 'underline' : 'line-through';
                    var state = computed.getPropertyValue('text-decoration') === cssValue;
                    if (!state && node.parentNode && node.parentNode.nodeName !== 'BODY') {
                        return this.queryCommandState(node.parentNode, command);
                    }
                    return state;
                case 'alignLeft':
                    return computed.getPropertyValue('text-align') === 'left' || computed.getPropertyValue('text-align') === 'auto';
                case 'alignCenter':
                    return computed.getPropertyValue('text-align') === 'center';
                case 'alignRight':
                    return computed.getPropertyValue('text-align') === 'right';
                case 'alignJustify':
                    return computed.getPropertyValue('text-align') === 'justify';
                case 'orderedList':
                case 'unorderedList':
                    var list = $(node).closest('ol, ul').get(0);
                    return list && list.tagName === (command === 'orderedList' ? 'OL' : 'UL');
                case 'containedInAnchor':
                    return this.redactorNode.parents().is('a');
                }
            },

            /**
			 * For value commands, queries the value of the command. For instance, gets the font family
			 * for the fontName command.
			 *
			 * @param  {Element} node    The node on which the command needs to be queried.
			 * @param  {String}  command A value command like fontName, color, fontSize etc.
			 * @return {String}          A value of the the command.
			 */
            queryCommandValue: function(node, command) {
                switch (command) {
                case 'fontName':
                    return window.getComputedStyle(node).getPropertyValue('font-family');
                case 'fontSize':
                    return window.getComputedStyle(node).getPropertyValue('font-size');
                case 'color':
                    return window.getComputedStyle(node).getPropertyValue('color');
                case 'backgroundColor':
                    return window.getComputedStyle(node).getPropertyValue('background-color');
                case 'anchorHref':
                    return node.getAttribute('href');
                }
            },

            /**
			 * Toggles the state of certain boolean commands. Works for bold, italic, underline
			 * and deleted. If the command is active, deactivates it and vice-versa.
			 *
			 * @param  {String} command Either of bold, italic, underline or deleted.
			 */
            toggleCommand: function(command) {
                if (command === 'bold' || command === 'italic') {
                    var styleUnsetter, relatedTags;

                    switch (command) {
                    case 'bold':
                        styleUnsetter = 'font-weight: normal';
                        relatedTags = 'strong, b';
                        break;
                    case 'italic':
                        styleUnsetter = 'font-style: normal';
                        relatedTags = 'em, i';
                        break;
                    }

                    if (this.redactorNode.closest(relatedTags).length) {
                        this.redactor.inline.format('span', 'style', styleUnsetter);
                    } else {
                        this.redactor.inline.format(command);
                    }
                } else {
                    if (command === 'underline' && this.redactorNode.closest('u').length) {
                        return;
                    }
                    if (command === 'deleted' && this.redactorNode.closest('del').length) {
                        return;
                    }
                    this.redactor.inline.format(command);
                }
            },

            /**
			 * The function that does all the work. Executes a particular command by doing some logic
			 * or delegating work to redactor.
			 *
			 * @param  {String} command The command to be executed. Like bold, italic etc.
			 * @param  {Object} data    Any additional data that may be needed for value commands.
			 */
            executeCommand: function(command, data) {
                var self = this;
                var blocks, nodes;

                // Place focus on redactor node
                self.focusRedactor();

                // Restore the previously saved selection.
                self.redactor.selection.restore();

                switch (command) {
                case 'bold':
                case 'italic':
                case 'underline':
                case 'deleted':
                    this.toggleCommand(command);
                    break;

                case 'alignLeft':
                case 'alignCenter':
                case 'alignRight':
                case 'alignJustify':
                    var alignment = command.replace('align', '').toLowerCase();
                    blocks = self.redactor.selection.getBlocks();
                    var alignSuccessful = false;
                    if (blocks.length && blocks[0]) {
                        blocks.forEach(function(block) {
                            // hack: do not allow redactor to modify stuff outside itself
                            if (self.redactorNode.parents().is(block)) {
                                return;
                            }
                            $(block).css('text-align', alignment);
                            alignSuccessful = true;
                        });
                    }
                    if (!alignSuccessful) {
                        self.redactorNode.css('text-align', alignment);
                    }
                    self.redactor.code.sync();
                    break;

                case 'indentIncrease':
                    blocks = self.redactor.selection.getBlocks();
                    if (blocks.length && blocks[0]) {
                        self.redactor.indent.increase();
                    } else {
                        self.redactorNode.css('margin-left', '+=20px');
                    }
                    break;
                case 'indentDecrease':
                    blocks = self.redactor.selection.getBlocks();

                    if (blocks.length && blocks[0]) {
                        if (parseInt($(blocks[0]).css('margin-left'), 10) <= 0) {
                            break;
                        }
                        self.redactor.indent.decrease();
                    } else {
                        var marginLeft = parseInt(self.redactorNode.css('margin-left'), 10);
                        if (marginLeft <= 0) {
                            break;
                        }
                        self.redactorNode.css('margin-left', '-=20px');
                    }
                    break;
                case 'fontName':
                    this.inlineFormat('font-family', data.fontName);
                    break;
                case 'fontSize':
                    this.inlineFormat('font-size', data.fontSize);
                    break;

                case 'unorderedList':
                case 'orderedList':
                    if (self.redactorNode.is('li')) {
                        var parent = $(self.redactorNode.parent());
                        if (parent.is('ol, ul')) {
                            // hack: chrome crashes miserably if list command is applied to a li tag
                            // so circumvent this by appending a temp div and executing the command on that
                            self.redactor.selection.save();
                            self.redactorNode.removeAttr('contenteditable');
                            self.redactorNode.contents().appendTo('<div class="vwo-list-temp" contenteditable="true"></div>').parent().appendTo(self.redactorNode);
                            self.redactor.selection.restore();
                            self.redactor.list.toggle(command);
                            self.redactorNode.find('.vwo-list-temp').contents().unwrap();
                            self.redactorNode.attr('contenteditable', 'true');
                        }
                        break;
                    }

                    if (self.redactorNode.is('ol')) {
                        if (command !== 'orderedList') {
                            self.saveSelection();
                            $(self.redactorNode).replaceTag('ul');
                            self.initialize(self.el);
                            self.redactor.selection.restore();
                        }
                        break;
                    }

                    if (self.redactorNode.is('ul')) {
                        if (command !== 'unorderedList') {
                            self.saveSelection();
                            $(self.redactorNode).replaceTag('ol');
                            self.initialize(self.el);
                            self.redactor.selection.restore();
                        }
                        break;
                    }

                    self.redactor.list.toggle(command.toLowerCase());
                    break;

                case 'undo':
                    self.redactor.buffer.undo();
                    break;
                case 'redo':
                    self.redactor.buffer.redo();
                    break;

                case 'color':
                    this.inlineFormat('color', data.color);
                    break;
                case 'backgroundColor':
                    this.inlineFormat('background-color', data.color);
                    break;
                case 'createLink':
                    if (self.redactorNode.is('a')) {
                        self.redactorNode.text(data.title || self.redactorNode.text()).attr('href', data.url);
                        self.redactor.code.sync();
                        break;
                    }

                    if (self.redactorNode.closest('a').length) {
                        break;
                    }

                    self.redactor.selection.get();
                    var selectionRange = self.redactor.range;
                    if (selectionRange.collapsed) {
                        // Selection has no text
                        nodes = self.redactor.selection.getNodes();
                        var node = $(nodes[0]).closest('a');
                        if (node.length) {
                            if (data.title && data.title !== node.text()) {
                                node.text(data.title);
                            }
                            node.attr('href', data.url);
                            self.redactor.code.sync();
                        } else {
                            var html = '<a href="' + data.url + '">' + (data.title || data.url) + '</a>';
                            self.redactor.insert.html(html);
                        }
                    } else {
                        self.redactor.link.set(data.title || self.redactor.selection.getText(), data.url);
                    }
                    break;

                case 'removeLink':
                    if (self.redactorNode.is('a')) {
                        self.saveSelection();
                        $(self.redactorNode.get(0)).removeAttr('href').removeAttr('target').replaceTag('span');
                        self.initialize(self.el);
                        self.redactor.selection.restore();
                    } else {
                        self.redactor.link.unlink();
                    }
                    break;

                case 'formatting':
                    blocks = self.redactor.selection.getBlocks();
                    if (blocks.length && blocks[0]) {
                        blocks.forEach(function(block) {
                            if (self.redactorNode.parents().is(block)) {
                                return;
                            }
                            self.saveSelection();
                            $(block).replaceTag(data.tagName);
                            self.redactor.selection.restore();
                        });
                    } else {
                        this.saveSelection();
                        $(self.redactorNode.get(0)).replaceTag(data.tagName);
                        this.initialize(this.el);
                        self.redactor.selection.restore();
                    }

                    self.redactor.code.sync();
                    break;

                case 'insertImage':
                    // When the image is to be inserted just like that

                    if (self.redactorNode.find('._vwo_inline_image').length) {
                        self.previousImgSrc = self.redactorNode.find('._vwo_inline_image').attr('src');
                        self.redactorNode.find('._vwo_inline_image').attr('src', data.src);
                        self.redactor.code.sync();
                    } else {
                        self.redactor.insert.html('<img src="' + data.src + '">');
                    }

                    $('img[src$="' + data.src + '"]').bind('load', function() {
                        self.updateBorders();
                    });
                    break;

                case 'removeImage':
                    if (self.redactorNode.find('._vwo_inline_image').length) {
                        self.redactorNode.find('._vwo_inline_image').remove();
                        self.redactor.code.sync();
                    }
                }

                self.parentFrame.update(self.getCode());
            },

            getPreviousImgSrc: function() {
                return this.previousImgSrc;
            },

            // Detects and caches the fonts present on the page.
            detectFonts: function() {
                if (!this.detectedFonts.length) {
                    this.detectedFonts = fontFinder.detectFonts();
                }
                return this.detectedFonts;
            },

            // Gets the inner text of the currently selected anchor.
            getAnchorTitle: function() {
                if (this.redactorNode.is('a')) {
                    return this.redactorNode.text();
                }

                var nodes = $(this.redactor.selection.getNodes());
                if (nodes.is('a')) {
                    return nodes.filter('a').text();
                }

                return this.redactor.selection.getText();
            },

            shouldDisableRemoveLink: function() {
                var nodes = this.redactor.selection.getNodes();
                var $nodes = $(nodes);
                if (this.redactorNode.is('a')) {
                    return false;
                } else if (this.redactorNode.closest('a').length) {
                    return false;
                }

                return !$nodes.is('a');
            },

            // Get the image source of the selected image
            getImageSrc: function() {
                if ($(this.redactorNode).find('._vwo_inline_image')) {
                    return utils.getOriginalUrlFromProxyUrl($(this.redactorNode).find('._vwo_inline_image').attr('src'));
                } else {
                    return '';
                }
            },

            getDocumentUrl: function() {
                return window.vwo_document_real_url;
            },

            inlineFormat: function(prop, value) {
                this.redactor.inline.format('span', 'style', prop + ': ' + value + ';');

                var nodes = this.redactor.selection.getNodes();
                $(nodes).filter('[data-redactor-style*="' + prop + ': ' + value + ';"]').attr('data-verified', 'redactor').find('[style*="' + prop + '"]').css(prop, '');
                this.redactor.code.sync();
            },

            restoreImage: function(imgSrc) {
                if (this.redactorNode.find('._vwo_inline_image').length) {
                    this.redactorNode.find('._vwo_inline_image').attr('src', imgSrc);
                    this.redactor.code.sync();
                }
            },

            applyState: function(html) {
                var node = document.createElement(this.redactorNode.parent().get(0).tagName);
                node.innerHTML = html;
                node = node.firstElementChild;

                this.redactorNode.html('').append(node.childNodes);

                var i;

                for (i = 0; i < this.redactorNode[0].attributes.length; i++) {
                    this.redactorNode.removeAttr(this.redactorNode[0].attributes[i].name);
                }

                for (i = 0; i < node.attributes.length; i++) {
                    this.redactorNode.attr(node.attributes[i].name, node.attributes[i].value);
                }

                this.redactor.selection.restore();
            },

            getOuterHTML: function() {
                this.saveSelection();
                var html = $(this.redactorNode).outerHTML();
                this.redactor.selection.restore();

                return html;
            }
        }
    });

    inlineEditOperation = frameContext.registerService('inlineEditOperation', inlineEditOperation);
    return inlineEditOperation;
});

/* jshint maxparams:99 */
define('designer/OperationManager', ['designer/FrameContext', 'designer/operations/MoveOperation', 'designer/operations/MoveResizeOperation', 'designer/operations/RearrangeOperation', 'designer/operations/ResizeOperation', 'designer/operations/InsertOperation', 'designer/operations/CopyOperation', 'designer/operations/PasteOperation', 'designer/operations/RemoveOperation', 'designer/operations/ToggleVisibilityOperation', 'designer/operations/ChangeTextOperation', 'designer/operations/ChangeUrlOperation', 'designer/operations/ChangeImageOperation', 'designer/operations/ChangeBackgroundImageOperation', 'designer/operations/EditImageOperation', 'designer/operations/EditBackgroundImageOperation', 'designer/operations/SelectParentOperation', 'designer/operations/ChangeCSSOperation', 'designer/operations/ContentOperation', 'designer/operations/LegacyRearrangeOperation', 'designer/operations/AddJavaScriptCSSOperation', 'designer/operations/InlineEditOperation'], function(frameContext, moveOperation, moveResizeOperation, rearrangeOperation, resizeOperation, insertOperation, copyOperation, pasteOperation, removeOperation, toggleVisibilityOperation, changeTextOperation, changeUrlOperation, changeImageOperation, changeBackgroundImageOperation, editImageOperation, editBackgroundImageOperation, selectParentOperation, changeCSSOperation, contentOperation, legacyRearrangeOperation, addJavaScriptCSSOperation, inlineEditOperation) {
    'use strict';

    var OperationServiceNames = {
        MOVE: 'moveOperation',
        MOVE_RESIZE: 'moveResizeOperation',
        REARRANGE: 'rearrangeOperation',
        RESIZE: 'resizeOperation',
        INSERT: 'insertOperation',
        COPY: 'copyOperation',
        PASTE: 'pasteOperation',
        REMOVE: 'removeOperation',
        TOGGLE_VISIBILITY: 'toggleVisibilityOperation',
        CHANGE_TEXT: 'changeTextOperation',
        CHANGE_URL: 'changeUrlOperation',
        CHANGE_SRC: 'changeImageOperation',
        CHANGE_BACKGROUND_IMAGE: 'changeBackgroundImageOperation',
        EDIT_IMAGE: 'editImageOperation',
        EDIT_BACKGROUND_IMAGE: 'editBackgroundImageOperation',
        SELECT_PARENT: 'selectParentOperation',
        CHANGE_CSS: 'changeCSSOperation',
        EDIT_HTML: 'contentOperation',
        LEGACY_REARRANGE: 'legacyRearrangeOperation',
        ADD_JS_CSS: 'addJavaScriptCSSOperation',
        INLINE_EDIT: 'inlineEditOperation'
    };

    var operations = {};

    operations[OperationServiceNames.MOVE] = moveOperation;
    operations[OperationServiceNames.MOVE_RESIZE] = moveResizeOperation;
    operations[OperationServiceNames.REARRANGE] = rearrangeOperation;
    operations[OperationServiceNames.RESIZE] = resizeOperation;
    operations[OperationServiceNames.INSERT] = insertOperation;
    operations[OperationServiceNames.COPY] = copyOperation;
    operations[OperationServiceNames.PASTE] = pasteOperation;
    operations[OperationServiceNames.REMOVE] = removeOperation;
    operations[OperationServiceNames.TOGGLE_VISIBILITY] = toggleVisibilityOperation;
    operations[OperationServiceNames.CHANGE_TEXT] = changeTextOperation;
    operations[OperationServiceNames.CHANGE_URL] = changeUrlOperation;
    operations[OperationServiceNames.CHANGE_SRC] = changeImageOperation;
    operations[OperationServiceNames.CHANGE_BACKGROUND_IMAGE] = changeBackgroundImageOperation;
    operations[OperationServiceNames.EDIT_IMAGE] = editImageOperation;
    operations[OperationServiceNames.EDIT_BACKGROUND_IMAGE] = editBackgroundImageOperation;
    operations[OperationServiceNames.SELECT_PARENT] = selectParentOperation;
    operations[OperationServiceNames.CHANGE_CSS] = changeCSSOperation;
    operations[OperationServiceNames.EDIT_HTML] = contentOperation;
    operations[OperationServiceNames.LEGACY_REARRANGE] = legacyRearrangeOperation;
    operations[OperationServiceNames.ADD_JS_CSS] = addJavaScriptCSSOperation;
    operations[OperationServiceNames.INLINE_EDIT] = inlineEditOperation;

    var operationManager = {
        // a list of all the operation services (hashmap)
        operations: operations,

        getOperationByName: function getOperationByName(operationName) {
            var operationKeys = Object.keys(operations), operation;
            while ((operation = operations[operationKeys.pop()])) {
                if (operation.name === operationName) {
                    return operation;
                }
            }
        },

        getOperationServiceName: function getOperationServiceName(service) {
            var keys = Object.keys(operations);
            for (var i = 0; i < keys.length; i++) {
                if (operations[keys[i]] === service) {
                    return keys[i];
                }
            }
        },

        // hashmap of all the active operations
        // now added support for multiple operations in progress at the same time
        activeOperations: {},

        // sets active operation to the operationName
        // This is for standardizing the process of initializing and deinitializing operations
        activateOperation: function(operation) {
            var operationName = this.getOperationServiceName(operation);
            if (!this.activeOperations[operationName]) {
                this.activeOperations[operationName] = operation;
            }
            return this.activeOperations[operationName];
        },

        // sets the provided operationName as inactive
        // This is for standardizing the process of initializing and deinitializing operations
        deactivateOperation: function(operation) {
            var operationName = this.getOperationServiceName(operation);
            if (this.activeOperations[operationName]) {
                delete this.activeOperations[operationName];
            }
        },

        isAnyOperationActive: function() {
            return JSON.stringify(this.activeOperations) !== '{}';
        },

        // Calls persist on all active operations
        persistActiveOperations: function() {
            var success = this.isAnyOperationActive(), operationName;

            for (operationName in this.activeOperations) {
                if (this.activeOperations.hasOwnProperty(operationName)) {
                    this.activeOperations[operationName].persist(this.activeOperations[operationName].el || VWOEditor.el);
                }
            }

            return success;
        },

        // Calls cancel on all active operations
        cancelActiveOperations: function() {
            var success = this.isAnyOperationActive();
            for (var operationName in this.activeOperations) {
                if (this.activeOperations.hasOwnProperty(operationName)) {
                    this.activeOperations[operationName].cancel(this.activeOperations[operationName].el || VWOEditor.el);
                }
            }
            return success;
        }
    };

    operationManager.OperationServiceNames = OperationServiceNames;

    return operationManager;
});

define('designer/SelectorPathGenerator', [], function() {
    'use strict';

    function isVwoClass(className) {
        return className.substr(0, 4) === 'vwo_' || className.substr(0, 5) === '_vwo_';
    }

    function isDynamicId(identifier) {
        // vwo_2535 vwo-35353 vwo3536
        // vwo_252a vwo-3536af
        // holder_CENTREFULL tsbadgeResponsiveTop_db8d3657bdbe440c985ae127463eaad4
        var reDynamicId1 = /[a-z]+[_-]?[0-9]{2,}/gi
          , // abcd22
        reDynamicId2 = /[0-9a-f]{5,}/gi;

        return reDynamicId1.test(identifier) || reDynamicId2.test(identifier);
    }

    function isDynamicClass(identifier) {
        // wrapper-6_3547
        var reDynamicClass1 = /[a-z]+[_-][0-9_-]{4,}/gi;
        var hoverClass = /hover/ig;

        return reDynamicClass1.test(identifier) || hoverClass.test(identifier);
    }

    var selectorPathGenerator = {
        generateShortPath: function(node, cacheMode) {
            if (!node) {
                return null;
            }

            var isDangerousNode = false;

            function verify(path, type) {
                try {
                    if (type === 'class') {
                        return document.getElementsByClassName(path).length === 1;
                    }
                    return document.querySelectorAll(path).length === 1;
                } catch (e) {
                    return false;
                }
            }

            var nodeName = node.nodeName.toLowerCase();
            if (nodeName === 'body' || nodeName === 'head' || nodeName === 'html') {
                return nodeName;
            }

            if (nodeName.match(/^((?:[\w\u00c0-\uFFFF\*-]|\\.)+)/)[0] !== nodeName) {
                nodeName = '*';
                isDangerousNode = true;
            }

            // do not use ids for elements that do not get rendered
            var id = node.getAttribute('id');
            if (!window._vwo_noIdMode && id && !/base|link|meta|style|iframe|script|noscript/gi.test(node.nodeName) && !isDynamicId(id) && verify('#' + id)) {
                return '#' + id;
            }

            /*jshint camelcase: false */
            if (node.hasAttribute('class') && !window._vwo_noClassMode) {
                var classNames = node.getAttribute('class').split(/\s+/);

                var validClassNameRegex = /^[^:]+$/;
                classNames = classNames.filter(function(className) {
                    return !isVwoClass(className) && validClassNameRegex.test(className);
                });

                var i;

                for (i = 0; i < classNames.length; i++) {
                    if (verify(classNames[i], 'class') && !(isDynamicClass(classNames[i]))) {
                        return '.' + classNames[i];
                    }
                }

                if (classNames.length && verify('.' + classNames.join('.'), 'class') && !(isDynamicClass(classNames.join('.')))) {
                    return '.' + classNames.join('.');
                }
            }

            // If caching is enabled, recur through wrapper function. otherwise make recursive call directly
            var parentPath = cacheMode ? this.generateCachedShortPath(node.parentNode) : this.generateShortPath(node.parentNode);

            var index = 0;
            for (var iterator = node; iterator; iterator = iterator.previousSibling) {
                if (node.nodeName === iterator.nodeName) {
                    index++;
                } else if (isDangerousNode && iterator.nodeType === window.Node.ELEMENT_NODE) {
                    index++;
                }
            }

            var nthOfWhat = isDangerousNode ? ':nth-child(' : ':nth-of-type(';

            return parentPath + ' > ' + nodeName + nthOfWhat + index + ')';
        },

        /**
		 * Generate short selector and cache it to prevent redundent recursive calculations.
		 * The disadvantage of memoization is that the cache needs to be invalidated if the page structure changes.
		 * This is suitable only in scenarios when many nested short paths need to be calculated and there are no changes to the page during the whole computation.
		 */
        generateCachedShortPath: function(node) {
            if (node._vwoCachedShortPath) {
                return node._vwoCachedShortPath;
            } else {
                return node._vwoCachedShortPath = this.generateShortPath(node, true);
            }
        },

        /**
		 * Find the CSS path of the current Element. Use ID's if there is only one occurence of the ID. If the tag Name does not match the proper tag name a browser supports, then use *
		 */
        generateFullPath: function(node) {
            if (!node) {
                return null;
            }
            function previousElementSibling(el) {
                if (el.previousElementSibling) {
                    return el.previousElementSibling;
                } else {
                    while ((el = el.previousSibling)) {
                        if (el.nodeType === 1) {
                            return el;
                        }
                    }
                }
            }
            var names = []
              , el = node;
            if (!el) {
                return null;
            }

            if (el.tagName === 'BODY' || el.tagName === 'HEAD') {
                return el.tagName;
            }
            while (el) {
                if (el.tagName === 'SCRIPT' && /_vwo_group/.test(el.className)) {
                    names.unshift(el.tagName + '._vwo_group');
                } else {
                    var tag = el.tagName;
                    if (tag.match(/^((?:[\w\u00c0-\uFFFF\*-]|\\.)+)/)[0] !== tag) {
                        tag = '*';
                    }
                    var id = el.getAttribute('id'), searchElement;
                    // do not use ids for elements that do not get rendered
                    if (id && 'string' === typeof id && !/base|link|meta|style|iframe|script|noscript/gi.test(tag)) {
                        //ID may be invalid e.g. #{PLAN-ID}-DEDUCIBLES and jQuery throws error when this id is used
                        //So, basically this ID is unusable
                        try {
                            searchElement = document.querySelectorAll('#' + id);
                        } catch (e) {
                            searchElement = '';
                        }
                        if (searchElement && searchElement.length === 1 && !isDynamicId(id)) {
                            names.unshift(tag + '#' + id);
                        } else {
                            names.unshift(tag);
                        }
                    } else {
                        names.unshift(tag);
                    }
                }
                el = previousElementSibling(el);
            }
            names[0] += ':first-child';

            // join these paths with a '+'
            return this.generateFullPath(node.parentNode) + ' > ' + names.join(' + ');
        },

        selectorPathToJQuery: function selectorPathToJQuery(path) {
            var items = path.split('>'), item, string = '';
            while ((item = items.shift())) {
                var innerItems = item.split('+'), innerItem, counter = -1;
                while ((innerItem = innerItems.shift())) {
                    counter = innerItem.trim().indexOf('first-child') >= 0 ? 0 : counter + 1;
                }
                string += '.children().eq(' + counter + ')';
            }
            return string;
        }
    };

    return selectorPathGenerator;
});

define('designer/DOMFootprint', ['designer/SelectorPathGenerator'], function(selectorPathGenerator) {
    'use strict';

    var VWOInjected = window.VWOInjected;

    var NodeTypes = {
        ELEMENT_NODE: 1,
        TEXT_NODE: 3,
        COMMENT_NODE: 8
    };

    function isVwoElement(el) {
        var elClasses = el.getAttribute('class') && el.getAttribute('class').split(/\s+/gi);

        if (!elClasses || !elClasses.length) {
            return false;
        }
        for (var i = 0; i < elClasses.length; i++) {
            var className = elClasses[i];
            if (className.indexOf('_vwo_hidden') === -1 && className.substr(0, 5) === '_vwo_') {
                return true;
            }
        }

        return false;
    }

    function isVwoClass(className) {
        return (className.indexOf('_vwo_hidden') === -1) && (className.substr(0, 4) === 'vwo_' || className.substr(0, 5) === '_vwo_');
    }

    function retainVwoClasses(oldClasses, newClasses) {
        oldClasses = oldClasses.split(/\s+/gi);
        newClasses = newClasses.split(/\s+/gi);

        for (var i = oldClasses.length; i--; ) {
            if (isVwoClass(oldClasses[i])) {
                newClasses.push(oldClasses[i]);
            }
        }
        return newClasses.join(' ');
    }

    /**
	 * Creates a new DOMFootprint for the given HTML node.
	 * @param {Node} element The HTML node to create a footprint for.
	 */
    function DOMFootprint(element) {
        this.element = element;
    }

    DOMFootprint.prototype = {
        /**
		 * Captures the footprint of the DOM element and its descendants.
		 */
        capture: function() {
            if (!this.element) {
                return;
            }

            this.nodeName = this.element.nodeName.toLowerCase();
            this.nodeType = this.element.nodeType;

            if (this.element.nodeType === NodeTypes.ELEMENT_NODE) {
                this.children = [];
                this.attributes = {};
                this.attributes.length = 0;

                // do not capture any vwo element
                if (isVwoElement(this.element)) {
                    return this;
                }

                // capture all children and attributes
                for (var i = 0, il = this.element.childNodes.length; i < il; i++) {
                    this.children[i] = new DOMFootprint(this.element.childNodes[i]);
                    this.children[i].indexInParent = i;
                    this.children[i].capture();
                }
                for (var j = 0, jl = this.element.attributes.length; j < jl; j++) {
                    this.attributes[j] = this.element.attributes[j].name;
                    this.attributes.values = this.attributes.values || {};
                    this.attributes.values[this.attributes[j]] = this.element.attributes[j].value;
                    this.attributes.length++;
                }
            } else if (this.element.nodeType === NodeTypes.TEXT_NODE || this.element.nodeType === NodeTypes.COMMENT_NODE) {
                // capture textContent
                this.textContent = this.element.textContent;
            }
            return this;
        },

        /**
		 * Restores the element to the state of its previously captured footprint.
		 */
        restore: function() {
            var element = this.element
              , attributes = this.attributes
              , children = this.children;

            if (!element) {
                return;
            }

            //Ignore the VWO Added iframe while restoring the element
            if (element.tagName === 'IFRAME' && element.id === 'test_page') {
                return;
            }

            if (this.nodeType === NodeTypes.ELEMENT_NODE) {
                var originalChildNodes = children.map(function(child) {
                    return child.element;
                });

                // do not restore any vwo element
                if (isVwoElement(this.element)) {
                    return this;
                }

                var errorReport = errorReport || VWOInjected.errorReport;

                try {
                    // remove any children that do not exist in the old DOM
                    for (var l = element.childNodes.length; l--; ) {
                        if (originalChildNodes.indexOf(element.childNodes[l]) === -1) {
                            element.removeChild(element.childNodes[l]);
                        }
                    }
                } catch (e) {
                    errorReport(e, printStackTrace(), 'DOMFootprint::restore', arguments);
                }

                var childNodes = [].slice.call(element.childNodes);
                // add back all old children
                for (var j = 0, jl = children.length; j < jl; j++) {
                    // skip adding children already present to prevent unnecessary DOM manipulation
                    if (children[j].element.parentNode === element && children[j].indexInParent === childNodes.indexOf(children[j].element)) {
                        continue;
                    }
                    if (element.childNodes[j] && element.childNodes[j].tagName === 'IFRAME' && element.childNodes[j].id === 'test_page') {
                        continue;
                    }

                    if (element.childNodes[j]) {
                        element.insertBefore(children[j].element, element.childNodes[j]);
                    } else {
                        element.appendChild(children[j].element);
                    }
                }

                // restore the footprints of all old children
                for (var k = children.length; k--; ) {
                    children[k].restore();
                }

                // update all attributes
                var attributesToRemove = [];
                for (var i = element.attributes.length; i--; ) {
                    if (attributes.values && attributes.values.hasOwnProperty(element.attributes[i].name)) {
                        if (element.attributes[i].value === attributes.values[attributes[i]]) {
                            continue;
                        }
                        if (attributes[i] === 'class') {
                            element.setAttribute('class', retainVwoClasses(element.attributes[i].value || '', attributes.values[attributes[i]]));
                            continue;
                        }
                        element.setAttribute(attributes[i], attributes.values[attributes[i]]);
                    } else {
                        attributesToRemove.push(element.attributes[i].name);
                    }
                }

                var attribute;
                while ((attribute = attributesToRemove.pop())) {
                    if (attribute === 'class') {
                        element.setAttribute('class', retainVwoClasses(element.getAttribute('class') || '', ''));
                        continue;
                    }
                    element.removeAttribute(attribute);
                }
            } else if (element.nodeType === NodeTypes.TEXT_NODE || element.nodeType === NodeTypes.COMMENT_NODE) {
                // text node or comment node
                element.textContent = this.textContent;
            }
            return this;
        },

        // BODY > IFRAME:first-child + DIV + LINK + LINK + STYLE + HEADER + FOOTER + DIV + DIV > ARTICLE:first-child > DIV:first-child > ASIDE:first-child + SECTION > H3:first-child > A:first-child
        findElementBySelectorPath: function(selectorPath) {
            var a = selectorPath.split('>');
            var footprint = this;

            for (var i = 1; i < a.length && footprint; i++) {
                var b = a[i].split('+');
                var tagName = b[b.length - 1].trim().toLowerCase().split(':')[0];
                footprint = footprint.getChild(tagName, b.length - 1);
            }

            return footprint && footprint.element;
        },

        getChild: function(tagName, index) {
            for (var i = 0, j = 0; i < this.children.length; i++) {
                if (this.children[i].nodeType === NodeTypes.ELEMENT_NODE && j++ === index && this.children[i].tagName === tagName) {
                    return this.children[i];
                }
            }
        },

        getShortPathForElement: function(selectorPath) {
            return selectorPathGenerator.generateShortPath(this.findElementBySelectorPath(selectorPath));
        }
    };

    if (VWOInjected) {
        VWOInjected.DOMFootprint = DOMFootprint;
    }

    return DOMFootprint;
});

define('designer/IframeNavigator', ['designer/FrameContext'], function(frameContext) {
    'use strict';

    /* eslint camelcase: "off" */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;

    var iframeNavigator = {
        parentFrame: {
            initialize: function() {
                if (!this.historyData) {
                    this.resetHistoryData();
                }
            },

            persistHistoryDataInStorage: function() {
                window.sessionStorage.setItem('editor.historyData', JSON.stringify(this.historyData));
            },

            resetHistoryData: function() {
                var historyDataInStorage = window.sessionStorage.getItem('editor.historyData');
                if (historyDataInStorage) {
                    this.historyData = JSON.parse(historyDataInStorage);
                } else {
                    this.historyData = {
                        currentIndex: 0,
                        states: [],
                        initialHistoryLength: history.length
                    };
                    this.persistHistoryDataInStorage();
                }
            },

            setHistoryData: function(data) {
                $.extend(this.historyData, data);
                this.persistHistoryDataInStorage();
            },

            canGoBack: function() {
                return this.historyData.currentIndex > 0;
            },

            canGoForward: function() {
                return this.historyData.currentIndex < this.historyData.states.length - 1;
            },

            pushState: function(url, actualLocation, title) {
                var index = this.historyData.currentIndex + 1;

                this.historyData.states.splice(index);
                this.historyData.states.push({
                    url: url,
                    actualLocation: actualLocation,
                    title: title
                });
                this.historyData.currentIndex = this.historyData.states.length - 1;

                this.persistHistoryDataInStorage();
            },

            goBack: function() {
                if (this.canGoBack()) {
                    this.historyData.currentIndex--;
                    this.childFrame.goToUrl(this.getHistoryStateUrl(0));

                    this.persistHistoryDataInStorage();
                }
            },

            goForward: function() {
                if (this.canGoForward()) {
                    this.historyData.currentIndex++;
                    this.childFrame.goToUrl(this.getHistoryStateUrl(0));

                    this.persistHistoryDataInStorage();
                }
            },

            goToUrl: function(url) {
                if (url === this.getHistoryStateUrl(0)) {
                    this.childFrame.reload();
                } else {
                    this.childFrame.goToUrl(url);
                }
            },

            reload: function() {
                this.childFrame.reload();
            },

            onHistoryChange: function(e) {
                this.setCurrentUrl(e.newLocation);

                // If the url navigated to is same as the url on the current index, do nothing
                if (this.getHistoryStateUrl(0) === e.newLocation) {
                    return;
                }

                // If the url navigated to is same as the previous url in history, decrement the index
                if (this.getHistoryStateUrl(-1) === e.newLocation) {
                    this.historyData.currentIndex--;
                    this.persistHistoryDataInStorage();
                    return;
                }

                // If the url navigated to is same as the next url in history, increment the index
                if (this.getHistoryStateUrl(1) === e.newLocation) {
                    this.historyData.currentIndex++;
                    this.persistHistoryDataInStorage();
                    return;
                }

                this.pushState(e.newLocation, e.actualLocation, e.title);
            },

            getHistoryStateUrl: function(delta) {
                delta = delta || 0;
                return this.historyData.states[this.historyData.currentIndex + delta] && this.historyData.states[this.historyData.currentIndex + delta].url;
            },

            updateCurrentUrl: function(hashValue, url) {
                // Check if the url already has hash in it
                if (url.indexOf('#') !== -1 || !hashValue) {
                    this.currentUrl = url;
                } else {
                    this.currentUrl = url + hashValue;
                }
                VWOEditor.controllerScope.$digest();
            },

            setCurrentUrl: function(location) {
                var self = this;

                // Polling child window till ready state is complete to get hash-bang and vwo_document_real_url properties from child window
                var readyStateTimer = setInterval(function() {
                    window.request('VWOInjected.getProperty', 'document.readyState').then(function(readyState) {
                        if (readyState === 'complete') {
                            clearInterval(readyStateTimer);
                            // Get hash bang value
                            window.request('VWOInjected.getProperty', 'location.hash').then(function(hashValue) {
                                if (location.indexOf('/editorProxy') > 0) {
                                    // Get document real url
                                    window.request('VWOInjected.getProperty', 'vwo_document_real_url').then(function(realUrl) {
                                        self.updateCurrentUrl(hashValue, realUrl);
                                    });
                                } else {
                                    self.updateCurrentUrl(hashValue, location);
                                }
                            });
                        }
                    });
                }, 100);
            }
        },
        childFrame: {
            initialize: function() {
                this.parentFrame.initialize();

                var oldLocation, newLocation, newLength, oldLength = 0;

                var self = this;
                // Location change inside the iframe doesn't give us an event. Interval to listen to every location change that happens inside the child frame.
                setInterval(function() {
                    newLocation = location.href;
                    newLength = history.length;

                    if (newLocation !== oldLocation) {
                        self.parentFrame.onHistoryChange({
                            oldLength: oldLength,
                            newLength: newLength,
                            oldLocation: oldLocation,
                            newLocation: newLocation,
                            title: document.title
                        });
                        oldLocation = newLocation;
                        oldLength = newLength;
                    }
                }, 1);
            },

            reload: function() {
                location.reload();
            },

            goToUrl: function(url) {
                location.href = url;
            }
        }
    };

    return frameContext.registerService('iframeNavigator', iframeNavigator);
});

define('designer/ChangeApplier', ['designer/FrameContext', 'designer/OperationManager', 'designer/DOMFootprint', 'designer/inject/utils'], function(frameContext, operationManager, DOMFootprint, utils) {
    'use strict';

    /* eslint camelcase: "off" */
    /* jshint -W116 */
    /* jshint -W089 */
    /* jshint -W083 */
    /* eslint guard-for-in: off */
    /* eslint eqeqeq: off */
    var $ = window.$;
    var vwoe_$ = window.vwoe_$;
    var controlFootprint;

    var changeApplier = {
        parentFrame: {
            applyVariation: function(sID, vID, selector, isCoalXPathsUpdateNotNeeded, skipUiUpdation) {
                var self = VWOEditor;
                return self.findSection(sID).applyVariation(vID, selector, isCoalXPathsUpdateNotNeeded).then(function() {
                    self.setCurrent(sID);
                    if (!skipUiUpdation) {
                        self.updateList();
                    }
                });
            },

            applyAllSectionsAndVariations: function(selector, revertToCombinations, shortSelectorMode) {
                var self = VWOEditor
                  , variationsContainer = []
                  , revertToVariations = []
                  , d = $.Deferred();

                for (var i in VWOEditor.sections) {
                    var section = VWOEditor.findSection(i);
                    if (section && !section.deleted) {
                        for (var j = 1; j <= section.last_variation; j++) {
                            var variation = section.findVariation(j);
                            if (!variation || variation.deleted == 1) {
                                continue;
                            }
                            variationsContainer.push(section.getVariationData(variation.id));
                            //Push data for one variation
                            //getVariationData checks currentVariation. So this is required.
                            //TODO: Ideally getVariationData shouldn't check current Variation
                            section.setCurrent(variation.id);
                        }
                    }
                }

                $.each(revertToCombinations, function(sectionId, variationId) {
                    revertToVariations = revertToVariations.concat(self.findSection(sectionId).getVariationData(variationId));
                    //getVariationData checks currentVariation. So this is required.
                    //TODO: Ideally getVariationData shouldn't check current Variation
                    self.findSection(sectionId).setCurrent(variationId);
                });

                this.childFrame.applyAllSectionsAndVariations(variationsContainer, selector, revertToVariations, shortSelectorMode).then(function(obj) {
                    var newStatesContainer = obj.statesContainer, xpaths = obj.xpaths, newStates, variations;
                    // Update the model with that received from child (basically the elements array)
                    for (var i = 0; i < variationsContainer.length; i++) {
                        variations = variationsContainer[i];
                        newStates = newStatesContainer[i];
                        for (var j = 0; j < variations.length; j++) {
                            variations[j].state.elements.forEach(function(el, k) {
                                $.extend(el, newStates[j].elements[k], true);
                                el.jq = $('.' + el.elClass);
                            });
                        }
                    }
                    self.updateList();
                    if (shortSelectorMode) {
                        d.resolve({
                            xpaths: xpaths,
                            shortSelectorPaths: obj.shortSelectorPaths
                        });
                    } else {
                        d.resolve(xpaths);
                    }
                });
                return d;
            },

            applyAllSections: function(vID, isCoalXPathsUpdateNotNeeded) {
                for (var i in VWOEditor.sections) {
                    var s = VWOEditor.findSection(i);
                    if (s && !s.deleted) {
                        var v = (vID === undefined ? s.currentVariation() : s.findVariation(vID));
                        if (v && !v.deleted) {
                            s.applyVariation(v.id, undefined, isCoalXPathsUpdateNotNeeded);
                        }
                    }
                }
            },

            onGlassClick: function() {
                VWOEditor.onGlassClick();
            }
        },
        childFrame: {
            applyAllSectionsAndVariations: function(variationsContainer, selector, revertToVariations, shortSelectorMode) {
                return window.VWOInjected.applyAllSectionsAndVariations(variationsContainer, selector, revertToVariations, shortSelectorMode);
            },

            applyOp: function(el, op, props, xpath, shortSelectorPath, isControl) {
                this.getFullBodyControl();

                var opType = window.opNames[op.opName][1];
                var operation = operationManager.getOperationByName(op.opName);

                //Support backward compatibility for vwoCss.. If the expected op property is vwoCss and it is not present in the op stack, default to css property
                if (opType === 'vwoCss' && !op[opType] && op.css) {
                    opType = 'css';
                }

                props = props || op[opType] || el.control[op.opName];
                el.shortSelectorPath = shortSelectorPath || el.shortSelectorPath;
                operation.apply(el, xpath, props, isControl);
                this.putGlassOnEachIframe();
                return el;
            },

            getFullBodyControl: function(forcedCapture) {
                this.setControlFootPrint(forcedCapture);
                if (!controlFootprint.isCaptured || forcedCapture) {

                    //Hack - Changes to be done when user comes back to design mode from browse mode - required for desktop only
                    if (window.vwoLoadingMode === 'desktop') {
                        var $codeEditorButton = document.querySelector('#vwo-js-global-code.vwo-editor-element');
                        if ($codeEditorButton) {
                            $codeEditorButton.style.display = 'block';
                        }

                        var $notificationBarElement = document.querySelector('.notification-bar.vwo-editor-element');
                        if ($notificationBarElement) {
                            $notificationBarElement.style.display = 'none';
                        }
                    }
                    controlFootprint.capture();
                    controlFootprint.isCaptured = true;
                }
            },

            setControlFootPrint: function(forcedCapture) {
                if (!controlFootprint || forcedCapture) {
                    // Assign unique element identifiers before storing control footprint
                    window.VWOInjected.assignIDs();

                    //Adjust styles of elements on page if required
                    window.VWOInjected.adjustStyles();

                    controlFootprint = new DOMFootprint(document.body);
                }
            },

            applyControl: function() {
                if (window.VWOInjected.testType === 'ab') {
                    // Undo CSS changes by removing inserted style tags from head. DOMFootprint wont do it
                    // as it maintains only BODY footprint.

                    //Code Editor Specific change to remove any stylesheet/javascripts included using external css/js
                    vwoe_$('.external-css-link, .extend-js-link').remove();
                    this.removeGlobalCode();
                    if (controlFootprint) {
                        controlFootprint.restore();
                    }
                    var vwoVariationEl = document.querySelector('.vwo_variation');
                    if (vwoVariationEl) {
                        vwoe_$(vwoVariationEl).remove();
                    }
                }
                this.performInitialDomManipulations();
            },

            removeGlobalCode: function() {
                vwoe_$('head').find('.vwo-global-code').remove();
            },

            performInitialDomManipulations: function() {
                if (!vwoe_$('._vwo_full_page_glass').length) {
                    vwoe_$('body').append('<div class="_vwo_full_page_glass"></div>');
                }

                this.resizeFullPageGlass();
                var self = this;

                vwoe_$('._vwo_full_page_glass').unbind('click').bind('click', function() {
                    self.parentFrame.onGlassClick();
                }).hide();

                // cover all iframe with a div to prevent elements inside the iframe from being clicked
                this.putGlassOnEachIframe();

                // flash hacks
                vwoe_$('embed').attr('allowscriptaccess', 'never');
                vwoe_$('param[name=allowscriptaccess]').attr('value', 'never');
            },

            resizeFullPageGlass: function() {
                var D = window.document;
                var offsetDelta = utils.getBodyOffset();
                vwoe_$('._vwo_full_page_glass').css({
                    height: Math.max(D.body.scrollHeight, D.body.offsetHeight, D.documentElement.scrollHeight),
                    width: Math.max(D.body.scrollWidth, D.body.offsetWidth, D.documentElement.scrollWidth),
                    top: 0 - offsetDelta.top,
                    left: 0 - offsetDelta.left
                });
            },

            putGlassOnEachIframe: function() {
                var offset;
                var offsetDelta = {
                    left: 0,
                    top: 0
                };
                var $glasses = vwoe_$('._vwo_iframe_glass');
                var $visibleIframes = vwoe_$('iframe:visible').not('#test_page');

                $visibleIframes.each(function(i, v) {
                    var iframeJq = vwoe_$(v);
                    var iframeXPath = window.processXpath(iframeJq.XPath());
                    var $currentGlass = $glasses.eq(i);

                    if ((iframeJq.css('visibility') === 'hidden') || (iframeJq.css('opacity') === 0)) {
                        return;
                    }

                    // If already glasses are present, reuse them
                    if ($currentGlass.length) {
                        $currentGlass.attr('data-xpath', iframeXPath);
                    } else {
                        // Add new glasses
                        $currentGlass = vwoe_$('<div class="_vwo_iframe_glass" data-xpath="' + iframeXPath + '"></div>').appendTo('body');
                    }

                    offset = vwoe_$(v).offset();

                    if (window.getComputedStyle(document.body).getPropertyValue('position') === 'static') {
                        offsetDelta = {
                            left: parseInt(window.getComputedStyle(document.getElementsByTagName('body')[0]).getPropertyValue('border-left-width').replace('px', ''), 10),
                            top: parseInt(window.getComputedStyle(document.getElementsByTagName('body')[0]).getPropertyValue('border-top-width').replace('px', ''), 10)
                        };
                    }

                    $currentGlass.css({
                        height: iframeJq.outerHeight(),
                        width: iframeJq.outerWidth(),
                        top: offset.top + offsetDelta.top,
                        left: offset.left + offsetDelta.left,
                        position: iframeJq.css('position') === 'fixed' ? 'fixed' : 'absolute',
                        zIndex: 2500001
                    });
                });

                // Remove Extra Glasses
                if ($glasses.length > $visibleIframes.length) {
                    for (var j = $glasses.length - 1; j >= $visibleIframes.length; j--) {
                        $glasses.eq(j).remove();
                    }
                }
            },

            applyControlForOp: function(el, op, xpath, shortSelectorPath) {
                return this.applyOp(el, {
                    opName: op.opName
                }, el.control[op.opName], xpath, shortSelectorPath, true);
            },

            applyVariation: function(state, globalCode) {
                if (VWOInjected.interactionMode !== 'browse') {
                    var stack = state.stack
                      , elements = state.elements;

                    this.applyPreGlobalCode(globalCode);
                    for (var i = 0; i < stack.length; i++) {
                        if (!stack[i].skip) {
                            this.applyOp(elements[stack[i].el], stack[i].op, undefined, stack[i].XPath, stack[i].shortSelectorPath);
                        }
                    }
                    this.applyPostGlobalCode(globalCode);
                }

                return state;
            },

            applyPreGlobalCode: function(globalCode) {
                if (globalCode) {
                    try {
                        /* Applying Pre Js */
                        vwoe_$('head').append('<script class="vwo-global-code" type="text/javascript">' + globalCode.preJS + '</script>');
                    } catch (e) {
                        errorReport(e, printStackTrace(), 'inject::applyPreGlobalCode', arguments);
                    }
                }
            },

            applyPostGlobalCode: function(globalCode) {
                if (globalCode) {
                    try {
                        /* Applying Post Js */
                        vwoe_$('head').append('<script class="vwo-global-code" type="text/javascript">' + globalCode.postJS + '</script>');
                        /* Applying Global CSS */
                        vwoe_$('head').append('<style class="vwo-global-code">' + globalCode.css + '</style>');
                    } catch (e) {
                        errorReport(e, printStackTrace(), 'inject::applyPostGlobalCode', arguments);
                    }
                }
            },

            unapplyVariation: function(state) {
                var stack = state.stack
                  , elements = state.elements;

                for (var i = stack.length - 1; i >= 0; i--) {
                    this.applyControlForOp(elements[stack[i].el], stack[i].op, stack[i].XPath);
                }
                return state;
            },

            applyVariations: function(variations, selector, globalCode) {
                var variation = null;

                for (var i = 0; i < variations.length; i++) {
                    variation = variations[i];

                    if (variation.action === 'apply') {
                        this.applyVariation(variation.state);
                    } else if (variation.action === 'unapply') {
                        this.unapplyVariation(variation.state);
                    }
                }

                // return array of states of each variation
                var arr = [];
                for (i = 0; i < variations.length; i++) {
                    arr[i] = variations[i].state;
                }
                var retval = {
                    states: arr,
                    // eslint-disable-next-line
                    xpath: vwoe_$(selector).XPath()
                };

                // Repaint glass on each Iframe after every operation to update data-xpath attribute.
                this.putGlassOnEachIframe();

                /**
				 * HACK: We let the variation unapply and apply normally above so that the XPath calculation
				 * (for coal goal) is not affected in any way. Once calculation is done. We do a full body
				 * control application and apply variation again.
				 */
                if (window.VWOInjected.testType === 'ab') {
                    this.applyControl();
                    var variationApplied = false;
                    for (i = 0; i < variations.length; i++) {
                        variation = variations[i];

                        if (variation.action === 'apply') {
                            this.applyVariation(variation.state, globalCode);
                            this.executeDeferredActions();
                            variationApplied = true;
                        }
                    }
                    //if control was applied as no variation got applied
                    if (!variationApplied) {
                        this.applyPreGlobalCode(globalCode);
                        this.applyPostGlobalCode(globalCode);
                        this.executeDeferredActions();
                    }
                }

                return retval;
            },

            // execute deferred scripts after the last apply operation to avoid duplicity
            executeDeferredActions: function() {
                try {
                    for (var key in window.VWOInjected.deferredScripts) {
                        var action = window.VWOInjected.deferredScripts[key];
                        if (action && typeof action === 'function') {
                            action();
                        }
                    }
                } catch (e) {
                    errorReport(e, printStackTrace(), 'changeApplier::childFrame::executeDeferredActions', arguments);
                }
            }
        }
    };

    changeApplier = frameContext.registerService('changeApplier', changeApplier);

    return changeApplier;
});

var _module_exports;
if (typeof module === "object" && typeof module.exports === "object") {
    _module_exports = module.exports;
    module.exports = undefined;
}
/*!
 * jQuery JavaScript Library v2.1.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-04-28T16:01Z
 */

(function(global, factory) {

    if (typeof module === "object" && typeof module.exports === "object") {
        // For CommonJS and CommonJS-like environments where a proper `window`
        // is present, execute the factory and get jQuery.
        // For environments that do not have a `window` with a `document`
        // (such as Node.js), expose a factory as module.exports.
        // This accentuates the need for the creation of a real `window`.
        // e.g. var jQuery = require("jquery")(window);
        // See ticket #14549 for more info.
        module.exports = global.document ? factory(global, true) : function(w) {
            if (!w.document) {
                throw new Error("jQuery requires a window with a document");
            }
            return factory(w);
        }
        ;
    } else {
        factory(global);
    }

    // Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function(window, noGlobal) {

    // Support: Firefox 18+
    // Can't be in strict mode, several libs including ASP.NET trace
    // the stack via arguments.caller.callee and Firefox dies if
    // you try to trace through "use strict" call chains. (#13335)
    //

    var arr = [];

    var slice = arr.slice;

    var concat = arr.concat;

    var push = arr.push;

    var indexOf = arr.indexOf;

    var class2type = {};

    var toString = class2type.toString;

    var hasOwn = class2type.hasOwnProperty;

    var support = {};

    var // Use the correct document accordingly with window argument (sandbox)
    document = window.document
      ,
    version = "2.1.4"
      ,
    // Define a local copy of jQuery
    jQuery = function(selector, context) {
        // The jQuery object is actually just the init constructor 'enhanced'
        // Need init if jQuery is called (just allow error to be thrown if not included)
        return new jQuery.fn.init(selector,context);
    }
      ,
    // Support: Android<4.1
    // Make sure we trim BOM and NBSP
    rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g
      ,
    // Matches dashed string for camelizing
    rmsPrefix = /^-ms-/
      , rdashAlpha = /-([\da-z])/gi
      ,
    // Used by jQuery.camelCase as callback to replace()
    fcamelCase = function(all, letter) {
        return letter.toUpperCase();
    };

    jQuery.fn = jQuery.prototype = {
        // The current version of jQuery being used
        jquery: version,

        constructor: jQuery,

        // Start with an empty selector
        selector: "",

        // The default length of a jQuery object is 0
        length: 0,

        toArray: function() {
            return slice.call(this);
        },

        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function(num) {
            return num != null ?
            // Return just the one element from the set
            (num < 0 ? this[num + this.length] : this[num]) :
            // Return all the elements in a clean array
            slice.call(this);
        },

        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function(elems) {

            // Build a new jQuery matched element set
            var ret = jQuery.merge(this.constructor(), elems);

            // Add the old object onto the stack (as a reference)
            ret.prevObject = this;
            ret.context = this.context;

            // Return the newly-formed element set
            return ret;
        },

        // Execute a callback for every element in the matched set.
        // (You can seed the arguments with an array of args, but this is
        // only used internally.)
        each: function(callback, args) {
            return jQuery.each(this, callback, args);
        },

        map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },

        slice: function() {
            return this.pushStack(slice.apply(this, arguments));
        },

        first: function() {
            return this.eq(0);
        },

        last: function() {
            return this.eq(-1);
        },

        eq: function(i) {
            var len = this.length
              , j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },

        end: function() {
            return this.prevObject || this.constructor(null);
        },

        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: push,
        sort: arr.sort,
        splice: arr.splice
    };

    jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;

        // Handle a deep copy situation
        if (typeof target === "boolean") {
            deep = target;

            // Skip the boolean and the target
            target = arguments[i] || {};
            i++;
        }

        // Handle case when target is a string or something (possible in deep copy)
        if (typeof target !== "object" && !jQuery.isFunction(target)) {
            target = {};
        }

        // Extend jQuery itself if only one argument is passed
        if (i === length) {
            target = this;
            i--;
        }

        for (; i < length; i++) {
            // Only deal with non-null/undefined values
            if ((options = arguments[i]) != null) {
                // Extend the base object
                for (name in options) {
                    src = target[name];
                    copy = options[name];

                    // Prevent never-ending loop
                    if (target === copy) {
                        continue;
                    }

                    // Recurse if we're merging plain objects or arrays
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];

                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }

                        // Never move original objects, clone them
                        target[name] = jQuery.extend(deep, clone, copy);

                        // Don't bring in undefined values
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }

        // Return the modified object
        return target;
    }
    ;

    jQuery.extend({
        // Unique for each copy of jQuery on the page
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

        // Assume jQuery is ready without the ready module
        isReady: true,

        error: function(msg) {
            throw new Error(msg);
        },

        noop: function() {},

        isFunction: function(obj) {
            return jQuery.type(obj) === "function";
        },

        isArray: Array.isArray,

        isWindow: function(obj) {
            return obj != null && obj === obj.window;
        },

        isNumeric: function(obj) {
            // parseFloat NaNs numeric-cast false positives (null|true|false|"")
            // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
            // subtraction forces infinities to NaN
            // adding 1 corrects loss of precision from parseFloat (#15100)
            return !jQuery.isArray(obj) && (obj - parseFloat(obj) + 1) >= 0;
        },

        isPlainObject: function(obj) {
            // Not plain objects:
            // - Any object or value whose internal [[Class]] property is not "[object Object]"
            // - DOM nodes
            // - window
            if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                return false;
            }

            if (obj.constructor && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                return false;
            }

            // If the function hasn't returned already, we're confident that
            // |obj| is a plain object, created by {} or constructed with new Object
            return true;
        },

        isEmptyObject: function(obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },

        type: function(obj) {
            if (obj == null) {
                return obj + "";
            }
            // Support: Android<4.0, iOS<6 (functionish RegExp)
            return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
        },

        // Evaluates a script in a global context
        globalEval: function(code) {
            var script, indirect = eval;

            code = jQuery.trim(code);

            if (code) {
                // If the code includes a valid, prologue position
                // strict mode pragma, execute code by injecting a
                // script tag into the document.
                if (code.indexOf("use strict") === 1) {
                    script = document.createElement("script");
                    script.text = code;
                    document.head.appendChild(script).parentNode.removeChild(script);
                } else {
                    // Otherwise, avoid the DOM node creation, insertion
                    // and removal by using an indirect global eval
                    indirect(code);
                }
            }
        },

        // Convert dashed to camelCase; used by the css and data modules
        // Support: IE9-11+
        // Microsoft forgot to hump their vendor prefix (#9572)
        camelCase: function(string) {
            return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        },

        nodeName: function(elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },

        // args is for internal usage only
        each: function(obj, callback, args) {
            var value, i = 0, length = obj.length, isArray = isArraylike(obj);

            if (args) {
                if (isArray) {
                    for (; i < length; i++) {
                        value = callback.apply(obj[i], args);

                        if (value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.apply(obj[i], args);

                        if (value === false) {
                            break;
                        }
                    }
                }

                // A special, fast, case for the most common use of each
            } else {
                if (isArray) {
                    for (; i < length; i++) {
                        value = callback.call(obj[i], i, obj[i]);

                        if (value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.call(obj[i], i, obj[i]);

                        if (value === false) {
                            break;
                        }
                    }
                }
            }

            return obj;
        },

        // Support: Android<4.1
        trim: function(text) {
            return text == null ? "" : (text + "").replace(rtrim, "");
        },

        // results is for internal usage only
        makeArray: function(arr, results) {
            var ret = results || [];

            if (arr != null) {
                if (isArraylike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
                } else {
                    push.call(ret, arr);
                }
            }

            return ret;
        },

        inArray: function(elem, arr, i) {
            return arr == null ? -1 : indexOf.call(arr, elem, i);
        },

        merge: function(first, second) {
            var len = +second.length
              , j = 0
              , i = first.length;

            for (; j < len; j++) {
                first[i++] = second[j];
            }

            first.length = i;

            return first;
        },

        grep: function(elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;

            // Go through the array, only saving the items
            // that pass the validator function
            for (; i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) {
                    matches.push(elems[i]);
                }
            }

            return matches;
        },

        // arg is for internal usage only
        map: function(elems, callback, arg) {
            var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];

            // Go through the array, translating each of the items to their new values
            if (isArray) {
                for (; i < length; i++) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                        ret.push(value);
                    }
                }

                // Go through every key on the object,
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                        ret.push(value);
                    }
                }
            }

            // Flatten any nested arrays
            return concat.apply([], ret);
        },

        // A global GUID counter for objects
        guid: 1,

        // Bind a function to a context, optionally partially applying any
        // arguments.
        proxy: function(fn, context) {
            var tmp, args, proxy;

            if (typeof context === "string") {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }

            // Quick check to determine if target is callable, in the spec
            // this throws a TypeError, but we will just return undefined.
            if (!jQuery.isFunction(fn)) {
                return undefined;
            }

            // Simulated bind
            args = slice.call(arguments, 2);
            proxy = function() {
                return fn.apply(context || this, args.concat(slice.call(arguments)));
            }
            ;

            // Set the guid of unique handler to the same of original handler, so it can be removed
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;

            return proxy;
        },

        now: Date.now,

        // jQuery.support is not used in Core but other projects attach their
        // properties to it so it needs to exist.
        support: support
    });

    // Populate the class2type map
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });

    function isArraylike(obj) {

        // Support: iOS 8.2 (not reproducible in simulator)
        // `in` check used to prevent JIT error (gh-2145)
        // hasOwn isn't used here due to false negatives
        // regarding Nodelist length in IE
        var length = "length"in obj && obj.length
          , type = jQuery.type(obj);

        if (type === "function" || jQuery.isWindow(obj)) {
            return false;
        }

        if (obj.nodeType === 1 && length) {
            return true;
        }

        return type === "array" || length === 0 || typeof length === "number" && length > 0 && (length - 1)in obj;
    }
    var Sizzle = /*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
    (function(window) {

        var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate,
        // Local document vars
        setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains,
        // Instance-specific data
        expando = "sizzle" + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function(a, b) {
            if (a === b) {
                hasDuplicate = true;
            }
            return 0;
        },
        // General-purpose constants
        MAX_NEGATIVE = 1 << 31,
        // Instance methods
        hasOwn = ({}).hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, // Use a stripped-down indexOf as it's faster than native
        // http://jsperf.com/thor-indexof-vs-for/5
        indexOf = function(list, elem) {
            var i = 0
              , len = list.length;
            for (; i < len; i++) {
                if (list[i] === elem) {
                    return i;
                }
            }
            return -1;
        },
        booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
        // Regular expressions

        // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
        whitespace = "[\\x20\\t\\r\\n\\f]", // http://www.w3.org/TR/css3-syntax/#characters
        characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
        // Loosely modeled on CSS identifier characters
        // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
        // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
        identifier = characterEncoding.replace("w", "w#"),
        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
        attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace + // Operator (capture 2)
        "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
        "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
        pseudos = ":(" + characterEncoding + ")(?:\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
        // 1. quoted (capture 3; capture 4 or capture 5)
        "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + // 2. simple (capture 6)
        "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)
        ".*" + ")\\)|)",
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rwhitespace = new RegExp(whitespace + "+","g"), rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$","g"),
        rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
        rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]","g"),
        rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"),
        matchExpr = {
            "ID": new RegExp("^#(" + characterEncoding + ")"),
            "CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
            "TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
            "ATTR": new RegExp("^" + attributes),
            "PSEUDO": new RegExp("^" + pseudos),
            "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)","i"),
            "bool": new RegExp("^(?:" + booleans + ")$","i"),
            // For use in libraries implementing .is()
            // We use this for POS matching in `select`
            "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)","i")
        },
        rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i,
        rnative = /^[^{]+\{\s*\[native \w/,
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        rsibling = /[+~]/, rescape = /'|\\/g,
        // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
        runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)","ig"), funescape = function(_, escaped, escapedWhitespace) {
            var high = "0x" + escaped - 0x10000;
            // NaN means non-codepoint
            // Support: Firefox<24
            // Workaround erroneous numeric interpretation of +"0x"
            return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint
            String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)
            String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
        },
        // Used for iframes
        // See setDocument()
        // Removing the function wrapper causes a "Permission Denied"
        // error in IE
        unloadHandler = function() {
            setDocument();
        };

        // Optimize for push.apply( _, NodeList )
        try {
            push.apply((arr = slice.call(preferredDoc.childNodes)), preferredDoc.childNodes);
            // Support: Android<4.0
            // Detect silently failing push.apply
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr.length ?
                // Leverage slice if possible
                function(target, els) {
                    push_native.apply(target, slice.call(els));
                }
                :
                // Support: IE<9
                // Otherwise append directly
                function(target, els) {
                    var j = target.length
                      , i = 0;
                    // Can't trust NodeList.length
                    while ((target[j++] = els[i++])) {}
                    target.length = j - 1;
                }
            };
        }

        function Sizzle(selector, context, results, seed) {
            var match, elem, m, nodeType, // QSA vars
            i, groups, old, nid, newContext, newSelector;

            if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                setDocument(context);
            }

            context = context || document;
            results = results || [];
            nodeType = context.nodeType;

            if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

                return results;
            }

            if (!seed && documentIsHTML) {

                // Try to shortcut find operations when possible (e.g., not under DocumentFragment)
                if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                    // Speed-up: Sizzle("#ID")
                    if ((m = match[1])) {
                        if (nodeType === 9) {
                            elem = context.getElementById(m);
                            // Check parentNode to catch when Blackberry 4.6 returns
                            // nodes that are no longer in the document (jQuery #6963)
                            if (elem && elem.parentNode) {
                                // Handle the case where IE, Opera, and Webkit return items
                                // by name instead of ID
                                if (elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            } else {
                                return results;
                            }
                        } else {
                            // Context is not a document
                            if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                results.push(elem);
                                return results;
                            }
                        }

                        // Speed-up: Sizzle("TAG")
                    } else if (match[2]) {
                        push.apply(results, context.getElementsByTagName(selector));
                        return results;

                        // Speed-up: Sizzle(".CLASS")
                    } else if ((m = match[3]) && support.getElementsByClassName) {
                        push.apply(results, context.getElementsByClassName(m));
                        return results;
                    }
                }

                // QSA path
                if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                    nid = old = expando;
                    newContext = context;
                    newSelector = nodeType !== 1 && selector;

                    // qSA works strangely on Element-rooted queries
                    // We can work around this by specifying an extra ID on the root
                    // and working up from there (Thanks to Andrew Dupont for the technique)
                    // IE 8 doesn't work on object elements
                    if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                        groups = tokenize(selector);

                        if ((old = context.getAttribute("id"))) {
                            nid = old.replace(rescape, "\\$&");
                        } else {
                            context.setAttribute("id", nid);
                        }
                        nid = "[id='" + nid + "'] ";

                        i = groups.length;
                        while (i--) {
                            groups[i] = nid + toSelector(groups[i]);
                        }
                        newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                        newSelector = groups.join(",");
                    }

                    if (newSelector) {
                        try {
                            push.apply(results, newContext.querySelectorAll(newSelector));
                            return results;
                        } catch (qsaError) {} finally {
                            if (!old) {
                                context.removeAttribute("id");
                            }
                        }
                    }
                }
            }

            // All others
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }

        /**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
        function createCache() {
            var keys = [];

            function cache(key, value) {
                // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
                if (keys.push(key + " ") > Expr.cacheLength) {
                    // Only keep the most recent entries
                    delete cache[keys.shift()];
                }
                return (cache[key + " "] = value);
            }
            return cache;
        }

        /**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
        function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }

        /**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
        function assert(fn) {
            var div = document.createElement("div");

            try {
                return !!fn(div);
            } catch (e) {
                return false;
            } finally {
                // Remove from its parent by default
                if (div.parentNode) {
                    div.parentNode.removeChild(div);
                }
                // release memory in IE
                div = null;
            }
        }

        /**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
        function addHandle(attrs, handler) {
            var arr = attrs.split("|")
              , i = attrs.length;

            while (i--) {
                Expr.attrHandle[arr[i]] = handler;
            }
        }

        /**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
        function siblingCheck(a, b) {
            var cur = b && a
              , diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);

            // Use IE sourceIndex if available on both nodes
            if (diff) {
                return diff;
            }

            // Check if b follows a
            if (cur) {
                while ((cur = cur.nextSibling)) {
                    if (cur === b) {
                        return -1;
                    }
                }
            }

            return a ? 1 : -1;
        }

        /**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
        function createInputPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === type;
            }
            ;
        }

        /**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
        function createButtonPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type;
            }
            ;
        }

        /**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
        function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;

                    // Match elements found at the specified indexes
                    while (i--) {
                        if (seed[(j = matchIndexes[i])]) {
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }

        /**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
        function testContext(context) {
            return context && typeof context.getElementsByTagName !== "undefined" && context;
        }

        // Expose support vars for convenience
        support = Sizzle.support = {};

        /**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
        isXML = Sizzle.isXML = function(elem) {
            // documentElement is verified for cases where it doesn't yet exist
            // (such as loading iframes in IE - #4833)
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false;
        }
        ;

        /**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
        setDocument = Sizzle.setDocument = function(node) {
            var hasCompare, parent, doc = node ? node.ownerDocument || node : preferredDoc;

            // If no document and documentElement is available, return
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                return document;
            }

            // Set our document
            document = doc;
            docElem = doc.documentElement;
            parent = doc.defaultView;

            // Support: IE>8
            // If iframe document is assigned to "document" variable and if iframe has been reloaded,
            // IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
            // IE6-8 do not support the defaultView property so parent will be undefined
            if (parent && parent !== parent.top) {
                // IE11 does not have attachEvent, so all must suffer
                if (parent.addEventListener) {
                    parent.addEventListener("unload", unloadHandler, false);
                } else if (parent.attachEvent) {
                    parent.attachEvent("onunload", unloadHandler);
                }
            }

            /* Support tests
	---------------------------------------------------------------------- */
            documentIsHTML = !isXML(doc);

            /* Attributes
	---------------------------------------------------------------------- */

            // Support: IE<8
            // Verify that getAttribute really returns attributes and not properties
            // (excepting IE8 booleans)
            support.attributes = assert(function(div) {
                div.className = "i";
                return !div.getAttribute("className");
            });

            /* getElement(s)By*
	---------------------------------------------------------------------- */

            // Check if getElementsByTagName("*") returns only elements
            support.getElementsByTagName = assert(function(div) {
                div.appendChild(doc.createComment(""));
                return !div.getElementsByTagName("*").length;
            });

            // Support: IE<9
            support.getElementsByClassName = rnative.test(doc.getElementsByClassName);

            // Support: IE<10
            // Check if getElementById returns elements by name
            // The broken getElementById methods don't pick up programatically-set names,
            // so use a roundabout getElementsByName test
            support.getById = assert(function(div) {
                docElem.appendChild(div).id = expando;
                return !doc.getElementsByName || !doc.getElementsByName(expando).length;
            });

            // ID find and filter
            if (support.getById) {
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                        var m = context.getElementById(id);
                        // Check parentNode to catch when Blackberry 4.6 returns
                        // nodes that are no longer in the document #6963
                        return m && m.parentNode ? [m] : [];
                    }
                }
                ;
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        return elem.getAttribute("id") === attrId;
                    }
                    ;
                }
                ;
            } else {
                // Support: IE6/7
                // getElementById is not reliable as a find shortcut
                delete Expr.find["ID"];

                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    }
                    ;
                }
                ;
            }

            // Tag
            Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
                if (typeof context.getElementsByTagName !== "undefined") {
                    return context.getElementsByTagName(tag);

                    // DocumentFragment nodes don't have gEBTN
                } else if (support.qsa) {
                    return context.querySelectorAll(tag);
                }
            }
            :
            function(tag, context) {
                var elem, tmp = [], i = 0, // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                results = context.getElementsByTagName(tag);

                // Filter out possible comments
                if (tag === "*") {
                    while ((elem = results[i++])) {
                        if (elem.nodeType === 1) {
                            tmp.push(elem);
                        }
                    }

                    return tmp;
                }
                return results;
            }
            ;

            // Class
            Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
                if (documentIsHTML) {
                    return context.getElementsByClassName(className);
                }
            }
            ;

            /* QSA/matchesSelector
	---------------------------------------------------------------------- */

            // QSA and matchesSelector support

            // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
            rbuggyMatches = [];

            // qSa(:focus) reports false when true (Chrome 21)
            // We allow this because of a bug in IE8/9 that throws an error
            // whenever `document.activeElement` is accessed on an iframe
            // So, we allow :focus to pass through QSA all the time to avoid the IE error
            // See http://bugs.jquery.com/ticket/13378
            rbuggyQSA = [];

            if ((support.qsa = rnative.test(doc.querySelectorAll))) {
                // Build QSA regex
                // Regex strategy adopted from Diego Perini
                assert(function(div) {
                    // Select is set to empty string on purpose
                    // This is to test IE's treatment of not explicitly
                    // setting a boolean content attribute,
                    // since its presence should be enough
                    // http://bugs.jquery.com/ticket/12359
                    docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\f]' msallowcapture=''>" + "<option selected=''></option></select>";

                    // Support: IE8, Opera 11-12.16
                    // Nothing should be selected when empty strings follow ^= or $= or *=
                    // The test attribute must be unknown in Opera but "safe" for WinRT
                    // http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
                    if (div.querySelectorAll("[msallowcapture^='']").length) {
                        rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    }

                    // Support: IE8
                    // Boolean attributes and "value" are not treated correctly
                    if (!div.querySelectorAll("[selected]").length) {
                        rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    }

                    // Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
                    if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
                        rbuggyQSA.push("~=");
                    }

                    // Webkit/Opera - :checked should return selected option elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    // IE8 throws error here and will not see later tests
                    if (!div.querySelectorAll(":checked").length) {
                        rbuggyQSA.push(":checked");
                    }

                    // Support: Safari 8+, iOS 8+
                    // https://bugs.webkit.org/show_bug.cgi?id=136851
                    // In-page `selector#id sibing-combinator selector` fails
                    if (!div.querySelectorAll("a#" + expando + "+*").length) {
                        rbuggyQSA.push(".#.+[+~]");
                    }
                });

                assert(function(div) {
                    // Support: Windows 8 Native Apps
                    // The type and name attributes are restricted during .innerHTML assignment
                    var input = doc.createElement("input");
                    input.setAttribute("type", "hidden");
                    div.appendChild(input).setAttribute("name", "D");

                    // Support: IE8
                    // Enforce case-sensitivity of name attribute
                    if (div.querySelectorAll("[name=d]").length) {
                        rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                    }

                    // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                    // IE8 throws error here and will not see later tests
                    if (!div.querySelectorAll(":enabled").length) {
                        rbuggyQSA.push(":enabled", ":disabled");
                    }

                    // Opera 10-11 does not throw on post-comma invalid pseudos
                    div.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }

            if ((support.matchesSelector = rnative.test((matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)))) {

                assert(function(div) {
                    // Check to see if it's possible to do matchesSelector
                    // on a disconnected node (IE 9)
                    support.disconnectedMatch = matches.call(div, "div");

                    // This should fail with an exception
                    // Gecko does not error, returns false instead
                    matches.call(div, "[s!='']:x");
                    rbuggyMatches.push("!=", pseudos);
                });
            }

            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

            /* Contains
	---------------------------------------------------------------------- */
            hasCompare = rnative.test(docElem.compareDocumentPosition);

            // Element contains another
            // Purposefully does not implement inclusive descendent
            // As in, an element does not contain itself
            contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a
                  , bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            }
            : function(a, b) {
                if (b) {
                    while ((b = b.parentNode)) {
                        if (b === a) {
                            return true;
                        }
                    }
                }
                return false;
            }
            ;

            /* Sorting
	---------------------------------------------------------------------- */

            // Document order sorting
            sortOrder = hasCompare ? function(a, b) {

                // Flag for duplicate removal
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }

                // Sort on method existence if only one input has compareDocumentPosition
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) {
                    return compare;
                }

                // Calculate position if both inputs belong to the same document
                compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :
                // Otherwise we know they are disconnected
                1;

                // Disconnected nodes
                if (compare & 1 || (!support.sortDetached && b.compareDocumentPosition(a) === compare)) {

                    // Choose the first element that is related to our preferred document
                    if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                        return -1;
                    }
                    if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                        return 1;
                    }

                    // Maintain original order
                    return sortInput ? (indexOf(sortInput, a) - indexOf(sortInput, b)) : 0;
                }

                return compare & 4 ? -1 : 1;
            }
            : function(a, b) {
                // Exit early if the nodes are identical
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }

                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];

                // Parentless nodes are either documents or disconnected
                if (!aup || !bup) {
                    return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? (indexOf(sortInput, a) - indexOf(sortInput, b)) : 0;

                    // If the nodes are siblings, we can do a quick check
                } else if (aup === bup) {
                    return siblingCheck(a, b);
                }

                // Otherwise we need full lists of their ancestors for comparison
                cur = a;
                while ((cur = cur.parentNode)) {
                    ap.unshift(cur);
                }
                cur = b;
                while ((cur = cur.parentNode)) {
                    bp.unshift(cur);
                }

                // Walk down the tree looking for a discrepancy
                while (ap[i] === bp[i]) {
                    i++;
                }

                return i ? // Do a sibling check if the nodes have a common ancestor
                siblingCheck(ap[i], bp[i]) :
                // Otherwise nodes in our document sort first
                ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            }
            ;

            return doc;
        }
        ;

        Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
        }
        ;

        Sizzle.matchesSelector = function(elem, expr) {
            // Set document vars if needed
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }

            // Make sure that attribute selectors are quoted
            expr = expr.replace(rattributeQuotes, "='$1']");

            if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

                try {
                    var ret = matches.call(elem, expr);

                    // IE 9's matchesSelector returns false on disconnected nodes
                    if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
                    // fragment in IE 9
                    elem.document && elem.document.nodeType !== 11) {
                        return ret;
                    }
                } catch (e) {}
            }

            return Sizzle(expr, document, null, [elem]).length > 0;
        }
        ;

        Sizzle.contains = function(context, elem) {
            // Set document vars if needed
            if ((context.ownerDocument || context) !== document) {
                setDocument(context);
            }
            return contains(context, elem);
        }
        ;

        Sizzle.attr = function(elem, name) {
            // Set document vars if needed
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }

            var fn = Expr.attrHandle[name.toLowerCase()]
              , // Don't get fooled by Object.prototype properties (jQuery #13807)
            val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

            return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        }
        ;

        Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        }
        ;

        /**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
        Sizzle.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i = 0;

            // Unless we *know* we can detect duplicates, assume their presence
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);

            if (hasDuplicate) {
                while ((elem = results[i++])) {
                    if (elem === results[i]) {
                        j = duplicates.push(i);
                    }
                }
                while (j--) {
                    results.splice(duplicates[j], 1);
                }
            }

            // Clear input after sorting to release objects
            // See https://github.com/jquery/sizzle/pull/225
            sortInput = null;

            return results;
        }
        ;

        /**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
        getText = Sizzle.getText = function(elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;

            if (!nodeType) {
                // If no nodeType, this is expected to be an array
                while ((node = elem[i++])) {
                    // Do not traverse comment nodes
                    ret += getText(node);
                }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                // Use textContent for elements
                // innerText usage removed for consistency of new lines (jQuery #11153)
                if (typeof elem.textContent === "string") {
                    return elem.textContent;
                } else {
                    // Traverse its children
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        ret += getText(elem);
                    }
                }
            } else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
            }
            // Do not include comment or processing instruction nodes

            return ret;
        }
        ;

        Expr = Sizzle.selectors = {

            // Can be adjusted by the user
            cacheLength: 50,

            createPseudo: markFunction,

            match: matchExpr,

            attrHandle: {},

            find: {},

            relative: {
                ">": {
                    dir: "parentNode",
                    first: true
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: true
                },
                "~": {
                    dir: "previousSibling"
                }
            },

            preFilter: {
                "ATTR": function(match) {
                    match[1] = match[1].replace(runescape, funescape);

                    // Move the given value to match[3] whether quoted or unquoted
                    match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

                    if (match[2] === "~=") {
                        match[3] = " " + match[3] + " ";
                    }

                    return match.slice(0, 4);
                },

                "CHILD": function(match) {
                    /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
                    match[1] = match[1].toLowerCase();

                    if (match[1].slice(0, 3) === "nth") {
                        // nth-* requires argument
                        if (!match[3]) {
                            Sizzle.error(match[0]);
                        }

                        // numeric x and y parameters for Expr.filter.CHILD
                        // remember that false/true cast respectively to 0/1
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                        match[5] = +((match[7] + match[8]) || match[3] === "odd");

                        // other types prohibit arguments
                    } else if (match[3]) {
                        Sizzle.error(match[0]);
                    }

                    return match;
                },

                "PSEUDO": function(match) {
                    var excess, unquoted = !match[6] && match[2];

                    if (matchExpr["CHILD"].test(match[0])) {
                        return null;
                    }

                    // Accept quoted arguments as-is
                    if (match[3]) {
                        match[2] = match[4] || match[5] || "";

                        // Strip excess characters from unquoted arguments
                    } else if (unquoted && rpseudo.test(unquoted) && // Get excess from tokenize (recursively)
                    (excess = tokenize(unquoted, true)) && // advance to the next closing parenthesis
                    (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

                        // excess is a negative index
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }

                    // Return only captures needed by the pseudo filter method (type and argument)
                    return match.slice(0, 3);
                }
            },

            filter: {

                "TAG": function(nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === "*" ? function() {
                        return true;
                    }
                    : function(elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    }
                    ;
                },

                "CLASS": function(className) {
                    var pattern = classCache[className + " "];

                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                        return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                    });
                },

                "ATTR": function(name, operator, check) {
                    return function(elem) {
                        var result = Sizzle.attr(elem, name);

                        if (result == null) {
                            return operator === "!=";
                        }
                        if (!operator) {
                            return true;
                        }

                        result += "";

                        return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                    }
                    ;
                },

                "CHILD": function(type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth"
                      , forward = type.slice(-4) !== "last"
                      , ofType = what === "of-type";

                    return first === 1 && last === 0 ?
                    // Shortcut for :nth-*(n)
                    function(elem) {
                        return !!elem.parentNode;
                    }
                    :
                    function(elem, context, xml) {
                        var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;

                        if (parent) {

                            // :(first|last|only)-(child|of-type)
                            if (simple) {
                                while (dir) {
                                    node = elem;
                                    while ((node = node[dir])) {
                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                            return false;
                                        }
                                    }
                                    // Reverse direction for :only-* (if we haven't yet done so)
                                    start = dir = type === "only" && !start && "nextSibling";
                                }
                                return true;
                            }

                            start = [forward ? parent.firstChild : parent.lastChild];

                            // non-xml :nth-child(...) stores cache data on `parent`
                            if (forward && useCache) {
                                // Seek `elem` from a previously-cached index
                                outerCache = parent[expando] || (parent[expando] = {});
                                cache = outerCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];

                                while ((node = ++nodeIndex && node && node[dir] ||
                                // Fallback to seeking `elem` from the start
                                (diff = nodeIndex = 0) || start.pop())) {

                                    // When found, cache indexes on `parent` and break
                                    if (node.nodeType === 1 && ++diff && node === elem) {
                                        outerCache[type] = [dirruns, nodeIndex, diff];
                                        break;
                                    }
                                }

                                // Use previously-cached element index if available
                            } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                                diff = cache[1];

                                // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
                            } else {
                                // Use the same loop as above to seek `elem` from the start
                                while ((node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())) {

                                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                        // Cache the index of each encountered element
                                        if (useCache) {
                                            (node[expando] || (node[expando] = {}))[type] = [dirruns, diff];
                                        }

                                        if (node === elem) {
                                            break;
                                        }
                                    }
                                }
                            }

                            // Incorporate the offset, then check against cycle size
                            diff -= last;
                            return diff === first || (diff % first === 0 && diff / first >= 0);
                        }
                    }
                    ;
                },

                "PSEUDO": function(pseudo, argument) {
                    // pseudo-class names are case-insensitive
                    // http://www.w3.org/TR/selectors/#pseudo-classes
                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                    // Remember that setFilters inherits from pseudos
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

                    // The user may use createPseudo to indicate that
                    // arguments are needed to create the filter function
                    // just as Sizzle does
                    if (fn[expando]) {
                        return fn(argument);
                    }

                    // But maintain support for old signatures
                    if (fn.length > 1) {
                        args = [pseudo, pseudo, "", argument];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                            var idx, matched = fn(seed, argument), i = matched.length;
                            while (i--) {
                                idx = indexOf(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function(elem) {
                            return fn(elem, 0, args);
                        }
                        ;
                    }

                    return fn;
                }
            },

            pseudos: {
                // Potentially complex pseudos
                "not": markFunction(function(selector) {
                    // Trim the selector passed to compile
                    // to avoid treating leading and trailing
                    // spaces as combinators
                    var input = []
                      , results = []
                      , matcher = compile(selector.replace(rtrim, "$1"));

                    return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;

                        // Match elements unmatched by `matcher`
                        while (i--) {
                            if ((elem = unmatched[i])) {
                                seed[i] = !(matches[i] = elem);
                            }
                        }
                    }) : function(elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        // Don't keep the element (issue #299)
                        input[0] = null;
                        return !results.pop();
                    }
                    ;
                }),

                "has": markFunction(function(selector) {
                    return function(elem) {
                        return Sizzle(selector, elem).length > 0;
                    }
                    ;
                }),

                "contains": markFunction(function(text) {
                    text = text.replace(runescape, funescape);
                    return function(elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    }
                    ;
                }),

                // "Whether an element is represented by a :lang() selector
                // is based solely on the element's language value
                // being equal to the identifier C,
                // or beginning with the identifier C immediately followed by "-".
                // The matching of C against the element's language value is performed case-insensitively.
                // The identifier C does not have to be a valid language name."
                // http://www.w3.org/TR/selectors/#lang-pseudo
                "lang": markFunction(function(lang) {
                    // lang value must be a valid identifier
                    if (!ridentifier.test(lang || "")) {
                        Sizzle.error("unsupported lang: " + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        var elemLang;
                        do {
                            if ((elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang"))) {

                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                            }
                        } while ((elem = elem.parentNode) && elem.nodeType === 1);return false;
                    }
                    ;
                }),

                // Miscellaneous
                "target": function(elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },

                "root": function(elem) {
                    return elem === docElem;
                },

                "focus": function(elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },

                // Boolean properties
                "enabled": function(elem) {
                    return elem.disabled === false;
                },

                "disabled": function(elem) {
                    return elem.disabled === true;
                },

                "checked": function(elem) {
                    // In CSS3, :checked should return both checked and selected elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    var nodeName = elem.nodeName.toLowerCase();
                    return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
                },

                "selected": function(elem) {
                    // Accessing this property makes selected-by-default
                    // options in Safari work properly
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex;
                    }

                    return elem.selected === true;
                },

                // Contents
                "empty": function(elem) {
                    // http://www.w3.org/TR/selectors/#empty-pseudo
                    // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                    //   but not by others (comment: 8; processing instruction: 7; etc.)
                    // nodeType < 6 works because attributes (2) do not appear as children
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        if (elem.nodeType < 6) {
                            return false;
                        }
                    }
                    return true;
                },

                "parent": function(elem) {
                    return !Expr.pseudos["empty"](elem);
                },

                // Element/input types
                "header": function(elem) {
                    return rheader.test(elem.nodeName);
                },

                "input": function(elem) {
                    return rinputs.test(elem.nodeName);
                },

                "button": function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === "button" || name === "button";
                },

                "text": function(elem) {
                    var attr;
                    return elem.nodeName.toLowerCase() === "input" && elem.type === "text" &&
                    // Support: IE<8
                    // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
                    ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
                },

                // Position-in-collection
                "first": createPositionalPseudo(function() {
                    return [0];
                }),

                "last": createPositionalPseudo(function(matchIndexes, length) {
                    return [length - 1];
                }),

                "eq": createPositionalPseudo(function(matchIndexes, length, argument) {
                    return [argument < 0 ? argument + length : argument];
                }),

                "even": createPositionalPseudo(function(matchIndexes, length) {
                    var i = 0;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),

                "odd": createPositionalPseudo(function(matchIndexes, length) {
                    var i = 1;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),

                "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; --i >= 0; ) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),

                "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; ++i < length; ) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                })
            }
        };

        Expr.pseudos["nth"] = Expr.pseudos["eq"];

        // Add button/input type pseudos
        for (i in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
        }) {
            Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {
            submit: true,
            reset: true
        }) {
            Expr.pseudos[i] = createButtonPseudo(i);
        }

        // Easy API for creating new setFilters
        function setFilters() {}
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();

        tokenize = Sizzle.tokenize = function(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];

            if (cached) {
                return parseOnly ? 0 : cached.slice(0);
            }

            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;

            while (soFar) {

                // Comma and first run
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                        // Don't consume trailing commas as valid
                        soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push((tokens = []));
                }

                matched = false;

                // Combinators
                if ((match = rcombinators.exec(soFar))) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        // Cast descendant combinators to space
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }

                // Filters
                for (type in Expr.filter) {
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: type,
                            matches: match
                        });
                        soFar = soFar.slice(matched.length);
                    }
                }

                if (!matched) {
                    break;
                }
            }

            // Return the length of the invalid excess
            // if we're just parsing
            // Otherwise, throw an error or return tokens
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
            tokenCache(selector, groups).slice(0);
        }
        ;

        function toSelector(tokens) {
            var i = 0
              , len = tokens.length
              , selector = "";
            for (; i < len; i++) {
                selector += tokens[i].value;
            }
            return selector;
        }

        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir
              , checkNonElements = base && dir === "parentNode"
              , doneName = done++;

            return combinator.first ? // Check against closest ancestor/preceding element
            function(elem, context, xml) {
                while ((elem = elem[dir])) {
                    if (elem.nodeType === 1 || checkNonElements) {
                        return matcher(elem, context, xml);
                    }
                }
            }
            :
            // Check against all ancestor/preceding elements
            function(elem, context, xml) {
                var oldCache, outerCache, newCache = [dirruns, doneName];

                // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
                if (xml) {
                    while ((elem = elem[dir])) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                                return true;
                            }
                        }
                    }
                } else {
                    while ((elem = elem[dir])) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});
                            if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

                                // Assign to newCache so results back-propagate to previous elements
                                return (newCache[2] = oldCache[2]);
                            } else {
                                // Reuse newcache so results back-propagate to previous elements
                                outerCache[dir] = newCache;

                                // A match means we're done; a fail means we have to keep checking
                                if ((newCache[2] = matcher(elem, context, xml))) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
            ;
        }

        function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
                var i = matchers.length;
                while (i--) {
                    if (!matchers[i](elem, context, xml)) {
                        return false;
                    }
                }
                return true;
            }
            : matchers[0];
        }

        function multipleContexts(selector, contexts, results) {
            var i = 0
              , len = contexts.length;
            for (; i < len; i++) {
                Sizzle(selector, contexts[i], results);
            }
            return results;
        }

        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;

            for (; i < len; i++) {
                if ((elem = unmatched[i])) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) {
                            map.push(i);
                        }
                    }
                }
            }

            return newUnmatched;
        }

        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function(seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length,
                // Get initial elements from seed or context
                elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
                // Prefilter to get matcher input, preserving a map for seed-results synchronization
                matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
                matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                postFinder || (seed ? preFilter : preexisting || postFilter) ?
                // ...intermediate processing is necessary
                [] :
                // ...otherwise use results directly
                results : matcherIn;

                // Find primary matches
                if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                }

                // Apply postFilter
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);

                    // Un-match failing elements by moving them back to matcherIn
                    i = temp.length;
                    while (i--) {
                        if ((elem = temp[i])) {
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                        }
                    }
                }

                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            // Get the final matcherOut by condensing this intermediate into postFinder contexts
                            temp = [];
                            i = matcherOut.length;
                            while (i--) {
                                if ((elem = matcherOut[i])) {
                                    // Restore matcherIn since elem is not yet a final match
                                    temp.push((matcherIn[i] = elem));
                                }
                            }
                            postFinder(null, (matcherOut = []), temp, xml);
                        }

                        // Move matched elements from seed to results to keep them synchronized
                        i = matcherOut.length;
                        while (i--) {
                            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

                                seed[temp] = !(results[temp] = elem);
                            }
                        }
                    }

                    // Add elements to results, through postFinder if defined
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) {
                        postFinder(null, results, matcherOut, xml);
                    } else {
                        push.apply(results, matcherOut);
                    }
                }
            });
        }

        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0,
            // The foundational matcher ensures that elements are reachable from top-level context(s)
            matchContext = addCombinator(function(elem) {
                return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
                return indexOf(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [function(elem, context, xml) {
                var ret = (!leadingRelative && (xml || context !== outermostContext)) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                // Avoid hanging onto element (issue #299)
                checkContext = null;
                return ret;
            }
            ];

            for (; i < len; i++) {
                if ((matcher = Expr.relative[tokens[i].type])) {
                    matchers = [addCombinator(elementMatcher(matchers), matcher)];
                } else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

                    // Return special upon seeing a positional matcher
                    if (matcher[expando]) {
                        // Find the next relative operator (if any) for proper handling
                        j = ++i;
                        for (; j < len; j++) {
                            if (Expr.relative[tokens[j].type]) {
                                break;
                            }
                        }
                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(// If the preceding token was a descendant combinator, insert an implicit any-element `*`
                        tokens.slice(0, i - 1).concat({
                            value: tokens[i - 2].type === " " ? "*" : ""
                        })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens((tokens = tokens.slice(j))), j < len && toSelector(tokens));
                    }
                    matchers.push(matcher);
                }
            }

            return elementMatcher(matchers);
        }

        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0
              , byElement = elementMatchers.length > 0
              , superMatcher = function(seed, context, xml, results, outermost) {
                var elem, j, matcher, matchedCount = 0, i = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, // We must always have either seed elements or outermost context
                elems = seed || byElement && Expr.find["TAG"]("*", outermost), // Use integer dirruns iff this is the outermost matcher
                dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1), len = elems.length;

                if (outermost) {
                    outermostContext = context !== document && context;
                }

                // Add elements passing elementMatchers directly to results
                // Keep `i` a string if there are no elements so `matchedCount` will be "00" below
                // Support: IE<9, Safari
                // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
                for (; i !== len && (elem = elems[i]) != null; i++) {
                    if (byElement && elem) {
                        j = 0;
                        while ((matcher = elementMatchers[j++])) {
                            if (matcher(elem, context, xml)) {
                                results.push(elem);
                                break;
                            }
                        }
                        if (outermost) {
                            dirruns = dirrunsUnique;
                        }
                    }

                    // Track unmatched elements for set filters
                    if (bySet) {
                        // They will have gone through all possible matchers
                        if ((elem = !matcher && elem)) {
                            matchedCount--;
                        }

                        // Lengthen the array for every element, matched or not
                        if (seed) {
                            unmatched.push(elem);
                        }
                    }
                }

                // Apply set filters to unmatched elements
                matchedCount += i;
                if (bySet && i !== matchedCount) {
                    j = 0;
                    while ((matcher = setMatchers[j++])) {
                        matcher(unmatched, setMatched, context, xml);
                    }

                    if (seed) {
                        // Reintegrate element matches to eliminate the need for sorting
                        if (matchedCount > 0) {
                            while (i--) {
                                if (!(unmatched[i] || setMatched[i])) {
                                    setMatched[i] = pop.call(results);
                                }
                            }
                        }

                        // Discard index placeholder values to get only actual matches
                        setMatched = condense(setMatched);
                    }

                    // Add matches to results
                    push.apply(results, setMatched);

                    // Seedless set matches succeeding multiple successful matchers stipulate sorting
                    if (outermost && !seed && setMatched.length > 0 && (matchedCount + setMatchers.length) > 1) {

                        Sizzle.uniqueSort(results);
                    }
                }

                // Override manipulation of globals by nested matchers
                if (outermost) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                }

                return unmatched;
            };

            return bySet ? markFunction(superMatcher) : superMatcher;
        }

        compile = Sizzle.compile = function(selector, match /* Internal Use Only */
        ) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];

            if (!cached) {
                // Generate a function of recursive functions that can be used to check each element
                if (!match) {
                    match = tokenize(selector);
                }
                i = match.length;
                while (i--) {
                    cached = matcherFromTokens(match[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached);
                    } else {
                        elementMatchers.push(cached);
                    }
                }

                // Cache the compiled function
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

                // Save selector and tokenization
                cached.selector = selector;
            }
            return cached;
        }
        ;

        /**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
        select = Sizzle.select = function(selector, context, results, seed) {
            var i, tokens, token, type, find, compiled = typeof selector === "function" && selector, match = !seed && tokenize((selector = compiled.selector || selector));

            results = results || [];

            // Try to minimize operations if there is no seed and only one group
            if (match.length === 1) {

                // Take a shortcut and set the context if the root selector is an ID
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

                    context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                    if (!context) {
                        return results;

                        // Precompiled matchers will still verify ancestry, so step up a level
                    } else if (compiled) {
                        context = context.parentNode;
                    }

                    selector = selector.slice(tokens.shift().value.length);
                }

                // Fetch a seed set for right-to-left matching
                i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                while (i--) {
                    token = tokens[i];

                    // Abort if we hit a combinator
                    if (Expr.relative[(type = token.type)]) {
                        break;
                    }
                    if ((find = Expr.find[type])) {
                        // Search, expanding context for leading sibling combinators
                        if ((seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context))) {

                            // If seed is empty or no tokens remain, we can return early
                            tokens.splice(i, 1);
                            selector = seed.length && toSelector(tokens);
                            if (!selector) {
                                push.apply(results, seed);
                                return results;
                            }

                            break;
                        }
                    }
                }
            }

            // Compile and execute a filtering function if one is not provided
            // Provide `match` to avoid retokenization if we modified the selector above
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
        }
        ;

        // One-time assignments

        // Sort stability
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

        // Support: Chrome 14-35+
        // Always assume duplicates if they aren't passed to the comparison function
        support.detectDuplicates = !!hasDuplicate;

        // Initialize against the default document
        setDocument();

        // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
        // Detached nodes confoundingly follow *each other*
        support.sortDetached = assert(function(div1) {
            // Should return 1, but returns 4 (following)
            return div1.compareDocumentPosition(document.createElement("div")) & 1;
        });

        // Support: IE<8
        // Prevent attribute/property "interpolation"
        // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
        if (!assert(function(div) {
            div.innerHTML = "<a href='#'></a>";
            return div.firstChild.getAttribute("href") === "#";
        })) {
            addHandle("type|href|height|width", function(elem, name, isXML) {
                if (!isXML) {
                    return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
                }
            });
        }

        // Support: IE<9
        // Use defaultValue in place of getAttribute("value")
        if (!support.attributes || !assert(function(div) {
            div.innerHTML = "<input/>";
            div.firstChild.setAttribute("value", "");
            return div.firstChild.getAttribute("value") === "";
        })) {
            addHandle("value", function(elem, name, isXML) {
                if (!isXML && elem.nodeName.toLowerCase() === "input") {
                    return elem.defaultValue;
                }
            });
        }

        // Support: IE<9
        // Use getAttributeNode to fetch booleans when getAttribute lies
        if (!assert(function(div) {
            return div.getAttribute("disabled") == null;
        })) {
            addHandle(booleans, function(elem, name, isXML) {
                var val;
                if (!isXML) {
                    return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
                }
            });
        }

        return Sizzle;

    }
    )(window);

    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;

    var rneedsContext = jQuery.expr.match.needsContext;

    var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);

    var risSimple = /^.[^:#\[\.,]*$/;

    // Implement the identical functionality for filter and not
    function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function(elem, i) {
                /* jshint -W018 */
                return !!qualifier.call(elem, i, elem) !== not;
            });

        }

        if (qualifier.nodeType) {
            return jQuery.grep(elements, function(elem) {
                return (elem === qualifier) !== not;
            });

        }

        if (typeof qualifier === "string") {
            if (risSimple.test(qualifier)) {
                return jQuery.filter(qualifier, elements, not);
            }

            qualifier = jQuery.filter(qualifier, elements);
        }

        return jQuery.grep(elements, function(elem) {
            return (indexOf.call(qualifier, elem) >= 0) !== not;
        });
    }

    jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];

        if (not) {
            expr = ":not(" + expr + ")";
        }

        return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
            return elem.nodeType === 1;
        }));
    }
    ;

    jQuery.fn.extend({
        find: function(selector) {
            var i, len = this.length, ret = [], self = this;

            if (typeof selector !== "string") {
                return this.pushStack(jQuery(selector).filter(function() {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }

            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
            }

            // Needed because $( selector, context ) becomes $( context ).find( selector )
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = this.selector ? this.selector + " " + selector : selector;
            return ret;
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        is: function(selector) {
            return !!winnow(this,
            // If this is a positional/relative selector, check membership in the returned set
            // so $("p:first").is("p:last") won't return true for a doc with two "p".
            typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
    });

    // Initialize a jQuery object

    // A central reference to the root jQuery(document)
    var rootjQuery,
    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
    init = jQuery.fn.init = function(selector, context) {
        var match, elem;

        // HANDLE: $(""), $(null), $(undefined), $(false)
        if (!selector) {
            return this;
        }

        // Handle HTML strings
        if (typeof selector === "string") {
            if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
                // Assume that strings that start and end with <> are HTML and skip the regex check
                match = [null, selector, null];

            } else {
                match = rquickExpr.exec(selector);
            }

            // Match html or make sure no context is specified for #id
            if (match && (match[1] || !context)) {

                // HANDLE: $(html) -> $(array)
                if (match[1]) {
                    context = context instanceof jQuery ? context[0] : context;

                    // Option to run scripts is true for back-compat
                    // Intentionally let the error be thrown if parseHTML is not present
                    jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

                    // HANDLE: $(html, props)
                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                        for (match in context) {
                            // Properties of context are called as methods if possible
                            if (jQuery.isFunction(this[match])) {
                                this[match](context[match]);

                                // ...and otherwise set as attributes
                            } else {
                                this.attr(match, context[match]);
                            }
                        }
                    }

                    return this;

                    // HANDLE: $(#id)
                } else {
                    elem = document.getElementById(match[2]);

                    // Support: Blackberry 4.6
                    // gEBID returns nodes no longer in the document (#6963)
                    if (elem && elem.parentNode) {
                        // Inject the element directly into the jQuery object
                        this.length = 1;
                        this[0] = elem;
                    }

                    this.context = document;
                    this.selector = selector;
                    return this;
                }

                // HANDLE: $(expr, $(...))
            } else if (!context || context.jquery) {
                return (context || rootjQuery).find(selector);

                // HANDLE: $(expr, context)
                // (which is just equivalent to: $(context).find(expr)
            } else {
                return this.constructor(context).find(selector);
            }

            // HANDLE: $(DOMElement)
        } else if (selector.nodeType) {
            this.context = this[0] = selector;
            this.length = 1;
            return this;

            // HANDLE: $(function)
            // Shortcut for document ready
        } else if (jQuery.isFunction(selector)) {
            return typeof rootjQuery.ready !== "undefined" ? rootjQuery.ready(selector) : // Execute immediately if ready is not present
            selector(jQuery);
        }

        if (selector.selector !== undefined) {
            this.selector = selector.selector;
            this.context = selector.context;
        }

        return jQuery.makeArray(selector, this);
    }
    ;

    // Give the init function the jQuery prototype for later instantiation
    init.prototype = jQuery.fn;

    // Initialize central reference
    rootjQuery = jQuery(document);

    var rparentsprev = /^(?:parents|prev(?:Until|All))/
      , // Methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
    };

    jQuery.extend({
        dir: function(elem, dir, until) {
            var matched = []
              , truncate = until !== undefined;

            while ((elem = elem[dir]) && elem.nodeType !== 9) {
                if (elem.nodeType === 1) {
                    if (truncate && jQuery(elem).is(until)) {
                        break;
                    }
                    matched.push(elem);
                }
            }
            return matched;
        },

        sibling: function(n, elem) {
            var matched = [];

            for (; n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                    matched.push(n);
                }
            }

            return matched;
        }
    });

    jQuery.fn.extend({
        has: function(target) {
            var targets = jQuery(target, this)
              , l = targets.length;

            return this.filter(function() {
                var i = 0;
                for (; i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },

        closest: function(selectors, context) {
            var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;

            for (; i < l; i++) {
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                    // Always skip document fragments
                    if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 :
                    // Don't pass non-elements to Sizzle
                    cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

                        matched.push(cur);
                        break;
                    }
                }
            }

            return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
        },

        // Determine the position of an element within the set
        index: function(elem) {

            // No argument, return index in parent
            if (!elem) {
                return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1;
            }

            // Index in selector
            if (typeof elem === "string") {
                return indexOf.call(jQuery(elem), this[0]);
            }

            // Locate the position of the desired element
            return indexOf.call(this,
            // If it receives a jQuery object, the first element is used
            elem.jquery ? elem[0] : elem);
        },

        add: function(selector, context) {
            return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
        },

        addBack: function(selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
    });

    function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {}
        return cur;
    }

    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
            return jQuery.dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },
        next: function(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
            return jQuery.dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
            return jQuery.dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
            return jQuery.sibling(elem.firstChild);
        },
        contents: function(elem) {
            return elem.contentDocument || jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var matched = jQuery.map(this, fn, until);

            if (name.slice(-5) !== "Until") {
                selector = until;
            }

            if (selector && typeof selector === "string") {
                matched = jQuery.filter(selector, matched);
            }

            if (this.length > 1) {
                // Remove duplicates
                if (!guaranteedUnique[name]) {
                    jQuery.unique(matched);
                }

                // Reverse order for parents* and prev-derivatives
                if (rparentsprev.test(name)) {
                    matched.reverse();
                }
            }

            return this.pushStack(matched);
        }
        ;
    });
    var rnotwhite = (/\S+/g);

    // String to Object options format cache
    var optionsCache = {};

    // Convert String-formatted options into Object-formatted ones and store in cache
    function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(rnotwhite) || [], function(_, flag) {
            object[flag] = true;
        });
        return object;
    }

    /*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
    jQuery.Callbacks = function(options) {

        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ? (optionsCache[options] || createOptions(options)) : jQuery.extend({}, options);

        var // Last fire value (for non-forgettable lists)
        memory, // Flag to know if list was already fired
        fired, // Flag to know if list is currently firing
        firing, // First callback to fire (used internally by add and fireWith)
        firingStart, // End of the loop when firing
        firingLength, // Index of currently firing callback (modified by remove if needed)
        firingIndex, // Actual callback list
        list = [], // Stack of fire calls for repeatable lists
        stack = !options.once && [], // Fire callbacks
        fire = function(data) {
            memory = options.memory && data;
            fired = true;
            firingIndex = firingStart || 0;
            firingStart = 0;
            firingLength = list.length;
            firing = true;
            for (; list && firingIndex < firingLength; firingIndex++) {
                if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                    memory = false;
                    // To prevent further calls using add
                    break;
                }
            }
            firing = false;
            if (list) {
                if (stack) {
                    if (stack.length) {
                        fire(stack.shift());
                    }
                } else if (memory) {
                    list = [];
                } else {
                    self.disable();
                }
            }
        }, // Actual Callbacks object
        self = {
            // Add a callback or a collection of callbacks to the list
            add: function() {
                if (list) {
                    // First, we save the current length
                    var start = list.length;
                    (function add(args) {
                        jQuery.each(args, function(_, arg) {
                            var type = jQuery.type(arg);
                            if (type === "function") {
                                if (!options.unique || !self.has(arg)) {
                                    list.push(arg);
                                }
                            } else if (arg && arg.length && type !== "string") {
                                // Inspect recursively
                                add(arg);
                            }
                        });
                    }
                    )(arguments);
                    // Do we need to add the callbacks to the
                    // current firing batch?
                    if (firing) {
                        firingLength = list.length;
                        // With memory, if we're not firing then
                        // we should call right away
                    } else if (memory) {
                        firingStart = start;
                        fire(memory);
                    }
                }
                return this;
            },
            // Remove a callback from the list
            remove: function() {
                if (list) {
                    jQuery.each(arguments, function(_, arg) {
                        var index;
                        while ((index = jQuery.inArray(arg, list, index)) > -1) {
                            list.splice(index, 1);
                            // Handle firing indexes
                            if (firing) {
                                if (index <= firingLength) {
                                    firingLength--;
                                }
                                if (index <= firingIndex) {
                                    firingIndex--;
                                }
                            }
                        }
                    });
                }
                return this;
            },
            // Check if a given callback is in the list.
            // If no argument is given, return whether or not list has callbacks attached.
            has: function(fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
            },
            // Remove all callbacks from the list
            empty: function() {
                list = [];
                firingLength = 0;
                return this;
            },
            // Have the list do nothing anymore
            disable: function() {
                list = stack = memory = undefined;
                return this;
            },
            // Is it disabled?
            disabled: function() {
                return !list;
            },
            // Lock the list in its current state
            lock: function() {
                stack = undefined;
                if (!memory) {
                    self.disable();
                }
                return this;
            },
            // Is it locked?
            locked: function() {
                return !stack;
            },
            // Call all callbacks with the given context and arguments
            fireWith: function(context, args) {
                if (list && (!fired || stack)) {
                    args = args || [];
                    args = [context, args.slice ? args.slice() : args];
                    if (firing) {
                        stack.push(args);
                    } else {
                        fire(args);
                    }
                }
                return this;
            },
            // Call all the callbacks with the given arguments
            fire: function() {
                self.fireWith(this, arguments);
                return this;
            },
            // To know if the callbacks have already been called at least once
            fired: function() {
                return !!fired;
            }
        };

        return self;
    }
    ;

    jQuery.extend({

        Deferred: function(func) {
            var tuples = [// action, add listener, listener list, final state
            ["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]]
              , state = "pending"
              , promise = {
                state: function() {
                    return state;
                },
                always: function() {
                    deferred.done(arguments).fail(arguments);
                    return this;
                },
                then: function(/* fnDone, fnFail, fnProgress */
                ) {
                    var fns = arguments;
                    return jQuery.Deferred(function(newDefer) {
                        jQuery.each(tuples, function(i, tuple) {
                            var fn = jQuery.isFunction(fns[i]) && fns[i];
                            // deferred[ done | fail | progress ] for forwarding actions to newDefer
                            deferred[tuple[1]](function() {
                                var returned = fn && fn.apply(this, arguments);
                                if (returned && jQuery.isFunction(returned.promise)) {
                                    returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                                } else {
                                    newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                                }
                            });
                        });
                        fns = null;
                    }).promise();
                },
                // Get a promise for this deferred
                // If obj is provided, the promise aspect is added to the object
                promise: function(obj) {
                    return obj != null ? jQuery.extend(obj, promise) : promise;
                }
            }
              , deferred = {};

            // Keep pipe for back-compat
            promise.pipe = promise.then;

            // Add list-specific methods
            jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2]
                  , stateString = tuple[3];

                // promise[ done | fail | progress ] = list.add
                promise[tuple[1]] = list.add;

                // Handle state
                if (stateString) {
                    list.add(function() {
                        // state = [ resolved | rejected ]
                        state = stateString;

                        // [ reject_list | resolve_list ].disable; progress_list.lock
                    }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
                }

                // deferred[ resolve | reject | notify ]
                deferred[tuple[0]] = function() {
                    deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                    return this;
                }
                ;
                deferred[tuple[0] + "With"] = list.fireWith;
            });

            // Make the deferred a promise
            promise.promise(deferred);

            // Call given func if any
            if (func) {
                func.call(deferred, deferred);
            }

            // All done!
            return deferred;
        },

        // Deferred helper
        when: function(subordinate /* , ..., subordinateN */
        ) {
            var i = 0, resolveValues = slice.call(arguments), length = resolveValues.length,
            // the count of uncompleted subordinates
            remaining = length !== 1 || (subordinate && jQuery.isFunction(subordinate.promise)) ? length : 0,
            // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
            deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
            // Update function for both resolve and progress values
            updateFunc = function(i, contexts, values) {
                return function(value) {
                    contexts[i] = this;
                    values[i] = arguments.length > 1 ? slice.call(arguments) : value;
                    if (values === progressValues) {
                        deferred.notifyWith(contexts, values);
                    } else if (!(--remaining)) {
                        deferred.resolveWith(contexts, values);
                    }
                }
                ;
            },
            progressValues, progressContexts, resolveContexts;

            // Add listeners to Deferred subordinates; treat others as resolved
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (; i < length; i++) {
                    if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                        resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
                    } else {
                        --remaining;
                    }
                }
            }

            // If we're not waiting on anything, resolve the master
            if (!remaining) {
                deferred.resolveWith(resolveContexts, resolveValues);
            }

            return deferred.promise();
        }
    });

    // The deferred used on DOM ready
    var readyList;

    jQuery.fn.ready = function(fn) {
        // Add the callback
        jQuery.ready.promise().done(fn);

        return this;
    }
    ;

    jQuery.extend({
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,

        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,

        // Hold (or release) the ready event
        holdReady: function(hold) {
            if (hold) {
                jQuery.readyWait++;
            } else {
                jQuery.ready(true);
            }
        },

        // Handle when the DOM is ready
        ready: function(wait) {

            // Abort if there are pending holds or we're already ready
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }

            // Remember that the DOM is ready
            jQuery.isReady = true;

            // If a normal DOM Ready event fired, decrement, and wait if need be
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }

            // If there are functions bound, to execute
            readyList.resolveWith(document, [jQuery]);

            // Trigger any bound ready events
            if (jQuery.fn.triggerHandler) {
                jQuery(document).triggerHandler("ready");
                jQuery(document).off("ready");
            }
        }
    });

    /**
 * The ready event handler and self cleanup method
 */
    function completed() {
        document.removeEventListener("DOMContentLoaded", completed, false);
        window.removeEventListener("load", completed, false);
        jQuery.ready();
    }

    jQuery.ready.promise = function(obj) {
        if (!readyList) {

            readyList = jQuery.Deferred();

            // Catch cases where $(document).ready() is called after the browser event has already occurred.
            // We once tried to use readyState "interactive" here, but it caused issues like the one
            // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
            if (document.readyState === "complete") {
                // Handle it asynchronously to allow scripts the opportunity to delay ready
                setTimeout(jQuery.ready);

            } else {

                // Use the handy event callback
                document.addEventListener("DOMContentLoaded", completed, false);

                // A fallback to window.onload, that will always work
                window.addEventListener("load", completed, false);
            }
        }
        return readyList.promise(obj);
    }
    ;

    // Kick off the DOM ready check even if the user does not
    jQuery.ready.promise();

    // Multifunctional method to get and set values of a collection
    // The value/s can optionally be executed if it's a function
    var access = jQuery.access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0
          , len = elems.length
          , bulk = key == null;

        // Sets many values
        if (jQuery.type(key) === "object") {
            chainable = true;
            for (i in key) {
                jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
            }

            // Sets one value
        } else if (value !== undefined) {
            chainable = true;

            if (!jQuery.isFunction(value)) {
                raw = true;
            }

            if (bulk) {
                // Bulk operations run against the entire set
                if (raw) {
                    fn.call(elems, value);
                    fn = null;

                    // ...except when executing function values
                } else {
                    bulk = fn;
                    fn = function(elem, key, value) {
                        return bulk.call(jQuery(elem), value);
                    }
                    ;
                }
            }

            if (fn) {
                for (; i < len; i++) {
                    fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                }
            }
        }

        return chainable ? elems :
        // Gets
        bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
    }
    ;

    /**
 * Determines whether an object can have data
 */
    jQuery.acceptData = function(owner) {
        // Accepts only:
        //  - Node
        //    - Node.ELEMENT_NODE
        //    - Node.DOCUMENT_NODE
        //  - Object
        //    - Any
        /* jshint -W018 */
        return owner.nodeType === 1 || owner.nodeType === 9 || !(+owner.nodeType);
    }
    ;

    function Data() {
        // Support: Android<4,
        // Old WebKit does not have Object.preventExtensions/freeze method,
        // return new empty object instead with no [[set]] accessor
        Object.defineProperty(this.cache = {}, 0, {
            get: function() {
                return {};
            }
        });

        this.expando = jQuery.expando + Data.uid++;
    }

    Data.uid = 1;
    Data.accepts = jQuery.acceptData;

    Data.prototype = {
        key: function(owner) {
            // We can accept data for non-element nodes in modern browsers,
            // but we should not, see #8335.
            // Always return the key for a frozen object.
            if (!Data.accepts(owner)) {
                return 0;
            }

            var descriptor = {}
              , // Check if the owner object already has a cache key
            unlock = owner[this.expando];

            // If not, create one
            if (!unlock) {
                unlock = Data.uid++;

                // Secure it in a non-enumerable, non-writable property
                try {
                    descriptor[this.expando] = {
                        value: unlock
                    };
                    Object.defineProperties(owner, descriptor);

                    // Support: Android<4
                    // Fallback to a less secure definition
                } catch (e) {
                    descriptor[this.expando] = unlock;
                    jQuery.extend(owner, descriptor);
                }
            }

            // Ensure the cache object
            if (!this.cache[unlock]) {
                this.cache[unlock] = {};
            }

            return unlock;
        },
        set: function(owner, data, value) {
            var prop, // There may be an unlock assigned to this node,
            // if there is no entry for this "owner", create one inline
            // and set the unlock as though an owner entry had always existed
            unlock = this.key(owner), cache = this.cache[unlock];

            // Handle: [ owner, key, value ] args
            if (typeof data === "string") {
                cache[data] = value;

                // Handle: [ owner, { properties } ] args
            } else {
                // Fresh assignments by object are shallow copied
                if (jQuery.isEmptyObject(cache)) {
                    jQuery.extend(this.cache[unlock], data);
                    // Otherwise, copy the properties one-by-one to the cache object
                } else {
                    for (prop in data) {
                        cache[prop] = data[prop];
                    }
                }
            }
            return cache;
        },
        get: function(owner, key) {
            // Either a valid cache is found, or will be created.
            // New caches will be created and the unlock returned,
            // allowing direct access to the newly created
            // empty data object. A valid owner object must be provided.
            var cache = this.cache[this.key(owner)];

            return key === undefined ? cache : cache[key];
        },
        access: function(owner, key, value) {
            var stored;
            // In cases where either:
            //
            //   1. No key was specified
            //   2. A string key was specified, but no value provided
            //
            // Take the "read" path and allow the get method to determine
            // which value to return, respectively either:
            //
            //   1. The entire cache object
            //   2. The data stored at the key
            //
            if (key === undefined || ((key && typeof key === "string") && value === undefined)) {

                stored = this.get(owner, key);

                return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
            }

            // [*]When the key is not a string, or both a key and value
            // are specified, set or extend (existing objects) with either:
            //
            //   1. An object of properties
            //   2. A key and value
            //
            this.set(owner, key, value);

            // Since the "set" path can have two possible entry points
            // return the expected data based on which path was taken[*]
            return value !== undefined ? value : key;
        },
        remove: function(owner, key) {
            var i, name, camel, unlock = this.key(owner), cache = this.cache[unlock];

            if (key === undefined) {
                this.cache[unlock] = {};

            } else {
                // Support array or space separated string of keys
                if (jQuery.isArray(key)) {
                    // If "name" is an array of keys...
                    // When data is initially created, via ("key", "val") signature,
                    // keys will be converted to camelCase.
                    // Since there is no way to tell _how_ a key was added, remove
                    // both plain key and camelCase key. #12786
                    // This will only penalize the array argument path.
                    name = key.concat(key.map(jQuery.camelCase));
                } else {
                    camel = jQuery.camelCase(key);
                    // Try the string as a key before any manipulation
                    if (key in cache) {
                        name = [key, camel];
                    } else {
                        // If a key with the spaces exists, use it.
                        // Otherwise, create an array by matching non-whitespace
                        name = camel;
                        name = name in cache ? [name] : (name.match(rnotwhite) || []);
                    }
                }

                i = name.length;
                while (i--) {
                    delete cache[name[i]];
                }
            }
        },
        hasData: function(owner) {
            return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
        },
        discard: function(owner) {
            if (owner[this.expando]) {
                delete this.cache[owner[this.expando]];
            }
        }
    };
    var data_priv = new Data();

    var data_user = new Data();

    //	Implementation Summary
    //
    //	1. Enforce API surface and semantic compatibility with 1.9.x branch
    //	2. Improve the module's maintainability by reducing the storage
    //		paths to a single mechanism.
    //	3. Use the same single mechanism to support "private" and "user" data.
    //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
    //	5. Avoid exposing implementation details on user objects (eg. expando properties)
    //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/
      , rmultiDash = /([A-Z])/g;

    function dataAttr(elem, key, data) {
        var name;

        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if (data === undefined && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
            data = elem.getAttribute(name);

            if (typeof data === "string") {
                try {
                    data = data === "true" ? true : data === "false" ? false : data === "null" ? null : // Only convert to a number if it doesn't change the string
                    +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
                } catch (e) {}

                // Make sure we set the data so it isn't changed later
                data_user.set(elem, key, data);
            } else {
                data = undefined;
            }
        }
        return data;
    }

    jQuery.extend({
        hasData: function(elem) {
            return data_user.hasData(elem) || data_priv.hasData(elem);
        },

        data: function(elem, name, data) {
            return data_user.access(elem, name, data);
        },

        removeData: function(elem, name) {
            data_user.remove(elem, name);
        },

        // TODO: Now that all calls to _data and _removeData have been replaced
        // with direct calls to data_priv methods, these can be deprecated.
        _data: function(elem, name, data) {
            return data_priv.access(elem, name, data);
        },

        _removeData: function(elem, name) {
            data_priv.remove(elem, name);
        }
    });

    jQuery.fn.extend({
        data: function(key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;

            // Gets all values
            if (key === undefined) {
                if (this.length) {
                    data = data_user.get(elem);

                    if (elem.nodeType === 1 && !data_priv.get(elem, "hasDataAttrs")) {
                        i = attrs.length;
                        while (i--) {

                            // Support: IE11+
                            // The attrs elements can be null (#14894)
                            if (attrs[i]) {
                                name = attrs[i].name;
                                if (name.indexOf("data-") === 0) {
                                    name = jQuery.camelCase(name.slice(5));
                                    dataAttr(elem, name, data[name]);
                                }
                            }
                        }
                        data_priv.set(elem, "hasDataAttrs", true);
                    }
                }

                return data;
            }

            // Sets multiple values
            if (typeof key === "object") {
                return this.each(function() {
                    data_user.set(this, key);
                });
            }

            return access(this, function(value) {
                var data, camelKey = jQuery.camelCase(key);

                // The calling jQuery object (element matches) is not empty
                // (and therefore has an element appears at this[ 0 ]) and the
                // `value` parameter was not undefined. An empty jQuery object
                // will result in `undefined` for elem = this[ 0 ] which will
                // throw an exception if an attempt to read a data cache is made.
                if (elem && value === undefined) {
                    // Attempt to get data from the cache
                    // with the key as-is
                    data = data_user.get(elem, key);
                    if (data !== undefined) {
                        return data;
                    }

                    // Attempt to get data from the cache
                    // with the key camelized
                    data = data_user.get(elem, camelKey);
                    if (data !== undefined) {
                        return data;
                    }

                    // Attempt to "discover" the data in
                    // HTML5 custom data-* attrs
                    data = dataAttr(elem, camelKey, undefined);
                    if (data !== undefined) {
                        return data;
                    }

                    // We tried really hard, but the data doesn't exist.
                    return;
                }

                // Set the data...
                this.each(function() {
                    // First, attempt to store a copy or reference of any
                    // data that might've been store with a camelCased key.
                    var data = data_user.get(this, camelKey);

                    // For HTML5 data-* attribute interop, we have to
                    // store property names with dashes in a camelCase form.
                    // This might not apply to all properties...*
                    data_user.set(this, camelKey, value);

                    // *... In the case of properties that might _actually_
                    // have dashes, we need to also store a copy of that
                    // unchanged property.
                    if (key.indexOf("-") !== -1 && data !== undefined) {
                        data_user.set(this, key, value);
                    }
                });
            }, null, value, arguments.length > 1, null, true);
        },

        removeData: function(key) {
            return this.each(function() {
                data_user.remove(this, key);
            });
        }
    });

    jQuery.extend({
        queue: function(elem, type, data) {
            var queue;

            if (elem) {
                type = (type || "fx") + "queue";
                queue = data_priv.get(elem, type);

                // Speed up dequeue by getting out quickly if this is just a lookup
                if (data) {
                    if (!queue || jQuery.isArray(data)) {
                        queue = data_priv.access(elem, type, jQuery.makeArray(data));
                    } else {
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },

        dequeue: function(elem, type) {
            type = type || "fx";

            var queue = jQuery.queue(elem, type)
              , startLength = queue.length
              , fn = queue.shift()
              , hooks = jQuery._queueHooks(elem, type)
              , next = function() {
                jQuery.dequeue(elem, type);
            };

            // If the fx queue is dequeued, always remove the progress sentinel
            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
            }

            if (fn) {

                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if (type === "fx") {
                    queue.unshift("inprogress");
                }

                // Clear up the last queue stop function
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }

            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },

        // Not public - generate a queueHooks object, or return the current one
        _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return data_priv.get(elem, key) || data_priv.access(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    data_priv.remove(elem, [type + "queue", key]);
                })
            });
        }
    });

    jQuery.fn.extend({
        queue: function(type, data) {
            var setter = 2;

            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
            }

            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }

            return data === undefined ? this : this.each(function() {
                var queue = jQuery.queue(this, type, data);

                // Ensure a hooks for this queue
                jQuery._queueHooks(this, type);

                if (type === "fx" && queue[0] !== "inprogress") {
                    jQuery.dequeue(this, type);
                }
            });
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", []);
        },
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function(type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
                if (!(--count)) {
                    defer.resolveWith(elements, [elements]);
                }
            };

            if (typeof type !== "string") {
                obj = type;
                type = undefined;
            }
            type = type || "fx";

            while (i--) {
                tmp = data_priv.get(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

    var cssExpand = ["Top", "Right", "Bottom", "Left"];

    var isHidden = function(elem, el) {
        // isHidden might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
    };

    var rcheckableType = (/^(?:checkbox|radio)$/i);

    (function() {
        var fragment = document.createDocumentFragment()
          , div = fragment.appendChild(document.createElement("div"))
          , input = document.createElement("input");

        // Support: Safari<=5.1
        // Check state lost if the name is set (#11217)
        // Support: Windows Web Apps (WWA)
        // `name` and `type` must use .setAttribute for WWA (#14901)
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");

        div.appendChild(input);

        // Support: Safari<=5.1, Android<4.2
        // Older WebKit doesn't clone checked state correctly in fragments
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

        // Support: IE<=11+
        // Make sure textarea (and checkbox) defaultValue is properly cloned
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
    }
    )();
    var strundefined = typeof undefined;

    support.focusinBubbles = "onfocusin"in window;

    var rkeyEvent = /^key/
      , rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/
      , rfocusMorph = /^(?:focusinfocus|focusoutblur)$/
      , rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

    function returnTrue() {
        return true;
    }

    function returnFalse() {
        return false;
    }

    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {}
    }

    /*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
    jQuery.event = {

        global: {},

        add: function(elem, types, handler, data, selector) {

            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.get(elem);

            // Don't attach events to noData or text/comment nodes (but allow plain objects)
            if (!elemData) {
                return;
            }

            // Caller can pass in an object of custom data in lieu of the handler
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }

            // Make sure that the handler has a unique ID, used to find/remove it later
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }

            // Init the element's event structure and main handler, if this is the first
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function(e) {
                    // Discard the second event of a jQuery.event.trigger() and
                    // when an event is called after a page has unloaded
                    return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
                }
                ;
            }

            // Handle multiple events separated by a space
            types = (types || "").match(rnotwhite) || [""];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();

                // There *must* be a type, no attaching namespace-only handlers
                if (!type) {
                    continue;
                }

                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[type] || {};

                // If selector defined, determine special event api type, otherwise given type
                type = (selector ? special.delegateType : special.bindType) || type;

                // Update special based on newly reset type
                special = jQuery.event.special[type] || {};

                // handleObj is passed to all event handlers
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);

                // Init the event handler queue if we're the first
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;

                    // Only use addEventListener if the special events handler returns false
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false);
                        }
                    }
                }

                if (special.add) {
                    special.add.call(elem, handleObj);

                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }

                // Add to the element's handler list, delegates in front
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }

                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[type] = true;
            }

        },

        // Detach an event or set of events from an element
        remove: function(elem, types, handler, selector, mappedTypes) {

            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.hasData(elem) && data_priv.get(elem);

            if (!elemData || !(events = elemData.events)) {
                return;
            }

            // Once for each type.namespace in types; type may be omitted
            types = (types || "").match(rnotwhite) || [""];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();

                // Unbind all events (on this namespace, if provided) for the element
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }

                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

                // Remove matching events
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];

                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);

                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }

                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }

                    delete events[type];
                }
            }

            // Remove the expando if it's no longer used
            if (jQuery.isEmptyObject(events)) {
                delete elemData.handle;
                data_priv.remove(elem, "events");
            }
        },

        trigger: function(event, data, elem, onlyHandlers) {

            var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

            cur = tmp = elem = elem || document;

            // Don't do events on text and comment nodes
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }

            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }

            if (type.indexOf(".") >= 0) {
                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;

            // Caller can pass in a jQuery.Event object, Object, or just an event type string
            event = event[jQuery.expando] ? event : new jQuery.Event(type,typeof event === "object" && event);

            // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

            // Clean up the event in case it is being reused
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }

            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data == null ? [event] : jQuery.makeArray(data, [event]);

            // Allow special events to draw outside the lines
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }

            // Determine event propagation path in advance, per W3C events spec (#9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }

                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }

            // Fire handlers on the event path
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

                event.type = i > 1 ? bubbleType : special.bindType || type;

                // jQuery handler
                handle = (data_priv.get(cur, "events") || {})[event.type] && data_priv.get(cur, "handle");
                if (handle) {
                    handle.apply(cur, data);
                }

                // Native handler
                handle = ontype && cur[ontype];
                if (handle && handle.apply && jQuery.acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;

            // If nobody prevented the default action, do it now
            if (!onlyHandlers && !event.isDefaultPrevented()) {

                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {

                    // Call a native DOM method on the target with the same name name as the event.
                    // Don't do default actions on window, that's where global variables be (#6170)
                    if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

                        // Don't re-trigger an onFOO event when we call its FOO() method
                        tmp = elem[ontype];

                        if (tmp) {
                            elem[ontype] = null;
                        }

                        // Prevent re-triggering of the same event, since we already bubbled it above
                        jQuery.event.triggered = type;
                        elem[type]();
                        jQuery.event.triggered = undefined;

                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }

            return event.result;
        },

        dispatch: function(event) {

            // Make a writable jQuery.Event from the native event object
            event = jQuery.event.fix(event);

            var i, j, ret, matched, handleObj, handlerQueue = [], args = slice.call(arguments), handlers = (data_priv.get(this, "events") || {})[event.type] || [], special = jQuery.event.special[event.type] || {};

            // Use the fix-ed jQuery.Event rather than the (read-only) native event
            args[0] = event;
            event.delegateTarget = this;

            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }

            // Determine handlers
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);

            // Run delegates first; they may want to stop propagation beneath us
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;

                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

                    // Triggered event must either 1) have no namespace, or 2) have namespace(s)
                    // a subset or equal to those in the bound event (both can have no namespace).
                    if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {

                        event.handleObj = handleObj;
                        event.data = handleObj.data;

                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }

            // Call the postDispatch hook for the mapped type
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }

            return event.result;
        },

        handlers: function(event, handlers) {
            var i, matches, sel, handleObj, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;

            // Find delegate handlers
            // Black-hole SVG <use> instance trees (#13180)
            // Avoid non-left-click bubbling in Firefox (#3861)
            if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {

                for (; cur !== this; cur = cur.parentNode || this) {

                    // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                    if (cur.disabled !== true || event.type !== "click") {
                        matches = [];
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];

                            // Don't conflict with Object.prototype properties (#13203)
                            sel = handleObj.selector + " ";

                            if (matches[sel] === undefined) {
                                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
                            }
                            if (matches[sel]) {
                                matches.push(handleObj);
                            }
                        }
                        if (matches.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matches
                            });
                        }
                    }
                }
            }

            // Add the remaining (directly-bound) handlers
            if (delegateCount < handlers.length) {
                handlerQueue.push({
                    elem: this,
                    handlers: handlers.slice(delegateCount)
                });
            }

            return handlerQueue;
        },

        // Includes some event props shared by KeyEvent and MouseEvent
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

        fixHooks: {},

        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(event, original) {

                // Add which for key events
                if (event.which == null) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }

                return event;
            }
        },

        mouseHooks: {
            props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(event, original) {
                var eventDoc, doc, body, button = original.button;

                // Calculate pageX/Y if missing and clientX/Y available
                if (event.pageX == null && original.clientX != null) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;

                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                }

                // Add which for click: 1 === left; 2 === middle; 3 === right
                // Note: button is not normalized, so don't use it
                if (!event.which && button !== undefined) {
                    event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));
                }

                return event;
            }
        },

        fix: function(event) {
            if (event[jQuery.expando]) {
                return event;
            }

            // Create a writable copy of the event object and normalize some properties
            var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];

            if (!fixHook) {
                this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
            }
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

            event = new jQuery.Event(originalEvent);

            i = copy.length;
            while (i--) {
                prop = copy[i];
                event[prop] = originalEvent[prop];
            }

            // Support: Cordova 2.5 (WebKit) (#13255)
            // All events should have a target; Cordova deviceready doesn't
            if (!event.target) {
                event.target = document;
            }

            // Support: Safari 6.0+, Chrome<28
            // Target should not be a text node (#504, #13143)
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode;
            }

            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },

        special: {
            load: {
                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true
            },
            focus: {
                // Fire native event if possible so blur/focus sequence is correct
                trigger: function() {
                    if (this !== safeActiveElement() && this.focus) {
                        this.focus();
                        return false;
                    }
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: "focusout"
            },
            click: {
                // For checkbox, fire native event so checked state will be right
                trigger: function() {
                    if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
                        this.click();
                        return false;
                    }
                },

                // For cross-browser consistency, don't fire native .click() on links
                _default: function(event) {
                    return jQuery.nodeName(event.target, "a");
                }
            },

            beforeunload: {
                postDispatch: function(event) {

                    // Support: Firefox 20+
                    // Firefox doesn't alert if the returnValue field is not set.
                    if (event.result !== undefined && event.originalEvent) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        },

        simulate: function(type, elem, event, bubble) {
            // Piggyback on a donor event to simulate a different one.
            // Fake originalEvent to avoid donor's stopPropagation, but if the
            // simulated event prevents default then we do the same on the donor.
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true,
                originalEvent: {}
            });
            if (bubble) {
                jQuery.event.trigger(e, null, elem);
            } else {
                jQuery.event.dispatch.call(elem, e);
            }
            if (e.isDefaultPrevented()) {
                event.preventDefault();
            }
        }
    };

    jQuery.removeEvent = function(elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle, false);
        }
    }
    ;

    jQuery.Event = function(src, props) {
        // Allow instantiation without the 'new' keyword
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src,props);
        }

        // Event object
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;

            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android<4.0
            src.returnValue === false ? returnTrue : returnFalse;

            // Event type
        } else {
            this.type = src;
        }

        // Put explicitly provided properties onto the event object
        if (props) {
            jQuery.extend(this, props);
        }

        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || jQuery.now();

        // Mark it as fixed
        this[jQuery.expando] = true;
    }
    ;

    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,

        preventDefault: function() {
            var e = this.originalEvent;

            this.isDefaultPrevented = returnTrue;

            if (e && e.preventDefault) {
                e.preventDefault();
            }
        },
        stopPropagation: function() {
            var e = this.originalEvent;

            this.isPropagationStopped = returnTrue;

            if (e && e.stopPropagation) {
                e.stopPropagation();
            }
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;

            this.isImmediatePropagationStopped = returnTrue;

            if (e && e.stopImmediatePropagation) {
                e.stopImmediatePropagation();
            }

            this.stopPropagation();
        }
    };

    // Create mouseenter/leave events using mouseover/out and event-time checks
    // Support: Chrome 15+
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,

            handle: function(event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;

                // For mousenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                if (!related || (related !== target && !jQuery.contains(target, related))) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });

    // Support: Firefox, Chrome, Safari
    // Create "bubbling" focus and blur events
    if (!support.focusinBubbles) {
        jQuery.each({
            focus: "focusin",
            blur: "focusout"
        }, function(orig, fix) {

            // Attach a single capturing handler on the document while someone wants focusin/focusout
            var handler = function(event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
            };

            jQuery.event.special[fix] = {
                setup: function() {
                    var doc = this.ownerDocument || this
                      , attaches = data_priv.access(doc, fix);

                    if (!attaches) {
                        doc.addEventListener(orig, handler, true);
                    }
                    data_priv.access(doc, fix, (attaches || 0) + 1);
                },
                teardown: function() {
                    var doc = this.ownerDocument || this
                      , attaches = data_priv.access(doc, fix) - 1;

                    if (!attaches) {
                        doc.removeEventListener(orig, handler, true);
                        data_priv.remove(doc, fix);

                    } else {
                        data_priv.access(doc, fix, attaches);
                    }
                }
            };
        });
    }

    jQuery.fn.extend({

        on: function(types, selector, data, fn, /*INTERNAL*/
        one) {
            var origFn, type;

            // Types can be a map of types/handlers
            if (typeof types === "object") {
                // ( types-Object, selector, data )
                if (typeof selector !== "string") {
                    // ( types-Object, data )
                    data = data || selector;
                    selector = undefined;
                }
                for (type in types) {
                    this.on(type, selector, data, types[type], one);
                }
                return this;
            }

            if (data == null && fn == null) {
                // ( types, fn )
                fn = selector;
                data = selector = undefined;
            } else if (fn == null) {
                if (typeof selector === "string") {
                    // ( types, selector, fn )
                    fn = data;
                    data = undefined;
                } else {
                    // ( types, data, fn )
                    fn = data;
                    data = selector;
                    selector = undefined;
                }
            }
            if (fn === false) {
                fn = returnFalse;
            } else if (!fn) {
                return this;
            }

            if (one === 1) {
                origFn = fn;
                fn = function(event) {
                    // Can use an empty set, since event contains the info
                    jQuery().off(event);
                    return origFn.apply(this, arguments);
                }
                ;
                // Use same guid so caller can remove using origFn
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return this.each(function() {
                jQuery.event.add(this, types, fn, data, selector);
            });
        },
        one: function(types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if (typeof types === "object") {
                // ( types-object [, selector] )
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === "function") {
                // ( types [, fn] )
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        },

        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });

    var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi
      , rtagName = /<([\w:]+)/
      , rhtml = /<|&#?\w+;/
      , rnoInnerhtml = /<(?:script|style|link)/i
      , // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i
      , rscriptType = /^$|\/(?:java|ecma)script/i
      , rscriptTypeMasked = /^true\/(.*)/
      , rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g
      ,
    // We have to close these tags to support XHTML (#13200)
    wrapMap = {

        // Support: IE9
        option: [1, "<select multiple='multiple'>", "</select>"],

        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

        _default: [0, "", ""]
    };

    // Support: IE9
    wrapMap.optgroup = wrapMap.option;

    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;

    // Support: 1.x compatibility
    // Manipulating tables requires a tbody
    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ?
        elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
    }

    // Replace/restore the type attribute of script elements for safe DOM manipulation
    function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);

        if (match) {
            elem.type = match[1];
        } else {
            elem.removeAttribute("type");
        }

        return elem;
    }

    // Mark scripts as having already been evaluated
    function setGlobalEval(elems, refElements) {
        var i = 0
          , l = elems.length;

        for (; i < l; i++) {
            data_priv.set(elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval"));
        }
    }

    function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

        if (dest.nodeType !== 1) {
            return;
        }

        // 1. Copy private data: events, handlers, etc.
        if (data_priv.hasData(src)) {
            pdataOld = data_priv.access(src);
            pdataCur = data_priv.set(dest, pdataOld);
            events = pdataOld.events;

            if (events) {
                delete pdataCur.handle;
                pdataCur.events = {};

                for (type in events) {
                    for (i = 0,
                    l = events[type].length; i < l; i++) {
                        jQuery.event.add(dest, type, events[type][i]);
                    }
                }
            }
        }

        // 2. Copy user data
        if (data_user.hasData(src)) {
            udataOld = data_user.access(src);
            udataCur = jQuery.extend({}, udataOld);

            data_user.set(dest, udataCur);
        }
    }

    function getAll(context, tag) {
        var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : context.querySelectorAll ? context.querySelectorAll(tag || "*") : [];

        return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
    }

    // Fix IE bugs, see support tests
    function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();

        // Fails to persist the checked state of a cloned checkbox or radio button.
        if (nodeName === "input" && rcheckableType.test(src.type)) {
            dest.checked = src.checked;

            // Fails to return the selected option to the default selected state when cloning options
        } else if (nodeName === "input" || nodeName === "textarea") {
            dest.defaultValue = src.defaultValue;
        }
    }

    jQuery.extend({
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);

            // Fix IE cloning issues
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

                // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
                destElements = getAll(clone);
                srcElements = getAll(elem);

                for (i = 0,
                l = srcElements.length; i < l; i++) {
                    fixInput(srcElements[i], destElements[i]);
                }
            }

            // Copy the events from the original to the clone
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);

                    for (i = 0,
                    l = srcElements.length; i < l; i++) {
                        cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }

            // Preserve script evaluation history
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }

            // Return the cloned set
            return clone;
        },

        buildFragment: function(elems, context, scripts, selection) {
            var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;

            for (; i < l; i++) {
                elem = elems[i];

                if (elem || elem === 0) {

                    // Add nodes directly
                    if (jQuery.type(elem) === "object") {
                        // Support: QtWebKit, PhantomJS
                        // push.apply(_, arraylike) throws on ancient WebKit
                        jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

                        // Convert non-html into a text node
                    } else if (!rhtml.test(elem)) {
                        nodes.push(context.createTextNode(elem));

                        // Convert html into DOM nodes
                    } else {
                        tmp = tmp || fragment.appendChild(context.createElement("div"));

                        // Deserialize a standard representation
                        tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                        wrap = wrapMap[tag] || wrapMap._default;
                        tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];

                        // Descend through wrappers to the right content
                        j = wrap[0];
                        while (j--) {
                            tmp = tmp.lastChild;
                        }

                        // Support: QtWebKit, PhantomJS
                        // push.apply(_, arraylike) throws on ancient WebKit
                        jQuery.merge(nodes, tmp.childNodes);

                        // Remember the top-level container
                        tmp = fragment.firstChild;

                        // Ensure the created nodes are orphaned (#12392)
                        tmp.textContent = "";
                    }
                }
            }

            // Remove wrapper from fragment
            fragment.textContent = "";

            i = 0;
            while ((elem = nodes[i++])) {

                // #4087 - If origin and destination elements are the same, and this is
                // that element, do not do anything
                if (selection && jQuery.inArray(elem, selection) !== -1) {
                    continue;
                }

                contains = jQuery.contains(elem.ownerDocument, elem);

                // Append to fragment
                tmp = getAll(fragment.appendChild(elem), "script");

                // Preserve script evaluation history
                if (contains) {
                    setGlobalEval(tmp);
                }

                // Capture executables
                if (scripts) {
                    j = 0;
                    while ((elem = tmp[j++])) {
                        if (rscriptType.test(elem.type || "")) {
                            scripts.push(elem);
                        }
                    }
                }
            }

            return fragment;
        },

        cleanData: function(elems) {
            var data, elem, type, key, special = jQuery.event.special, i = 0;

            for (; (elem = elems[i]) !== undefined; i++) {
                if (jQuery.acceptData(elem)) {
                    key = elem[data_priv.expando];

                    if (key && (data = data_priv.cache[key])) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);

                                    // This is a shortcut to avoid jQuery.event.remove's overhead
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }
                        if (data_priv.cache[key]) {
                            // Discard any remaining `private` data
                            delete data_priv.cache[key];
                        }
                    }
                }
                // Discard any remaining `user` data
                delete data_user.cache[elem[data_user.expando]];
            }
        }
    });

    jQuery.fn.extend({
        text: function(value) {
            return access(this, function(value) {
                return value === undefined ? jQuery.text(this) : this.empty().each(function() {
                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                        this.textContent = value;
                    }
                });
            }, null, value, arguments.length);
        },

        append: function() {
            return this.domManip(arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },

        prepend: function() {
            return this.domManip(arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },

        before: function() {
            return this.domManip(arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },

        after: function() {
            return this.domManip(arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },

        remove: function(selector, keepData /* Internal Use Only */
        ) {
            var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0;

            for (; (elem = elems[i]) != null; i++) {
                if (!keepData && elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem));
                }

                if (elem.parentNode) {
                    if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                        setGlobalEval(getAll(elem, "script"));
                    }
                    elem.parentNode.removeChild(elem);
                }
            }

            return this;
        },

        empty: function() {
            var elem, i = 0;

            for (; (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {

                    // Prevent memory leaks
                    jQuery.cleanData(getAll(elem, false));

                    // Remove any remaining nodes
                    elem.textContent = "";
                }
            }

            return this;
        },

        clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },

        html: function(value) {
            return access(this, function(value) {
                var elem = this[0] || {}
                  , i = 0
                  , l = this.length;

                if (value === undefined && elem.nodeType === 1) {
                    return elem.innerHTML;
                }

                // See if we can take a shortcut and just use innerHTML
                if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

                    value = value.replace(rxhtmlTag, "<$1></$2>");

                    try {
                        for (; i < l; i++) {
                            elem = this[i] || {};

                            // Remove element nodes and prevent memory leaks
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }

                        elem = 0;

                        // If using innerHTML throws an exception, use the fallback method
                    } catch (e) {}
                }

                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },

        replaceWith: function() {
            var arg = arguments[0];

            // Make the changes, replacing each context element with the new content
            this.domManip(arguments, function(elem) {
                arg = this.parentNode;

                jQuery.cleanData(getAll(this));

                if (arg) {
                    arg.replaceChild(elem, this);
                }
            });

            // Force removal if there was no new content (e.g., from empty arguments)
            return arg && (arg.length || arg.nodeType) ? this : this.remove();
        },

        detach: function(selector) {
            return this.remove(selector, true);
        },

        domManip: function(args, callback) {

            // Flatten any nested arrays
            args = concat.apply([], args);

            var fragment, first, scripts, hasScripts, node, doc, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);

            // We can't cloneNode fragments that contain checked, in WebKit
            if (isFunction || (l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value))) {
                return this.each(function(index) {
                    var self = set.eq(index);
                    if (isFunction) {
                        args[0] = value.call(this, index, self.html());
                    }
                    self.domManip(args, callback);
                });
            }

            if (l) {
                fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
                first = fragment.firstChild;

                if (fragment.childNodes.length === 1) {
                    fragment = first;
                }

                if (first) {
                    scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                    hasScripts = scripts.length;

                    // Use the original fragment for the last item instead of the first because it can end up
                    // being emptied incorrectly in certain situations (#8070).
                    for (; i < l; i++) {
                        node = fragment;

                        if (i !== iNoClone) {
                            node = jQuery.clone(node, true, true);

                            // Keep references to cloned scripts for later restoration
                            if (hasScripts) {
                                // Support: QtWebKit
                                // jQuery.merge because push.apply(_, arraylike) throws
                                jQuery.merge(scripts, getAll(node, "script"));
                            }
                        }

                        callback.call(this[i], node, i);
                    }

                    if (hasScripts) {
                        doc = scripts[scripts.length - 1].ownerDocument;

                        // Reenable scripts
                        jQuery.map(scripts, restoreScript);

                        // Evaluate executable scripts on first document insertion
                        for (i = 0; i < hasScripts; i++) {
                            node = scripts[i];
                            if (rscriptType.test(node.type || "") && !data_priv.access(node, "globalEval") && jQuery.contains(doc, node)) {

                                if (node.src) {
                                    // Optional AJAX dependency, but won't run scripts if not present
                                    if (jQuery._evalUrl) {
                                        jQuery._evalUrl(node.src);
                                    }
                                } else {
                                    jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
                                }
                            }
                        }
                    }
                }
            }

            return this;
        }
    });

    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;

            for (; i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);

                // Support: QtWebKit
                // .get() because push.apply(_, arraylike) throws
                push.apply(ret, elems.get());
            }

            return this.pushStack(ret);
        }
        ;
    });

    var iframe, elemdisplay = {};

    /**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
    // Called only from within defaultDisplay
    function actualDisplay(name, doc) {
        var style, elem = jQuery(doc.createElement(name)).appendTo(doc.body),
        // getDefaultComputedStyle might be reliably used only on attached element
        display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ?
        // Use of this method is a temporary fix (more like optimization) until something better comes along,
        // since it was removed from specification and supported only in FF
        style.display : jQuery.css(elem[0], "display");

        // We don't have any data stored on the element,
        // so use "detach" method as fast way to get rid of the element
        elem.detach();

        return display;
    }

    /**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
    function defaultDisplay(nodeName) {
        var doc = document
          , display = elemdisplay[nodeName];

        if (!display) {
            display = actualDisplay(nodeName, doc);

            // If the simple way fails, read from inside an iframe
            if (display === "none" || !display) {

                // Use the already-created iframe if possible
                iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);

                // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
                doc = iframe[0].contentDocument;

                // Support: IE
                doc.write();
                doc.close();

                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }

            // Store the correct default display
            elemdisplay[nodeName] = display;
        }

        return display;
    }
    var rmargin = (/^margin/);

    var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$","i");

    var getStyles = function(elem) {
        // Support: IE<=11+, Firefox<=30+ (#15098, #14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        if (elem.ownerDocument.defaultView.opener) {
            return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
        }

        return window.getComputedStyle(elem, null);
    };

    function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, style = elem.style;

        computed = computed || getStyles(elem);

        // Support: IE9
        // getPropertyValue is only needed for .css('filter') (#12537)
        if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
        }

        if (computed) {

            if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                ret = jQuery.style(elem, name);
            }

            // Support: iOS < 6
            // A tribute to the "awesome hack by Dean Edwards"
            // iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
            // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
            if (rnumnonpx.test(ret) && rmargin.test(name)) {

                // Remember the original values
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;

                // Put in the new values to get a computed value out
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;

                // Revert the changed values
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }

        return ret !== undefined ? // Support: IE
        // IE returns zIndex value as an integer.
        ret + "" : ret;
    }

    function addGetHookIf(conditionFn, hookFn) {
        // Define the hook, we'll check on the first run if it's really needed.
        return {
            get: function() {
                if (conditionFn()) {
                    // Hook not needed (or it's not possible to use it due
                    // to missing dependency), remove it.
                    delete this.get;
                    return;
                }

                // Hook needed; redefine it so that the support test is not executed again.
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }

    (function() {
        var pixelPositionVal, boxSizingReliableVal, docElem = document.documentElement, container = document.createElement("div"), div = document.createElement("div");

        if (!div.style) {
            return;
        }

        // Support: IE9-11+
        // Style of cloned element affects source element cloned (#8908)
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";

        container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" + "position:absolute";
        container.appendChild(div);

        // Executing both pixelPosition & boxSizingReliable tests require only one layout
        // so they're executed at the same time to save the second computation.
        function computePixelPositionAndBoxSizingReliable() {
            div.style.cssText = // Support: Firefox<29, Android 2.3
            // Vendor-prefix box-sizing
            "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" + "box-sizing:border-box;display:block;margin-top:1%;top:1%;" + "border:1px;padding:1px;width:4px;position:absolute";
            div.innerHTML = "";
            docElem.appendChild(container);

            var divStyle = window.getComputedStyle(div, null);
            pixelPositionVal = divStyle.top !== "1%";
            boxSizingReliableVal = divStyle.width === "4px";

            docElem.removeChild(container);
        }

        // Support: node.js jsdom
        // Don't assume that getComputedStyle is a property of the global object
        if (window.getComputedStyle) {
            jQuery.extend(support, {
                pixelPosition: function() {

                    // This test is executed only once but we still do memoizing
                    // since we can use the boxSizingReliable pre-computing.
                    // No need to check if the test was already performed, though.
                    computePixelPositionAndBoxSizingReliable();
                    return pixelPositionVal;
                },
                boxSizingReliable: function() {
                    if (boxSizingReliableVal == null) {
                        computePixelPositionAndBoxSizingReliable();
                    }
                    return boxSizingReliableVal;
                },
                reliableMarginRight: function() {

                    // Support: Android 2.3
                    // Check if div with explicit width and no margin-right incorrectly
                    // gets computed margin-right based on width of container. (#3333)
                    // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                    // This support function is only executed once so no memoizing is needed.
                    var ret, marginDiv = div.appendChild(document.createElement("div"));

                    // Reset CSS: box-sizing; display; margin; border; padding
                    marginDiv.style.cssText = div.style.cssText = // Support: Firefox<29, Android 2.3
                    // Vendor-prefix box-sizing
                    "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
                    marginDiv.style.marginRight = marginDiv.style.width = "0";
                    div.style.width = "1px";
                    docElem.appendChild(container);

                    ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);

                    docElem.removeChild(container);
                    div.removeChild(marginDiv);

                    return ret;
                }
            });
        }
    }
    )();

    // A method for quickly swapping in/out CSS properties to get correct calculations.
    jQuery.swap = function(elem, options, callback, args) {
        var ret, name, old = {};

        // Remember the old values, and insert the new ones
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }

        ret = callback.apply(elem, args || []);

        // Revert the old values
        for (name in options) {
            elem.style[name] = old[name];
        }

        return ret;
    }
    ;

    var // Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/
      , rnumsplit = new RegExp("^(" + pnum + ")(.*)$","i")
      , rrelNum = new RegExp("^([+-])=(" + pnum + ")","i")
      ,
    cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }
      , cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
    }
      ,
    cssPrefixes = ["Webkit", "O", "Moz", "ms"];

    // Return a css property mapped to a potentially vendor prefixed property
    function vendorPropName(style, name) {

        // Shortcut for names that are not vendor prefixed
        if (name in style) {
            return name;
        }

        // Check for vendor prefixed names
        var capName = name[0].toUpperCase() + name.slice(1)
          , origName = name
          , i = cssPrefixes.length;

        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in style) {
                return name;
            }
        }

        return origName;
    }

    function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
        Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
    }

    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? "border" : "content") ? // If we already have the right measurement, avoid augmentation
        4 : // Otherwise initialize for horizontal or vertical properties
        name === "width" ? 1 : 0
          ,
        val = 0;

        for (; i < 4; i += 2) {
            // Both box models exclude margin, so add it if we want it
            if (extra === "margin") {
                val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            }

            if (isBorderBox) {
                // border-box includes padding, so remove it if we want content
                if (extra === "content") {
                    val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                }

                // At this point, extra isn't border nor margin, so remove border
                if (extra !== "margin") {
                    val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            } else {
                // At this point, extra isn't content, so add padding
                val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

                // At this point, extra isn't content nor padding, so add border
                if (extra !== "padding") {
                    val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            }
        }

        return val;
    }

    function getWidthOrHeight(elem, name, extra) {

        // Start with offset property, which is equivalent to the border-box value
        var valueIsBorderBox = true
          , val = name === "width" ? elem.offsetWidth : elem.offsetHeight
          , styles = getStyles(elem)
          , isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

        // Some non-html elements return undefined for offsetWidth, so check for null/undefined
        // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
        // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
        if (val <= 0 || val == null) {
            // Fall back to computed then uncomputed css if necessary
            val = curCSS(elem, name, styles);
            if (val < 0 || val == null) {
                val = elem.style[name];
            }

            // Computed unit is not pixels. Stop here and return.
            if (rnumnonpx.test(val)) {
                return val;
            }

            // Check for style in case a browser which returns unreliable values
            // for getComputedStyle silently falls back to the reliable elem.style
            valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);

            // Normalize "", auto, and prepare for extra
            val = parseFloat(val) || 0;
        }

        // Use the active box-sizing model to add/subtract irrelevant styles
        return (val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles)) + "px";
    }

    function showHide(elements, show) {
        var display, elem, hidden, values = [], index = 0, length = elements.length;

        for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }

            values[index] = data_priv.get(elem, "olddisplay");
            display = elem.style.display;
            if (show) {
                // Reset the inline display of this element to learn if it is
                // being hidden by cascaded rules or not
                if (!values[index] && display === "none") {
                    elem.style.display = "";
                }

                // Set elements which have been overridden with display: none
                // in a stylesheet to whatever the default browser style is
                // for such an element
                if (elem.style.display === "" && isHidden(elem)) {
                    values[index] = data_priv.access(elem, "olddisplay", defaultDisplay(elem.nodeName));
                }
            } else {
                hidden = isHidden(elem);

                if (display !== "none" || !hidden) {
                    data_priv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
                }
            }
        }

        // Set the display of most of the elements in a second loop
        // to avoid the constant reflow
        for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            if (!show || elem.style.display === "none" || elem.style.display === "") {
                elem.style.display = show ? values[index] || "" : "none";
            }
        }

        return elements;
    }

    jQuery.extend({

        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
            opacity: {
                get: function(elem, computed) {
                    if (computed) {

                        // We should always get a number back from opacity
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },

        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
            "columnCount": true,
            "fillOpacity": true,
            "flexGrow": true,
            "flexShrink": true,
            "fontWeight": true,
            "lineHeight": true,
            "opacity": true,
            "order": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
        },

        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {
            "float": "cssFloat"
        },

        // Get and set the style property on a DOM Node
        style: function(elem, name, value, extra) {

            // Don't set styles on text and comment nodes
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }

            // Make sure that we're working with the right name
            var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;

            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));

            // Gets hook for the prefixed version, then unprefixed version
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

            // Check if we're setting a value
            if (value !== undefined) {
                type = typeof value;

                // Convert "+=" or "-=" to relative numbers (#7345)
                if (type === "string" && (ret = rrelNum.exec(value))) {
                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                    // Fixes bug #9237
                    type = "number";
                }

                // Make sure that null and NaN values aren't set (#7116)
                if (value == null || value !== value) {
                    return;
                }

                // If a number, add 'px' to the (except for certain CSS properties)
                if (type === "number" && !jQuery.cssNumber[origName]) {
                    value += "px";
                }

                // Support: IE9-11+
                // background-* props affect original clone's values
                if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                    style[name] = "inherit";
                }

                // If a hook was provided, use that value, otherwise just set the specified value
                if (!hooks || !("set"in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    style[name] = value;
                }

            } else {
                // If a hook was provided get the non-computed value from there
                if (hooks && "get"in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }

                // Otherwise just get the value from the style object
                return style[name];
            }
        },

        css: function(elem, name, extra, styles) {
            var val, num, hooks, origName = jQuery.camelCase(name);

            // Make sure that we're working with the right name
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));

            // Try prefixed name followed by the unprefixed name
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

            // If a hook was provided get the computed value from there
            if (hooks && "get"in hooks) {
                val = hooks.get(elem, true, extra);
            }

            // Otherwise, if a way to get the computed value exists, use that
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }

            // Convert "normal" to computed value
            if (val === "normal" && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }

            // Make numeric if forced or a qualifier was provided and val looks numeric
            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
            }
            return val;
        }
    });

    jQuery.each(["height", "width"], function(i, name) {
        jQuery.cssHooks[name] = {
            get: function(elem, computed, extra) {
                if (computed) {

                    // Certain elements can have dimension info if we invisibly show them
                    // but it must have a current display style that would benefit
                    return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function() {
                        return getWidthOrHeight(elem, name, extra);
                    }) : getWidthOrHeight(elem, name, extra);
                }
            },

            set: function(elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);
            }
        };
    });

    // Support: Android 2.3
    jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function(elem, computed) {
        if (computed) {
            return jQuery.swap(elem, {
                "display": "inline-block"
            }, curCSS, [elem, "marginRight"]);
        }
    });

    // These hooks are used by animate to expand properties
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
                var i = 0
                  , expanded = {}
                  ,
                // Assumes a single number if not a string
                parts = typeof value === "string" ? value.split(" ") : [value];

                for (; i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                }

                return expanded;
            }
        };

        if (!rmargin.test(prefix)) {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });

    jQuery.fn.extend({
        css: function(name, value) {
            return access(this, function(elem, name, value) {
                var styles, len, map = {}, i = 0;

                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;

                    for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }

                    return map;
                }

                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        },
        show: function() {
            return showHide(this, true);
        },
        hide: function() {
            return showHide(this);
        },
        toggle: function(state) {
            if (typeof state === "boolean") {
                return state ? this.show() : this.hide();
            }

            return this.each(function() {
                if (isHidden(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });

    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem,options,prop,end,easing);
    }
    jQuery.Tween = Tween;

    Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
            var hooks = Tween.propHooks[this.prop];

            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];

            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;

            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }

            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };

    Tween.prototype.init.prototype = Tween.prototype;

    Tween.propHooks = {
        _default: {
            get: function(tween) {
                var result;

                if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
                    return tween.elem[tween.prop];
                }

                // Passing an empty string as a 3rd parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails.
                // Simple values such as "10px" are parsed to Float;
                // complex values such as "rotate(1rad)" are returned as-is.
                result = jQuery.css(tween.elem, tween.prop, "");
                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {
                // Use step hook for back compat.
                // Use cssHook if its there.
                // Use .style if available and use plain properties where available.
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };

    // Support: IE9
    // Panic based approach to setting things on disconnected nodes
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };

    jQuery.easing = {
        linear: function(p) {
            return p;
        },
        swing: function(p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        }
    };

    jQuery.fx = Tween.prototype.init;

    // Back Compat <1.8 extension point
    jQuery.fx.step = {};

    var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$","i"), rrun = /queueHooks$/, animationPrefilters = [defaultPrefilter], tweeners = {
        "*": [function(prop, value) {
            var tween = this.createTween(prop, value)
              , target = tween.cur()
              , parts = rfxnum.exec(value)
              , unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px")
              ,
            // Starting value computation is required for potential unit mismatches
            start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop))
              , scale = 1
              , maxIterations = 20;

            if (start && start[3] !== unit) {
                // Trust units reported by jQuery.css
                unit = unit || start[3];

                // Make sure we update the tween properties later on
                parts = parts || [];

                // Iteratively approximate from a nonzero starting point
                start = +target || 1;

                do {
                    // If previous iteration zeroed out, double until we get *something*.
                    // Use string for doubling so we don't accidentally see scale as unchanged below
                    scale = scale || ".5";

                    // Adjust and apply
                    start = start / scale;
                    jQuery.style(tween.elem, prop, start + unit);

                    // Update scale, tolerating zero or NaN from tween.cur(),
                    // break the loop if scale is unchanged or perfect, or if we've just had enough
                } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
            }

            // Update tween properties
            if (parts) {
                start = tween.start = +start || +target || 0;
                tween.unit = unit;
                // If a +=/-= token was provided, we're doing a relative animation
                tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
            }

            return tween;
        }
        ]
    };

    // Animations created synchronously will run synchronously
    function createFxNow() {
        setTimeout(function() {
            fxNow = undefined;
        });
        return (fxNow = jQuery.now());
    }

    // Generate parameters to create a standard animation
    function genFx(type, includeWidth) {
        var which, i = 0, attrs = {
            height: type
        };

        // If we include width, step value is 1 to do all cssExpand values,
        // otherwise step value is 2 to skip over Left and Right
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }

        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }

        return attrs;
    }

    function createTween(value, prop, animation) {
        var tween, collection = (tweeners[prop] || []).concat(tweeners["*"]), index = 0, length = collection.length;
        for (; index < length; index++) {
            if ((tween = collection[index].call(animation, prop, value))) {

                // We're done with this property
                return tween;
            }
        }
    }

    function defaultPrefilter(elem, props, opts) {
        /* jshint validthis: true */
        var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = data_priv.get(elem, "fxshow");

        // Handle queue: false promises
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                }
                ;
            }
            hooks.unqueued++;

            anim.always(function() {
                // Ensure the complete handler is called before this completes
                anim.always(function() {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) {
                        hooks.empty.fire();
                    }
                });
            });
        }

        // Height/width overflow pass
        if (elem.nodeType === 1 && ("height"in props || "width"in props)) {
            // Make sure that nothing sneaks out
            // Record all 3 overflow attributes because IE9-10 do not
            // change the overflow attribute when overflowX and
            // overflowY are set to the same value
            opts.overflow = [style.overflow, style.overflowX, style.overflowY];

            // Set display property to inline-block for height/width
            // animations on inline elements that are having width/height animated
            display = jQuery.css(elem, "display");

            // Test default display if display is currently "none"
            checkDisplay = display === "none" ? data_priv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;

            if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
                style.display = "inline-block";
            }
        }

        if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function() {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }

        // show/hide pass
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.exec(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {

                    // If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
                    if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                        hidden = true;
                    } else {
                        continue;
                    }
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);

                // Any non-fx value stops us from restoring the original display value
            } else {
                display = undefined;
            }
        }

        if (!jQuery.isEmptyObject(orig)) {
            if (dataShow) {
                if ("hidden"in dataShow) {
                    hidden = dataShow.hidden;
                }
            } else {
                dataShow = data_priv.access(elem, "fxshow", {});
            }

            // Store state if its toggle - enables .stop().toggle() to "reverse"
            if (toggle) {
                dataShow.hidden = !hidden;
            }
            if (hidden) {
                jQuery(elem).show();
            } else {
                anim.done(function() {
                    jQuery(elem).hide();
                });
            }
            anim.done(function() {
                var prop;

                data_priv.remove(elem, "fxshow");
                for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop]);
                }
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = prop === "width" || prop === "height" ? 1 : 0;
                    }
                }
            }

            // If this is a noop like .hide().hide(), restore an overwritten display value
        } else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
            style.display = display;
        }
    }

    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;

        // camelCase, specialEasing and expand cssHook pass
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }

            if (index !== name) {
                props[name] = value;
                delete props[index];
            }

            hooks = jQuery.cssHooks[name];
            if (hooks && "expand"in hooks) {
                value = hooks.expand(value);
                delete props[name];

                // Not quite $.extend, this won't overwrite existing keys.
                // Reusing 'index' because we have the correct "name"
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }

    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function() {
            // Don't match elem in the :animated selector
            delete tick.elem;
        }), tick = function() {
            if (stopped) {
                return false;
            }
            var currentTime = fxNow || createFxNow()
              , remaining = Math.max(0, animation.startTime + animation.duration - currentTime)
              , // Support: Android 2.3
            // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
            temp = remaining / animation.duration || 0
              , percent = 1 - temp
              , index = 0
              , length = animation.tweens.length;

            for (; index < length; index++) {
                animation.tweens[index].run(percent);
            }

            deferred.notifyWith(elem, [animation, percent, remaining]);

            if (percent < 1 && length) {
                return remaining;
            } else {
                deferred.resolveWith(elem, [animation]);
                return false;
            }
        }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, {
                specialEasing: {}
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
            },
            stop: function(gotoEnd) {
                var index = 0
                  , // If we are going to the end, we want to run all the tweens
                // otherwise we skip this part
                length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) {
                    return this;
                }
                stopped = true;
                for (; index < length; index++) {
                    animation.tweens[index].run(1);
                }

                // Resolve when we played the last frame; otherwise, reject
                if (gotoEnd) {
                    deferred.resolveWith(elem, [animation, gotoEnd]);
                } else {
                    deferred.rejectWith(elem, [animation, gotoEnd]);
                }
                return this;
            }
        }), props = animation.props;

        propFilter(props, animation.opts.specialEasing);

        for (; index < length; index++) {
            result = animationPrefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                return result;
            }
        }

        jQuery.map(props, createTween, animation);

        if (jQuery.isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }

        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));

        // attach callbacks from options
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    }

    jQuery.Animation = jQuery.extend(Animation, {

        tweener: function(props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = ["*"];
            } else {
                props = props.split(" ");
            }

            var prop, index = 0, length = props.length;

            for (; index < length; index++) {
                prop = props[index];
                tweeners[prop] = tweeners[prop] || [];
                tweeners[prop].unshift(callback);
            }
        },

        prefilter: function(callback, prepend) {
            if (prepend) {
                animationPrefilters.unshift(callback);
            } else {
                animationPrefilters.push(callback);
            }
        }
    });

    jQuery.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };

        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

        // Normalize opt.queue - true/undefined/null -> "fx"
        if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
        }

        // Queueing
        opt.old = opt.complete;

        opt.complete = function() {
            if (jQuery.isFunction(opt.old)) {
                opt.old.call(this);
            }

            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        }
        ;

        return opt;
    }
    ;

    jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {

            // Show any hidden elements after setting opacity to 0
            return this.filter(isHidden).css("opacity", 0).show()
            // Animate to the value specified
            .end().animate({
                opacity: to
            }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop)
              , optall = jQuery.speed(speed, easing, callback)
              , doAnimation = function() {
                // Operate on a copy of prop so per-property easing won't be lost
                var anim = Animation(this, jQuery.extend({}, prop), optall);

                // Empty animations, or finishing resolves immediately
                if (empty || data_priv.get(this, "finish")) {
                    anim.stop(true);
                }
            };
            doAnimation.finish = doAnimation;

            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };

            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || "fx", []);
            }

            return this.each(function() {
                var dequeue = true
                  , index = type != null && type + "queueHooks"
                  , timers = jQuery.timers
                  , data = data_priv.get(this);

                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }

                for (index = timers.length; index--; ) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }

                // Start the next in the queue if the last step wasn't forced.
                // Timers currently will call their complete callbacks, which
                // will dequeue but only if they were gotoEnd.
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function(type) {
            if (type !== false) {
                type = type || "fx";
            }
            return this.each(function() {
                var index, data = data_priv.get(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;

                // Enable finishing flag on private data
                data.finish = true;

                // Empty the queue first
                jQuery.queue(this, type, []);

                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                }

                // Look for any active animations, and finish them
                for (index = timers.length; index--; ) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }

                // Look for any animations in the old queue and finish them
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }

                // Turn off finishing flag
                delete data.finish;
            });
        }
    });

    jQuery.each(["toggle", "show", "hide"], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        }
        ;
    });

    // Generate shortcuts for custom animations
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        }
        ;
    });

    jQuery.timers = [];
    jQuery.fx.tick = function() {
        var timer, i = 0, timers = jQuery.timers;

        fxNow = jQuery.now();

        for (; i < timers.length; i++) {
            timer = timers[i];
            // Checks the timer has not already been removed
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }

        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    }
    ;

    jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        if (timer()) {
            jQuery.fx.start();
        } else {
            jQuery.timers.pop();
        }
    }
    ;

    jQuery.fx.interval = 13;

    jQuery.fx.start = function() {
        if (!timerId) {
            timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
    }
    ;

    jQuery.fx.stop = function() {
        clearInterval(timerId);
        timerId = null;
    }
    ;

    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        // Default speed
        _default: 400
    };

    // Based off of the plugin by Clint Helfers, with permission.
    // http://blindsignals.com/index.php/2009/07/jquery-delay/
    jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";

        return this.queue(type, function(next, hooks) {
            var timeout = setTimeout(next, time);
            hooks.stop = function() {
                clearTimeout(timeout);
            }
            ;
        });
    }
    ;

    (function() {
        var input = document.createElement("input")
          , select = document.createElement("select")
          , opt = select.appendChild(document.createElement("option"));

        input.type = "checkbox";

        // Support: iOS<=5.1, Android<=4.2+
        // Default value for a checkbox should be "on"
        support.checkOn = input.value !== "";

        // Support: IE<=11+
        // Must access selectedIndex to make default options select
        support.optSelected = opt.selected;

        // Support: Android<=2.3
        // Options inside disabled selects are incorrectly marked as disabled
        select.disabled = true;
        support.optDisabled = !opt.disabled;

        // Support: IE<=11+
        // An input loses its value after becoming a radio
        input = document.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
    }
    )();

    var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle;

    jQuery.fn.extend({
        attr: function(name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },

        removeAttr: function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        }
    });

    jQuery.extend({
        attr: function(elem, name, value) {
            var hooks, ret, nType = elem.nodeType;

            // don't get/set attributes on text, comment and attribute nodes
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }

            // Fallback to prop when attributes are not supported
            if (typeof elem.getAttribute === strundefined) {
                return jQuery.prop(elem, name, value);
            }

            // All attributes are lowercase
            // Grab necessary hook if one is defined
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
            }

            if (value !== undefined) {

                if (value === null) {
                    jQuery.removeAttr(elem, name);

                } else if (hooks && "set"in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;

                } else {
                    elem.setAttribute(name, value + "");
                    return value;
                }

            } else if (hooks && "get"in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;

            } else {
                ret = jQuery.find.attr(elem, name);

                // Non-existent attributes return null, we normalize to undefined
                return ret == null ? undefined : ret;
            }
        },

        removeAttr: function(elem, value) {
            var name, propName, i = 0, attrNames = value && value.match(rnotwhite);

            if (attrNames && elem.nodeType === 1) {
                while ((name = attrNames[i++])) {
                    propName = jQuery.propFix[name] || name;

                    // Boolean attributes get special treatment (#10870)
                    if (jQuery.expr.match.bool.test(name)) {
                        // Set corresponding property to false
                        elem[propName] = false;
                    }

                    elem.removeAttribute(name);
                }
            }
        },

        attrHooks: {
            type: {
                set: function(elem, value) {
                    if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        }
    });

    // Hooks for boolean attributes
    boolHook = {
        set: function(elem, value, name) {
            if (value === false) {
                // Remove boolean attributes when set to false
                jQuery.removeAttr(elem, name);
            } else {
                elem.setAttribute(name, name);
            }
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;

        attrHandle[name] = function(elem, name, isXML) {
            var ret, handle;
            if (!isXML) {
                // Avoid an infinite loop by temporarily removing this function from the getter
                handle = attrHandle[name];
                attrHandle[name] = ret;
                ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
                attrHandle[name] = handle;
            }
            return ret;
        }
        ;
    });

    var rfocusable = /^(?:input|select|textarea|button)$/i;

    jQuery.fn.extend({
        prop: function(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },

        removeProp: function(name) {
            return this.each(function() {
                delete this[jQuery.propFix[name] || name];
            });
        }
    });

    jQuery.extend({
        propFix: {
            "for": "htmlFor",
            "class": "className"
        },

        prop: function(elem, name, value) {
            var ret, hooks, notxml, nType = elem.nodeType;

            // Don't get/set properties on text, comment and attribute nodes
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }

            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);

            if (notxml) {
                // Fix name and attach hooks
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }

            if (value !== undefined) {
                return hooks && "set"in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : (elem[name] = value);

            } else {
                return hooks && "get"in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
            }
        },

        propHooks: {
            tabIndex: {
                get: function(elem) {
                    return elem.hasAttribute("tabindex") || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;
                }
            }
        }
    });

    if (!support.optSelected) {
        jQuery.propHooks.selected = {
            get: function(elem) {
                var parent = elem.parentNode;
                if (parent && parent.parentNode) {
                    parent.parentNode.selectedIndex;
                }
                return null;
            }
        };
    }

    jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
        jQuery.propFix[this.toLowerCase()] = this;
    });

    var rclass = /[\t\r\n\f]/g;

    jQuery.fn.extend({
        addClass: function(value) {
            var classes, elem, cur, clazz, j, finalValue, proceed = typeof value === "string" && value, i = 0, len = this.length;

            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).addClass(value.call(this, j, this.className));
                });
            }

            if (proceed) {
                // The disjunction here is for better compressibility (see removeClass)
                classes = (value || "").match(rnotwhite) || [];

                for (; i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");

                    if (cur) {
                        j = 0;
                        while ((clazz = classes[j++])) {
                            if (cur.indexOf(" " + clazz + " ") < 0) {
                                cur += clazz + " ";
                            }
                        }

                        // only assign if different to avoid unneeded rendering.
                        finalValue = jQuery.trim(cur);
                        if (elem.className !== finalValue) {
                            elem.className = finalValue;
                        }
                    }
                }
            }

            return this;
        },

        removeClass: function(value) {
            var classes, elem, cur, clazz, j, finalValue, proceed = arguments.length === 0 || typeof value === "string" && value, i = 0, len = this.length;

            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).removeClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                classes = (value || "").match(rnotwhite) || [];

                for (; i < len; i++) {
                    elem = this[i];
                    // This expression is here for better compressibility (see addClass)
                    cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");

                    if (cur) {
                        j = 0;
                        while ((clazz = classes[j++])) {
                            // Remove *all* instances
                            while (cur.indexOf(" " + clazz + " ") >= 0) {
                                cur = cur.replace(" " + clazz + " ", " ");
                            }
                        }

                        // Only assign if different to avoid unneeded rendering.
                        finalValue = value ? jQuery.trim(cur) : "";
                        if (elem.className !== finalValue) {
                            elem.className = finalValue;
                        }
                    }
                }
            }

            return this;
        },

        toggleClass: function(value, stateVal) {
            var type = typeof value;

            if (typeof stateVal === "boolean" && type === "string") {
                return stateVal ? this.addClass(value) : this.removeClass(value);
            }

            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
                });
            }

            return this.each(function() {
                if (type === "string") {
                    // Toggle individual class names
                    var className, i = 0, self = jQuery(this), classNames = value.match(rnotwhite) || [];

                    while ((className = classNames[i++])) {
                        // Check each className given, space separated list
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        } else {
                            self.addClass(className);
                        }
                    }

                    // Toggle whole class name
                } else if (type === strundefined || type === "boolean") {
                    if (this.className) {
                        // store className if set
                        data_priv.set(this, "__className__", this.className);
                    }

                    // If the element has a class name or if we're passed `false`,
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    this.className = this.className || value === false ? "" : data_priv.get(this, "__className__") || "";
                }
            });
        },

        hasClass: function(selector) {
            var className = " " + selector + " "
              , i = 0
              , l = this.length;
            for (; i < l; i++) {
                if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
                    return true;
                }
            }

            return false;
        }
    });

    var rreturn = /\r/g;

    jQuery.fn.extend({
        val: function(value) {
            var hooks, ret, isFunction, elem = this[0];

            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

                    if (hooks && "get"in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                        return ret;
                    }

                    ret = elem.value;

                    return typeof ret === "string" ? // Handle most common string cases
                    ret.replace(rreturn, "") : // Handle cases where value is null/undef or number
                    ret == null ? "" : ret;
                }

                return;
            }

            isFunction = jQuery.isFunction(value);

            return this.each(function(i) {
                var val;

                if (this.nodeType !== 1) {
                    return;
                }

                if (isFunction) {
                    val = value.call(this, i, jQuery(this).val());
                } else {
                    val = value;
                }

                // Treat null/undefined as ""; convert numbers to string
                if (val == null) {
                    val = "";

                } else if (typeof val === "number") {
                    val += "";

                } else if (jQuery.isArray(val)) {
                    val = jQuery.map(val, function(value) {
                        return value == null ? "" : value + "";
                    });
                }

                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

                // If set returns undefined, fall back to normal setting
                if (!hooks || !("set"in hooks) || hooks.set(this, val, "value") === undefined) {
                    this.value = val;
                }
            });
        }
    });

    jQuery.extend({
        valHooks: {
            option: {
                get: function(elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return val != null ? val : // Support: IE10-11+
                    // option.text throws exceptions (#14686, #14858)
                    jQuery.trim(jQuery.text(elem));
                }
            },
            select: {
                get: function(elem) {
                    var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one" || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;

                    // Loop through all the selected options
                    for (; i < max; i++) {
                        option = options[i];

                        // IE6-9 doesn't update selected after form reset (#2551)
                        if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
                        (support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {

                            // Get the specific value for the option
                            value = jQuery(option).val();

                            // We don't need an array for one selects
                            if (one) {
                                return value;
                            }

                            // Multi-Selects return an array
                            values.push(value);
                        }
                    }

                    return values;
                },

                set: function(elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;

                    while (i--) {
                        option = options[i];
                        if ((option.selected = jQuery.inArray(option.value, values) >= 0)) {
                            optionSet = true;
                        }
                    }

                    // Force browsers to behave consistently when non-matching value is set
                    if (!optionSet) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        }
    });

    // Radios and checkboxes getter/setter
    jQuery.each(["radio", "checkbox"], function() {
        jQuery.valHooks[this] = {
            set: function(elem, value) {
                if (jQuery.isArray(value)) {
                    return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0);
                }
            }
        };
        if (!support.checkOn) {
            jQuery.valHooks[this].get = function(elem) {
                return elem.getAttribute("value") === null ? "on" : elem.value;
            }
            ;
        }
    });

    // Return jQuery for attributes-only inclusion

    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {

        // Handle event binding
        jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        }
        ;
    });

    jQuery.fn.extend({
        hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        },

        bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
            return this.off(types, null, fn);
        },

        delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        }
    });

    var nonce = jQuery.now();

    var rquery = (/\?/);

    // Support: Android 2.3
    // Workaround failure to string-cast null input
    jQuery.parseJSON = function(data) {
        return JSON.parse(data + "");
    }
    ;

    // Cross-browser xml parsing
    jQuery.parseXML = function(data) {
        var xml, tmp;
        if (!data || typeof data !== "string") {
            return null;
        }

        // Support: IE9
        try {
            tmp = new DOMParser();
            xml = tmp.parseFromString(data, "text/xml");
        } catch (e) {
            xml = undefined;
        }

        if (!xml || xml.getElementsByTagName("parsererror").length) {
            jQuery.error("Invalid XML: " + data);
        }
        return xml;
    }
    ;

    var rhash = /#.*$/
      , rts = /([?&])_=[^&]*/
      , rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg
      , // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/
      , rnoContent = /^(?:GET|HEAD)$/
      , rprotocol = /^\/\//
      , rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/
      ,
    /* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
    prefilters = {}
      ,
    /* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
    transports = {}
      ,
    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = "*/".concat("*")
      ,
    // Document location
    ajaxLocation = window.location.href
      ,
    // Segment location into parts
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports(structure) {

        // dataTypeExpression is optional and defaults to "*"
        return function(dataTypeExpression, func) {

            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }

            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

            if (jQuery.isFunction(func)) {
                // For each dataType in the dataTypeExpression
                while ((dataType = dataTypes[i++])) {
                    // Prepend if requested
                    if (dataType[0] === "+") {
                        dataType = dataType.slice(1) || "*";
                        (structure[dataType] = structure[dataType] || []).unshift(func);

                        // Otherwise append
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        }
        ;
    }

    // Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

        var inspected = {}
          , seekingTransport = (structure === transports);

        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }

        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }

    // A special extend for ajax options
    // that takes "flat" options (not to be deep extended)
    // Fixes #9887
    function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};

        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }

        return target;
    }

    /* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
    function ajaxHandleResponses(s, jqXHR, responses) {

        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;

        // Remove auto dataType and get content-type in the process
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }

        // Check if we're dealing with a known content-type
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }

        // Check to see if we have a response for the expected dataType
        if (dataTypes[0]in responses) {
            finalDataType = dataTypes[0];
        } else {
            // Try convertible dataTypes
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            // Or just use first one
            finalDataType = finalDataType || firstDataType;
        }

        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }

    /* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, // Work with a copy of dataTypes in case we need to modify it for conversion
        dataTypes = s.dataTypes.slice();

        // Create converters map with lowercased keys
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }

        current = dataTypes.shift();

        // Convert to each sequential dataType
        while (current) {

            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }

            // Apply the dataFilter if provided
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }

            prev = current;
            current = dataTypes.shift();

            if (current) {

                // There's only work to do if current dataType is non-auto
                if (current === "*") {

                    current = prev;

                    // Convert response if prev dataType is non-auto and differs from current
                } else if (prev !== "*" && prev !== current) {

                    // Seek a direct converter
                    conv = converters[prev + " " + current] || converters["* " + current];

                    // If none found, seek a pair
                    if (!conv) {
                        for (conv2 in converters) {

                            // If conv2 outputs current
                            tmp = conv2.split(" ");
                            if (tmp[1] === current) {

                                // If prev can be converted to accepted input
                                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                                if (conv) {
                                    // Condense equivalence converters
                                    if (conv === true) {
                                        conv = converters[conv2];

                                        // Otherwise, insert the intermediate dataType
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                            }
                        }
                    }

                    // Apply converter (if not an equivalence)
                    if (conv !== true) {

                        // Unless errors are allowed to bubble, catch and return them
                        if (conv && s["throws"]) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: "parsererror",
                                    error: conv ? e : "No conversion from " + prev + " to " + current
                                };
                            }
                        }
                    }
                }
            }
        }

        return {
            state: "success",
            data: response
        };
    }

    jQuery.extend({

        // Counter for holding the number of active queries
        active: 0,

        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},

        ajaxSettings: {
            url: ajaxLocation,
            type: "GET",
            isLocal: rlocalProtocol.test(ajaxLocParts[1]),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },

            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },

            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },

            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {

                // Convert anything to text
                "* text": String,

                // Text to html (true = no transformation)
                "text html": true,

                // Evaluate text as a json expression
                "text json": jQuery.parseJSON,

                // Parse text as xml
                "text xml": jQuery.parseXML
            },

            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
                url: true,
                context: true
            }
        },

        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function(target, settings) {
            return settings ?
            // Building a settings object
            ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :
            // Extending ajaxSettings
            ajaxExtend(jQuery.ajaxSettings, target);
        },

        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),

        // Main method
        ajax: function(url, options) {

            // If url is an object, simulate pre-1.5 signature
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }

            // Force options to be an object
            options = options || {};

            var transport, // URL without anti-cache param
            cacheURL, // Response headers
            responseHeadersString, responseHeaders, // timeout handle
            timeoutTimer, // Cross-domain detection vars
            parts, // To know if global events are to be dispatched
            fireGlobals, // Loop variable
            i, // Create the final options object
            s = jQuery.ajaxSetup({}, options), // Callbacks context
            callbackContext = s.context || s, // Context for global events is callbackContext if it is a DOM node or jQuery collection
            globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, // Deferreds
            deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), // Status-dependent callbacks
            statusCode = s.statusCode || {}, // Headers (they are sent all at once)
            requestHeaders = {}, requestHeadersNames = {}, // The jqXHR state
            state = 0, // Default abort message
            strAbort = "canceled", // Fake xhr
            jqXHR = {
                readyState: 0,

                // Builds headers hashtable if needed
                getResponseHeader: function(key) {
                    var match;
                    if (state === 2) {
                        if (!responseHeaders) {
                            responseHeaders = {};
                            while ((match = rheaders.exec(responseHeadersString))) {
                                responseHeaders[match[1].toLowerCase()] = match[2];
                            }
                        }
                        match = responseHeaders[key.toLowerCase()];
                    }
                    return match == null ? null : match;
                },

                // Raw string
                getAllResponseHeaders: function() {
                    return state === 2 ? responseHeadersString : null;
                },

                // Caches the header
                setRequestHeader: function(name, value) {
                    var lname = name.toLowerCase();
                    if (!state) {
                        name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                        requestHeaders[name] = value;
                    }
                    return this;
                },

                // Overrides response content-type header
                overrideMimeType: function(type) {
                    if (!state) {
                        s.mimeType = type;
                    }
                    return this;
                },

                // Status-dependent callbacks
                statusCode: function(map) {
                    var code;
                    if (map) {
                        if (state < 2) {
                            for (code in map) {
                                // Lazy-add the new callback in a way that preserves old ones
                                statusCode[code] = [statusCode[code], map[code]];
                            }
                        } else {
                            // Execute the appropriate callbacks
                            jqXHR.always(map[jqXHR.status]);
                        }
                    }
                    return this;
                },

                // Cancel the request
                abort: function(statusText) {
                    var finalText = statusText || strAbort;
                    if (transport) {
                        transport.abort(finalText);
                    }
                    done(0, finalText);
                    return this;
                }
            };

            // Attach deferreds
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;

            // Remove hash character (#7531: and string promotion)
            // Add protocol if not provided (prefilters might expect it)
            // Handle falsy url in the settings object (#10093: consistency with old signature)
            // We also use the url parameter if available
            s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");

            // Alias method option to type as per ticket #12004
            s.type = options.method || options.type || s.method || s.type;

            // Extract dataTypes list
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];

            // A cross-domain request is in order when we have a protocol:host:port mismatch
            if (s.crossDomain == null) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
            }

            // Convert data if not already a string
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }

            // Apply prefilters
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

            // If request was aborted inside a prefilter, stop there
            if (state === 2) {
                return jqXHR;
            }

            // We can fire global events as of now if asked to
            // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
            fireGlobals = jQuery.event && s.global;

            // Watch for a new set of requests
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }

            // Uppercase the type
            s.type = s.type.toUpperCase();

            // Determine if request has content
            s.hasContent = !rnoContent.test(s.type);

            // Save the URL in case we're toying with the If-Modified-Since
            // and/or If-None-Match header later on
            cacheURL = s.url;

            // More options handling for requests with no content
            if (!s.hasContent) {

                // If data is available, append data to url
                if (s.data) {
                    cacheURL = (s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data);
                    // #9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                }

                // Add anti-cache in url if needed
                if (s.cache === false) {
                    s.url = rts.test(cacheURL) ?
                    // If there is already a '_' parameter, set its value
                    cacheURL.replace(rts, "$1_=" + nonce++) :
                    // Otherwise add one to the end
                    cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
                }
            }

            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                }
            }

            // Set the correct header, if data is being sent
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }

            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

            // Check for headers option
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }

            // Allow custom headers/mimetypes and early abort
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                // Abort if not done already and return
                return jqXHR.abort();
            }

            // Aborting is no longer a cancellation
            strAbort = "abort";

            // Install callbacks on deferreds
            for (i in {
                success: 1,
                error: 1,
                complete: 1
            }) {
                jqXHR[i](s[i]);
            }

            // Get transport
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

            // If no transport, we auto-abort
            if (!transport) {
                done(-1, "No Transport");
            } else {
                jqXHR.readyState = 1;

                // Send global event
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                }
                // Timeout
                if (s.async && s.timeout > 0) {
                    timeoutTimer = setTimeout(function() {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }

                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    // Propagate exception as error if not done
                    if (state < 2) {
                        done(-1, e);
                        // Simply rethrow otherwise
                    } else {
                        throw e;
                    }
                }
            }

            // Callback for when everything is done
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;

                // Called once
                if (state === 2) {
                    return;
                }

                // State is "done" now
                state = 2;

                // Clear timeout if it exists
                if (timeoutTimer) {
                    clearTimeout(timeoutTimer);
                }

                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;

                // Cache response headers
                responseHeadersString = headers || "";

                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;

                // Determine if successful
                isSuccess = status >= 200 && status < 300 || status === 304;

                // Get response data
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }

                // Convert no matter what (that way responseXXX fields are always set)
                response = ajaxConvert(s, response, jqXHR, isSuccess);

                // If successful, handle type chaining
                if (isSuccess) {

                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }

                    // if no content
                    if (status === 204 || s.type === "HEAD") {
                        statusText = "nocontent";

                        // if not modified
                    } else if (status === 304) {
                        statusText = "notmodified";

                        // If we have data, let's convert it
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    // Extract error from statusText and normalize for non-aborts
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }

                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";

                // Success/Error
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
                } else {
                    deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
                }

                // Status-dependent callbacks
                jqXHR.statusCode(statusCode);
                statusCode = undefined;

                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
                }

                // Complete
                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                    // Handle the global AJAX counter
                    if (!(--jQuery.active)) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }

            return jqXHR;
        },

        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },

        getScript: function(url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        }
    });

    jQuery.each(["get", "post"], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
            // Shift arguments if data argument was omitted
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }

            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            });
        }
        ;
    });

    jQuery._evalUrl = function(url) {
        return jQuery.ajax({
            url: url,
            type: "GET",
            dataType: "script",
            async: false,
            global: false,
            "throws": true
        });
    }
    ;

    jQuery.fn.extend({
        wrapAll: function(html) {
            var wrap;

            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapAll(html.call(this, i));
                });
            }

            if (this[0]) {

                // The elements to wrap the target around
                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }

                wrap.map(function() {
                    var elem = this;

                    while (elem.firstElementChild) {
                        elem = elem.firstElementChild;
                    }

                    return elem;
                }).append(this);
            }

            return this;
        },

        wrapInner: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }

            return this.each(function() {
                var self = jQuery(this)
                  , contents = self.contents();

                if (contents.length) {
                    contents.wrapAll(html);

                } else {
                    self.append(html);
                }
            });
        },

        wrap: function(html) {
            var isFunction = jQuery.isFunction(html);

            return this.each(function(i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },

        unwrap: function() {
            return this.parent().each(function() {
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        }
    });

    jQuery.expr.filters.hidden = function(elem) {
        // Support: Opera <= 12.12
        // Opera reports offsetWidths and offsetHeights less than zero on some elements
        return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
    }
    ;
    jQuery.expr.filters.visible = function(elem) {
        return !jQuery.expr.filters.hidden(elem);
    }
    ;

    var r20 = /%20/g
      , rbracket = /\[\]$/
      , rCRLF = /\r?\n/g
      , rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i
      , rsubmittable = /^(?:input|select|textarea|keygen)/i;

    function buildParams(prefix, obj, traditional, add) {
        var name;

        if (jQuery.isArray(obj)) {
            // Serialize array item.
            jQuery.each(obj, function(i, v) {
                if (traditional || rbracket.test(prefix)) {
                    // Treat each array item as a scalar.
                    add(prefix, v);

                } else {
                    // Item is non-scalar (array or object), encode its numeric index.
                    buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
                }
            });

        } else if (!traditional && jQuery.type(obj) === "object") {
            // Serialize object item.
            for (name in obj) {
                buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }

        } else {
            // Serialize scalar item.
            add(prefix, obj);
        }
    }

    // Serialize an array of form elements or a set of
    // key/values into a query string
    jQuery.param = function(a, traditional) {
        var prefix, s = [], add = function(key, value) {
            // If value is a function, invoke it and return its value
            value = jQuery.isFunction(value) ? value() : (value == null ? "" : value);
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
        };

        // Set traditional to true for jQuery <= 1.3.2 behavior.
        if (traditional === undefined) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }

        // If an array was passed in, assume that it is an array of form elements.
        if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
            // Serialize the form elements
            jQuery.each(a, function() {
                add(this.name, this.value);
            });

        } else {
            // If traditional, encode the "old" way (the way 1.3.2 or older
            // did it), otherwise encode params recursively.
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }

        // Return the resulting serialization
        return s.join("&").replace(r20, "+");
    }
    ;

    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                // Can add propHook for "elements" to filter or add form elements
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
                var type = this.type;

                // Use .is( ":disabled" ) so that fieldset[disabled] works
                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(i, elem) {
                var val = jQuery(this).val();

                return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n")
                    };
                }) : {
                    name: elem.name,
                    value: val.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });

    jQuery.ajaxSettings.xhr = function() {
        try {
            return new XMLHttpRequest();
        } catch (e) {}
    }
    ;

    var xhrId = 0
      , xhrCallbacks = {}
      , xhrSuccessStatus = {
        // file protocol always yields status code 0, assume 200
        0: 200,
        // Support: IE9
        // #1450: sometimes IE returns 1223 when it should be 204
        1223: 204
    }
      , xhrSupported = jQuery.ajaxSettings.xhr();

    // Support: IE9
    // Open requests must be manually aborted on unload (#5280)
    // See https://support.microsoft.com/kb/2856746 for more info
    if (window.attachEvent) {
        window.attachEvent("onunload", function() {
            for (var key in xhrCallbacks) {
                xhrCallbacks[key]();
            }
        });
    }

    support.cors = !!xhrSupported && ("withCredentials"in xhrSupported);
    support.ajax = xhrSupported = !!xhrSupported;

    jQuery.ajaxTransport(function(options) {
        var callback;

        // Cross domain only allowed if supported through XMLHttpRequest
        if (support.cors || xhrSupported && !options.crossDomain) {
            return {
                send: function(headers, complete) {
                    var i, xhr = options.xhr(), id = ++xhrId;

                    xhr.open(options.type, options.url, options.async, options.username, options.password);

                    // Apply custom fields if provided
                    if (options.xhrFields) {
                        for (i in options.xhrFields) {
                            xhr[i] = options.xhrFields[i];
                        }
                    }

                    // Override mime type if needed
                    if (options.mimeType && xhr.overrideMimeType) {
                        xhr.overrideMimeType(options.mimeType);
                    }

                    // X-Requested-With header
                    // For cross-domain requests, seeing as conditions for a preflight are
                    // akin to a jigsaw puzzle, we simply never set it to be sure.
                    // (it can always be set on a per-request basis or even using ajaxSetup)
                    // For same-domain requests, won't change header if already provided.
                    if (!options.crossDomain && !headers["X-Requested-With"]) {
                        headers["X-Requested-With"] = "XMLHttpRequest";
                    }

                    // Set headers
                    for (i in headers) {
                        xhr.setRequestHeader(i, headers[i]);
                    }

                    // Callback
                    callback = function(type) {
                        return function() {
                            if (callback) {
                                delete xhrCallbacks[id];
                                callback = xhr.onload = xhr.onerror = null;

                                if (type === "abort") {
                                    xhr.abort();
                                } else if (type === "error") {
                                    complete(// file: protocol always yields status 0; see #8605, #14207
                                    xhr.status, xhr.statusText);
                                } else {
                                    complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE9
                                    // Accessing binary-data responseText throws an exception
                                    // (#11426)
                                    typeof xhr.responseText === "string" ? {
                                        text: xhr.responseText
                                    } : undefined, xhr.getAllResponseHeaders());
                                }
                            }
                        }
                        ;
                    }
                    ;

                    // Listen to events
                    xhr.onload = callback();
                    xhr.onerror = callback("error");

                    // Create the abort callback
                    callback = xhrCallbacks[id] = callback("abort");

                    try {
                        // Do send the request (this may raise an exception)
                        xhr.send(options.hasContent && options.data || null);
                    } catch (e) {
                        // #14683: Only rethrow if this hasn't been notified as an error yet
                        if (callback) {
                            throw e;
                        }
                    }
                },

                abort: function() {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });

    // Install script dataType
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });

    // Handle cache's special case and crossDomain
    jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = "GET";
        }
    });

    // Bind script tag hack transport
    jQuery.ajaxTransport("script", function(s) {
        // This transport only deals with cross domain requests
        if (s.crossDomain) {
            var script, callback;
            return {
                send: function(_, complete) {
                    script = jQuery("<script>").prop({
                        async: true,
                        charset: s.scriptCharset,
                        src: s.url
                    }).on("load error", callback = function(evt) {
                        script.remove();
                        callback = null;
                        if (evt) {
                            complete(evt.type === "error" ? 404 : 200, evt.type);
                        }
                    }
                    );
                    document.head.appendChild(script[0]);
                },
                abort: function() {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });

    var oldCallbacks = []
      , rjsonp = /(=)\?(?=&|$)|\?\?/;

    // Default jsonp settings
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (nonce++));
            this[callback] = true;
            return callback;
        }
    });

    // Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {

        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");

        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if (jsonProp || s.dataTypes[0] === "jsonp") {

            // Get callback name, remembering preexisting value associated with it
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

            // Insert callback into url or form data
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }

            // Use data converter to retrieve json after script execution
            s.converters["script json"] = function() {
                if (!responseContainer) {
                    jQuery.error(callbackName + " was not called");
                }
                return responseContainer[0];
            }
            ;

            // force json dataType
            s.dataTypes[0] = "json";

            // Install callback
            overwritten = window[callbackName];
            window[callbackName] = function() {
                responseContainer = arguments;
            }
            ;

            // Clean-up function (fires after converters)
            jqXHR.always(function() {
                // Restore preexisting value
                window[callbackName] = overwritten;

                // Save back as free
                if (s[callbackName]) {
                    // make sure that re-using the options doesn't screw things around
                    s.jsonpCallback = originalSettings.jsonpCallback;

                    // save the callback name for future use
                    oldCallbacks.push(callbackName);
                }

                // Call if it was a function and we have a response
                if (responseContainer && jQuery.isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }

                responseContainer = overwritten = undefined;
            });

            // Delegate to script
            return "script";
        }
    });

    // data: string of html
    // context (optional): If specified, the fragment will be created in this context, defaults to document
    // keepScripts (optional): If true, will include scripts passed in the html string
    jQuery.parseHTML = function(data, context, keepScripts) {
        if (!data || typeof data !== "string") {
            return null;
        }
        if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
        }
        context = context || document;

        var parsed = rsingleTag.exec(data)
          , scripts = !keepScripts && [];

        // Single tag
        if (parsed) {
            return [context.createElement(parsed[1])];
        }

        parsed = jQuery.buildFragment([data], context, scripts);

        if (scripts && scripts.length) {
            jQuery(scripts).remove();
        }

        return jQuery.merge([], parsed.childNodes);
    }
    ;

    // Keep a copy of the old load method
    var _load = jQuery.fn.load;

    /**
 * Load a url into a page
 */
    jQuery.fn.load = function(url, params, callback) {
        if (typeof url !== "string" && _load) {
            return _load.apply(this, arguments);
        }

        var selector, type, response, self = this, off = url.indexOf(" ");

        if (off >= 0) {
            selector = jQuery.trim(url.slice(off));
            url = url.slice(0, off);
        }

        // If it's a function
        if (jQuery.isFunction(params)) {

            // We assume that it's the callback
            callback = params;
            params = undefined;

            // Otherwise, build a param string
        } else if (params && typeof params === "object") {
            type = "POST";
        }

        // If we have elements to modify, make the request
        if (self.length > 0) {
            jQuery.ajax({
                url: url,

                // if "type" variable is undefined, then "GET" method will be used
                type: type,
                dataType: "html",
                data: params
            }).done(function(responseText) {

                // Save response for use in complete callback
                response = arguments;

                self.html(selector ?
                // If a selector was specified, locate the right elements in a dummy div
                // Exclude scripts to avoid IE 'Permission Denied' errors
                jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :
                // Otherwise use the full result
                responseText);

            }).complete(callback && function(jqXHR, status) {
                self.each(callback, response || [jqXHR.responseText, status, jqXHR]);
            }
            );
        }

        return this;
    }
    ;

    // Attach a bunch of functions for handling common AJAX events
    jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        }
        ;
    });

    jQuery.expr.filters.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
            return elem === fn.elem;
        }).length;
    }
    ;

    var docElem = window.document.documentElement;

    /**
 * Gets a window from an element
 */
    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
    }

    jQuery.offset = {
        setOffset: function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {};

            // Set position first, in-case top/left are set even on static elem
            if (position === "static") {
                elem.style.position = "relative";
            }

            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

            // Need to be able to calculate position if either
            // top or left is auto and position is either absolute or fixed
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;

            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }

            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, curOffset);
            }

            if (options.top != null) {
                props.top = (options.top - curOffset.top) + curTop;
            }
            if (options.left != null) {
                props.left = (options.left - curOffset.left) + curLeft;
            }

            if ("using"in options) {
                options.using.call(elem, props);

            } else {
                curElem.css(props);
            }
        }
    };

    jQuery.fn.extend({
        offset: function(options) {
            if (arguments.length) {
                return options === undefined ? this : this.each(function(i) {
                    jQuery.offset.setOffset(this, options, i);
                });
            }

            var docElem, win, elem = this[0], box = {
                top: 0,
                left: 0
            }, doc = elem && elem.ownerDocument;

            if (!doc) {
                return;
            }

            docElem = doc.documentElement;

            // Make sure it's not a disconnected DOM node
            if (!jQuery.contains(docElem, elem)) {
                return box;
            }

            // Support: BlackBerry 5, iOS 3 (original iPhone)
            // If we don't have gBCR, just use 0,0 rather than error
            if (typeof elem.getBoundingClientRect !== strundefined) {
                box = elem.getBoundingClientRect();
            }
            win = getWindow(doc);
            return {
                top: box.top + win.pageYOffset - docElem.clientTop,
                left: box.left + win.pageXOffset - docElem.clientLeft
            };
        },

        position: function() {
            if (!this[0]) {
                return;
            }

            var offsetParent, offset, elem = this[0], parentOffset = {
                top: 0,
                left: 0
            };

            // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
            if (jQuery.css(elem, "position") === "fixed") {
                // Assume getBoundingClientRect is there when computed position is fixed
                offset = elem.getBoundingClientRect();

            } else {
                // Get *real* offsetParent
                offsetParent = this.offsetParent();

                // Get correct offsets
                offset = this.offset();
                if (!jQuery.nodeName(offsetParent[0], "html")) {
                    parentOffset = offsetParent.offset();
                }

                // Add offsetParent borders
                parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
                parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
            }

            // Subtract parent offsets and element margins
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },

        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent || docElem;

                while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) {
                    offsetParent = offsetParent.offsetParent;
                }

                return offsetParent || docElem;
            });
        }
    });

    // Create scrollLeft and scrollTop methods
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, prop) {
        var top = "pageYOffset" === prop;

        jQuery.fn[method] = function(val) {
            return access(this, function(elem, method, val) {
                var win = getWindow(elem);

                if (val === undefined) {
                    return win ? win[prop] : elem[method];
                }

                if (win) {
                    win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);

                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length, null);
        }
        ;
    });

    // Support: Safari<7+, Chrome<37+
    // Add the top/left cssHooks using jQuery.fn.position
    // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
    // Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
    // getComputedStyle returns percent when specified for top/left/bottom/right;
    // rather than make the css module depend on the offset module, just check for it here
    jQuery.each(["top", "left"], function(i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);
                // If curCSS returns percentage, fallback to offset
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
            }
        });
    });

    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function(name, type) {
        jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function(defaultExtra, funcName) {
            // Margin is only for outerHeight, outerWidth
            jQuery.fn[funcName] = function(margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean")
                  , extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

                return access(this, function(elem, type, value) {
                    var doc;

                    if (jQuery.isWindow(elem)) {
                        // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
                        // isn't a whole lot we can do. See pull request at this URL for discussion:
                        // https://github.com/jquery/jquery/pull/764
                        return elem.document.documentElement["client" + name];
                    }

                    // Get document width or height
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;

                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                        // whichever is greatest
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }

                    return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
                    jQuery.css(elem, type, extra) :
                    // Set width or height on the element
                    jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable, null);
            }
            ;
        });
    });

    // The number of elements contained in the matched element set
    jQuery.fn.size = function() {
        return this.length;
    }
    ;

    jQuery.fn.andSelf = jQuery.fn.addBack;

    // Register as a named AMD module, since jQuery can be concatenated with other
    // files that may use define, but not via a proper concatenation script that
    // understands anonymous AMD modules. A named AMD is safest and most robust
    // way to register. Lowercase jquery is used because AMD module names are
    // derived from file names, and jQuery is normally delivered in a lowercase
    // file name. Do this after creating the global so that if an AMD module wants
    // to call noConflict to hide this version of jQuery, it will work.

    // Note that for maximum portability, libraries that are not jQuery should
    // declare themselves as anonymous modules, and avoid setting a global if an
    // AMD loader is present. jQuery is a special case. For more information, see
    // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

    if (typeof define === "function" && define.amd) {
        define("jquery", [], function() {
            return jQuery;
        });
    }

    var // Map over jQuery in case of overwrite
    _jQuery = window.jQuery
      ,
    // Map over the $ in case of overwrite
    _$ = window.$;

    jQuery.noConflict = function(deep) {
        if (window.$ === jQuery) {
            window.$ = _$;
        }

        if (deep && window.jQuery === jQuery) {
            window.jQuery = _jQuery;
        }

        return jQuery;
    }
    ;

    // Expose jQuery and $ identifiers, even in AMD
    // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
    // and CommonJS for browser emulators (#13566)
    if (typeof noGlobal === strundefined) {
        window.jQuery = window.$ = jQuery;
    }

    return jQuery;

}));

if (typeof module === "object") {
    module.exports = _module_exports;
}

/*
 Redactor 10.2.3
 Updated: August 15, 2015

 http://imperavi.com/redactor/

 Copyright (c) 2009-2015, Imperavi LLC.
 License: http://imperavi.com/redactor/license/

 Usage: $('#content').redactor();
 */

(function($) {

    'use strict';

    if (!Function.prototype.bind) {
        Function.prototype.bind = function(scope) {
            var fn = this;
            return function() {
                return fn.apply(scope);
            }
            ;
        }
        ;
    }

    var uuid = 0;

    // Plugin
    $.fn.redactor = function(options) {
        var val = [];
        var args = Array.prototype.slice.call(arguments, 1);

        if (typeof options === 'string') {
            this.each(function() {
                var instance = $.data(this, 'redactor');
                var func;

                if (options.search(/\./) != '-1') {
                    func = options.split('.');
                    if (typeof instance[func[0]] != 'undefined') {
                        func = instance[func[0]][func[1]];
                    }
                } else {
                    func = instance[options];
                }

                if (typeof instance !== 'undefined' && $.isFunction(func)) {
                    var methodVal = func.apply(instance, args);
                    if (methodVal !== undefined && methodVal !== instance) {
                        val.push(methodVal);
                    }
                } else {
                    $.error('No such method "' + options + '" for Redactor');
                }
            });
        } else {
            this.each(function() {
                $.data(this, 'redactor', {});
                $.data(this, 'redactor', Redactor(this, options));
            });
        }

        if (val.length === 0)
            return this;
        else if (val.length === 1)
            return val[0];
        else
            return val;

    }
    ;

    // Initialization
    function Redactor(el, options) {
        return new Redactor.prototype.init(el,options);
    }

    // Functionality
    $.Redactor = Redactor;
    $.Redactor.VERSION = '10.2.3';
    $.Redactor.modules = ['alignment', 'autosave', 'block', 'buffer', 'build', 'button', 'caret', 'clean', 'code', 'core', 'dropdown', 'file', 'focus', 'image', 'indent', 'inline', 'insert', 'keydown', 'keyup', 'lang', 'line', 'link', 'linkify', 'list', 'modal', 'observe', 'paragraphize', 'paste', 'placeholder', 'progress', 'selection', 'shortcuts', 'tabifier', 'tidy', 'toolbar', 'upload', 'utils'];

    $.Redactor.opts = {

        // settings
        lang: 'en',
        direction: 'ltr',
        // ltr or rtl

        plugins: false,
        // array

        focus: false,
        focusEnd: false,

        placeholder: false,

        visual: true,
        tabindex: false,

        minHeight: false,
        maxHeight: false,

        linebreaks: false,
        replaceDivs: true,
        paragraphize: true,
        cleanStyleOnEnter: false,
        enterKey: true,

        cleanOnPaste: true,
        cleanSpaces: true,
        pastePlainText: false,

        autosave: false,
        // false or url
        autosaveName: false,
        autosaveInterval: 60,
        // seconds
        autosaveOnChange: false,
        autosaveFields: false,

        linkTooltip: true,
        linkProtocol: 'http',
        linkNofollow: false,
        linkSize: 50,

        imageEditable: true,
        imageLink: true,
        imagePosition: true,
        imageFloatMargin: '10px',
        imageResizable: true,

        imageUpload: null,
        imageUploadParam: 'file',

        uploadImageField: false,

        dragImageUpload: true,

        fileUpload: null,
        fileUploadParam: 'file',

        dragFileUpload: true,

        s3: false,

        convertLinks: true,
        convertUrlLinks: true,
        convertImageLinks: true,
        convertVideoLinks: true,

        preSpaces: 4,
        // or false
        tabAsSpaces: false,
        // true or number of spaces
        tabKey: true,

        scrollTarget: false,

        toolbar: true,
        toolbarFixed: true,
        toolbarFixedTarget: document,
        toolbarFixedTopOffset: 0,
        // pixels
        toolbarExternal: false,
        // ID selector
        toolbarOverflow: false,

        source: true,
        buttons: ['html', 'formatting', 'bold', 'italic', 'deleted', 'unorderedlist', 'orderedlist', 'outdent', 'indent', 'image', 'file', 'link', 'alignment', 'horizontalrule'],
        // + 'underline'

        buttonsHide: [],
        buttonsHideOnMobile: [],

        formatting: ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
        formattingAdd: false,

        tabifier: true,

        deniedTags: ['script', 'style'],
        allowedTags: false,
        // or array

        paragraphizeBlocks: ['table', 'div', 'pre', 'form', 'ul', 'ol', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'dl', 'blockquote', 'figcaption', 'address', 'section', 'header', 'footer', 'aside', 'article', 'object', 'style', 'script', 'iframe', 'select', 'input', 'textarea', 'button', 'option', 'map', 'area', 'math', 'hr', 'fieldset', 'legend', 'hgroup', 'nav', 'figure', 'details', 'menu', 'summary', 'p'],

        removeComments: false,
        replaceTags: [['strike', 'del'], ['b', 'strong']],
        replaceStyles: [['font-weight:\\s?bold', "strong"], ['font-style:\\s?italic', "em"], ['text-decoration:\\s?underline', "u"], ['text-decoration:\\s?line-through', 'del']],
        removeDataAttr: false,

        removeAttr: false,
        // or multi array
        allowedAttr: false,
        // or multi array

        removeWithoutAttr: ['span'],
        // or false
        removeEmpty: ['p'],
        // or false;

        activeButtons: ['deleted', 'italic', 'bold', 'underline', 'unorderedlist', 'orderedlist', 'alignleft', 'aligncenter', 'alignright', 'justify'],
        activeButtonsStates: {
            b: 'bold',
            strong: 'bold',
            i: 'italic',
            em: 'italic',
            del: 'deleted',
            strike: 'deleted',
            ul: 'unorderedlist',
            ol: 'orderedlist',
            u: 'underline'
        },

        shortcuts: {
            'ctrl+shift+m, meta+shift+m': {
                func: 'inline.removeFormat'
            },
            'ctrl+b, meta+b': {
                func: 'inline.format',
                params: ['bold']
            },
            'ctrl+i, meta+i': {
                func: 'inline.format',
                params: ['italic']
            },
            'ctrl+h, meta+h': {
                func: 'inline.format',
                params: ['superscript']
            },
            'ctrl+l, meta+l': {
                func: 'inline.format',
                params: ['subscript']
            },
            'ctrl+k, meta+k': {
                func: 'link.show'
            },
            'ctrl+shift+7': {
                func: 'list.toggle',
                params: ['orderedlist']
            },
            'ctrl+shift+8': {
                func: 'list.toggle',
                params: ['unorderedlist']
            }
        },
        shortcutsAdd: false,

        // private
        buffer: [],
        rebuffer: [],
        emptyHtml: '<p>&#x200b;</p>',
        invisibleSpace: '&#x200b;',
        imageTypes: ['image/png', 'image/jpeg', 'image/gif'],
        indentValue: 20,
        verifiedTags: ['a', 'img', 'b', 'strong', 'sub', 'sup', 'i', 'em', 'u', 'small', 'strike', 'del', 'cite', 'ul', 'ol', 'li'],
        // and for span tag special rule
        inlineTags: ['strong', 'b', 'u', 'em', 'i', 'code', 'del', 'ins', 'samp', 'kbd', 'sup', 'sub', 'mark', 'var', 'cite', 'small'],
        alignmentTags: ['P', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'DL', 'DT', 'DD', 'DIV', 'TD', 'BLOCKQUOTE', 'OUTPUT', 'FIGCAPTION', 'ADDRESS', 'SECTION', 'HEADER', 'FOOTER', 'ASIDE', 'ARTICLE'],
        blockLevelElements: ['PRE', 'UL', 'OL', 'LI'],
        highContrast: false,
        observe: {
            dropdowns: []
        },

        // lang
        langs: {
            en: {
                html: 'HTML',
                video: 'Insert Video',
                image: 'Insert Image',
                table: 'Table',
                link: 'Link',
                link_insert: 'Insert link',
                link_edit: 'Edit link',
                unlink: 'Unlink',
                formatting: 'Formatting',
                paragraph: 'Normal text',
                quote: 'Quote',
                code: 'Code',
                header1: 'Header 1',
                header2: 'Header 2',
                header3: 'Header 3',
                header4: 'Header 4',
                header5: 'Header 5',
                bold: 'Bold',
                italic: 'Italic',
                fontcolor: 'Font Color',
                backcolor: 'Back Color',
                unorderedlist: 'Unordered List',
                orderedlist: 'Ordered List',
                outdent: 'Outdent',
                indent: 'Indent',
                cancel: 'Cancel',
                insert: 'Insert',
                save: 'Save',
                _delete: 'Delete',
                insert_table: 'Insert Table',
                insert_row_above: 'Add Row Above',
                insert_row_below: 'Add Row Below',
                insert_column_left: 'Add Column Left',
                insert_column_right: 'Add Column Right',
                delete_column: 'Delete Column',
                delete_row: 'Delete Row',
                delete_table: 'Delete Table',
                rows: 'Rows',
                columns: 'Columns',
                add_head: 'Add Head',
                delete_head: 'Delete Head',
                title: 'Title',
                image_position: 'Position',
                none: 'None',
                left: 'Left',
                right: 'Right',
                center: 'Center',
                image_web_link: 'Image Web Link',
                text: 'Text',
                mailto: 'Email',
                web: 'URL',
                video_html_code: 'Video Embed Code or Youtube/Vimeo Link',
                file: 'Insert File',
                upload: 'Upload',
                download: 'Download',
                choose: 'Choose',
                or_choose: 'Or choose',
                drop_file_here: 'Drop file here',
                align_left: 'Align text to the left',
                align_center: 'Center text',
                align_right: 'Align text to the right',
                align_justify: 'Justify text',
                horizontalrule: 'Insert Horizontal Rule',
                deleted: 'Deleted',
                anchor: 'Anchor',
                link_new_tab: 'Open link in new tab',
                underline: 'Underline',
                alignment: 'Alignment',
                filename: 'Name (optional)',
                edit: 'Edit',
                upload_label: 'Drop file here or '
            }
        },

        linkify: {
            regexps: {
                youtube: /https?:\/\/(?:[0-9A-Z-]+\.)?(?:youtu\.be\/|youtube\.com\S*[^\w\-\s])([\w\-]{11})(?=[^\w\-]|$)(?![?=&+%\w.\-]*(?:['"][^<>]*>|<\/a>))[?=&+%\w.-]*/ig,
                vimeo: /https?:\/\/(www\.)?vimeo.com\/(\d+)($|\/)/,
                image: /((https?|www)[^\s]+\.)(jpe?g|png|gif)(\?[^\s-]+)?/ig,
                url: /(https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,}|www\.[^\s]+\.[^\s]{2,})/ig,
            }
        },

        codemirror: false
    };

    // Functionality
    Redactor.fn = $.Redactor.prototype = {

        keyCode: {
            BACKSPACE: 8,
            DELETE: 46,
            UP: 38,
            DOWN: 40,
            ENTER: 13,
            SPACE: 32,
            ESC: 27,
            TAB: 9,
            CTRL: 17,
            META: 91,
            SHIFT: 16,
            ALT: 18,
            RIGHT: 39,
            LEFT: 37,
            LEFT_WIN: 91
        },

        // Initialization
        init: function(el, options) {
            this.$element = $(el);
            this.uuid = uuid++;

            // if paste event detected = true
            this.rtePaste = false;
            this.$pasteBox = false;

            this.loadOptions(options);
            this.loadModules();

            // formatting storage
            this.formatting = {};

            // block level tags
            $.merge(this.opts.blockLevelElements, this.opts.alignmentTags);
            this.reIsBlock = new RegExp('^(' + this.opts.blockLevelElements.join('|') + ')$','i');

            // setup allowed and denied tags
            this.tidy.setupAllowed();

            // setup denied tags
            if (this.opts.deniedTags !== false) {
                var tags = ['html', 'head', 'link', 'body', 'meta', 'applet'];
                for (var i = 0; i < tags.length; i++) {
                    this.opts.deniedTags.push(tags[i]);
                }
            }

            // load lang
            this.lang.load();

            // extend shortcuts
            $.extend(this.opts.shortcuts, this.opts.shortcutsAdd);

            // start callback
            this.core.setCallback('start');

            // build
            this.start = true;
            this.build.run();
        },

        loadOptions: function(options) {
            this.opts = $.extend({}, $.extend(true, {}, $.Redactor.opts), this.$element.data(), options);
        },
        getModuleMethods: function(object) {
            return Object.getOwnPropertyNames(object).filter(function(property) {
                return typeof object[property] == 'function';
            });
        },
        loadModules: function() {
            var len = $.Redactor.modules.length;
            for (var i = 0; i < len; i++) {
                this.bindModuleMethods($.Redactor.modules[i]);
            }
        },
        bindModuleMethods: function(module) {
            if (typeof this[module] == 'undefined')
                return;

            // init module
            this[module] = this[module]();

            var methods = this.getModuleMethods(this[module]);
            var len = methods.length;

            // bind methods
            for (var z = 0; z < len; z++) {
                this[module][methods[z]] = this[module][methods[z]].bind(this);
            }
        },
        alignment: function() {
            return {
                left: function() {
                    this.alignment.set('');
                },
                right: function() {
                    this.alignment.set('right');
                },
                center: function() {
                    this.alignment.set('center');
                },
                justify: function() {
                    this.alignment.set('justify');
                },
                set: function(type) {
                    // focus
                    if (!this.utils.browser('msie'))
                        this.$editor.focus();

                    this.buffer.set();
                    this.selection.save();

                    // get blocks
                    this.alignment.blocks = this.selection.getBlocks();
                    this.alignment.type = type;

                    // set alignment
                    if (this.alignment.isLinebreaksOrNoBlocks()) {
                        this.alignment.setText();
                    } else {
                        this.alignment.setBlocks();
                    }

                    // sync
                    this.selection.restore();
                    this.code.sync();
                },
                setText: function() {
                    var wrapper = this.selection.wrap('div');
                    $(wrapper).attr('data-tagblock', 'redactor').css('text-align', this.alignment.type);
                },
                setBlocks: function() {
                    $.each(this.alignment.blocks, $.proxy(function(i, el) {
                        var $el = this.utils.getAlignmentElement(el);
                        if (!$el)
                            return;

                        if (this.alignment.isNeedReplaceElement($el)) {
                            this.alignment.replaceElement($el);
                        } else {
                            this.alignment.alignElement($el);
                        }

                    }, this));
                },
                isLinebreaksOrNoBlocks: function() {
                    return (this.opts.linebreaks && this.alignment.blocks[0] === false);
                },
                isNeedReplaceElement: function($el) {
                    return (this.alignment.type === '' && typeof ($el.data('tagblock')) !== 'undefined');
                },
                replaceElement: function($el) {
                    $el.replaceWith($el.html());
                },
                alignElement: function($el) {
                    $el.css('text-align', this.alignment.type);
                    this.utils.removeEmptyAttr($el, 'style');
                }
            };
        },
        autosave: function() {
            return {
                html: false,
                enable: function() {
                    if (!this.opts.autosave)
                        return;

                    this.autosave.name = (this.opts.autosaveName) ? this.opts.autosaveName : this.$textarea.attr('name');

                    if (this.opts.autosaveOnChange)
                        return;
                    this.autosaveInterval = setInterval(this.autosave.load, this.opts.autosaveInterval * 1000);
                },
                onChange: function() {
                    if (!this.opts.autosaveOnChange)
                        return;
                    this.autosave.load();
                },
                load: function() {
                    if (!this.opts.autosave)
                        return;

                    this.autosave.source = this.code.get();

                    if (this.autosave.html === this.autosave.source)
                        return;

                    // data
                    var data = {};
                    data['name'] = this.autosave.name;
                    data[this.autosave.name] = this.autosave.source;
                    data = this.autosave.getHiddenFields(data);

                    // ajax
                    var jsxhr = $.ajax({
                        url: this.opts.autosave,
                        type: 'post',
                        data: data
                    });

                    jsxhr.done(this.autosave.success);
                },
                getHiddenFields: function(data) {
                    if (this.opts.autosaveFields === false || typeof this.opts.autosaveFields !== 'object') {
                        return data;
                    }

                    $.each(this.opts.autosaveFields, $.proxy(function(k, v) {
                        if (v !== null && v.toString().indexOf('#') === 0)
                            v = $(v).val();
                        data[k] = v;

                    }, this));

                    return data;

                },
                success: function(data) {
                    var json;
                    try {
                        json = $.parseJSON(data);
                    } catch (e) {
                        //data has already been parsed
                        json = data;
                    }

                    var callbackName = (typeof json.error == 'undefined') ? 'autosave' : 'autosaveError';

                    this.core.setCallback(callbackName, this.autosave.name, json);
                    this.autosave.html = this.autosave.source;
                },
                disable: function() {
                    clearInterval(this.autosaveInterval);
                }
            };
        },
        block: function() {
            return {
                formatting: function(name) {
                    this.block.clearStyle = false;
                    var type, value;

                    if (typeof this.formatting[name].data != 'undefined')
                        type = 'data';
                    else if (typeof this.formatting[name].attr != 'undefined')
                        type = 'attr';
                    else if (typeof this.formatting[name]['class'] != 'undefined')
                        type = 'class';

                    if (typeof this.formatting[name].clear != 'undefined') {
                        this.block.clearStyle = true;
                    }

                    if (type)
                        value = this.formatting[name][type];

                    this.block.format(this.formatting[name].tag, type, value);

                },
                format: function(tag, type, value) {
                    if (tag == 'quote')
                        tag = 'blockquote';

                    var formatTags = ['p', 'pre', 'blockquote', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
                    if ($.inArray(tag, formatTags) == -1)
                        return;

                    this.block.isRemoveInline = (tag == 'pre' || tag.search(/h[1-6]/i) != -1);

                    // focus
                    if (!this.utils.browser('msie'))
                        this.$editor.focus();

                    var html = $.trim(this.$editor.html());
                    this.block.isEmpty = this.utils.isEmpty(html);

                    // FF focus
                    if (this.utils.browser('mozilla') && !this.focus.isFocused()) {
                        if (this.block.isEmpty) {
                            var $first;
                            if (!this.opts.linebreaks) {
                                $first = this.$editor.children().first();
                                this.caret.setEnd($first);
                            }
                        }
                    }

                    this.block.blocks = this.selection.getBlocks();

                    this.block.blocksSize = this.block.blocks.length;
                    this.block.type = type;
                    this.block.value = value;

                    this.buffer.set();
                    this.selection.save();

                    this.block.set(tag);

                    this.selection.restore();
                    this.code.sync();
                    this.observe.load();

                },
                set: function(tag) {

                    this.selection.get();
                    this.block.containerTag = this.range.commonAncestorContainer.tagName;

                    if (this.range.collapsed) {
                        this.block.setCollapsed(tag);
                    } else {
                        this.block.setMultiple(tag);
                    }
                },
                setCollapsed: function(tag) {
                    if (this.opts.linebreaks && this.block.isEmpty && tag != 'p') {
                        var node = document.createElement(tag);
                        this.$editor.html(node);
                        this.caret.setEnd(node);

                        return;
                    }

                    var block = this.block.blocks[0];
                    if (block === false)
                        return;

                    if (block.tagName == 'LI') {
                        if (tag != 'blockquote')
                            return;

                        this.block.formatListToBlockquote();
                        return;
                    }

                    var isContainerTable = (this.block.containerTag == 'TD' || this.block.containerTag == 'TH');
                    if (isContainerTable && !this.opts.linebreaks) {
                        document.execCommand('formatblock', false, '<' + tag + '>');

                        block = this.selection.getBlock();
                        this.block.toggle($(block));

                    } else if (block.tagName.toLowerCase() != tag) {
                        if (this.opts.linebreaks && tag == 'p') {/* VWO Hack: Done to prevent redactor from adding br's
							 $(block).append('<br>');
							 this.utils.replaceWithContents(block);
							 */
                        } else {
                            var $formatted = this.utils.replaceToTag(block, tag);

                            this.block.toggle($formatted);

                            if (tag != 'p' && tag != 'blockquote')
                                $formatted.find('img').remove();
                            if (this.block.isRemoveInline)
                                this.utils.removeInlineTags($formatted);
                            if (tag == 'p' || this.block.headTag)
                                $formatted.find('p').contents().unwrap();

                            this.block.formatTableWrapping($formatted);
                        }
                    } else if (tag == 'blockquote' && block.tagName.toLowerCase() == tag) {
                        // blockquote off
                        if (this.opts.linebreaks) {
                            $(block).append('<br>');
                            this.utils.replaceWithContents(block);
                        } else {
                            var $el = this.utils.replaceToTag(block, 'p');
                            this.block.toggle($el);
                        }
                    } else if (block.tagName.toLowerCase() == tag) {
                        this.block.toggle($(block));
                    }

                    if (typeof this.block.type == 'undefined' && typeof this.block.value == 'undefined') {
                        $(block).removeAttr('class').removeAttr('style');
                    }
                },
                setMultiple: function(tag) {
                    var block = this.block.blocks[0];
                    var isContainerTable = (this.block.containerTag == 'TD' || this.block.containerTag == 'TH');

                    if (block !== false && this.block.blocksSize === 1) {
                        if (block.tagName.toLowerCase() == tag && tag == 'blockquote') {
                            // blockquote off
                            if (this.opts.linebreaks) {
                                $(block).append('<br>');
                                this.utils.replaceWithContents(block);
                            } else {
                                var $el = this.utils.replaceToTag(block, 'p');
                                this.block.toggle($el);
                            }
                        } else if (block.tagName == 'LI') {
                            if (tag != 'blockquote')
                                return;

                            this.block.formatListToBlockquote();
                        } else if (this.block.containerTag == 'BLOCKQUOTE') {
                            this.block.formatBlockquote(tag);
                        } else if (this.opts.linebreaks && ((isContainerTable) || (this.range.commonAncestorContainer != block))) {
                            this.block.formatWrap(tag);
                        } else {
                            if (this.opts.linebreaks && tag == 'p') {/* VWO Hack
								 $(block).prepend('<br>').append('<br>');
								 this.utils.replaceWithContents(block);
								 */
                            } else if (block.tagName === 'TD') {
                                this.block.formatWrap(tag);
                            } else {
                                var $formatted = this.utils.replaceToTag(block, tag);

                                this.block.toggle($formatted);

                                if (this.block.isRemoveInline)
                                    this.utils.removeInlineTags($formatted);
                                if (tag == 'p' || this.block.headTag)
                                    $formatted.find('p').contents().unwrap();
                            }
                        }
                    } else {
                        if (this.opts.linebreaks || tag != 'p') {
                            if (tag == 'blockquote') {
                                var count = 0;
                                for (var i = 0; i < this.block.blocksSize; i++) {
                                    if (this.block.blocks[i].tagName == 'BLOCKQUOTE')
                                        count++;
                                }

                                // only blockquote selected
                                if (count == this.block.blocksSize) {
                                    $.each(this.block.blocks, $.proxy(function(i, s) {
                                        var $formatted = false;
                                        if (this.opts.linebreaks) {
                                            $(s).prepend('<br>').append('<br>');
                                            $formatted = this.utils.replaceWithContents(s);
                                        } else {
                                            $formatted = this.utils.replaceToTag(s, 'p');
                                        }

                                        if ($formatted && typeof this.block.type == 'undefined' && typeof this.block.value == 'undefined') {
                                            $formatted.removeAttr('class').removeAttr('style');
                                        }

                                    }, this));

                                    return;
                                }

                            }

                            this.block.formatWrap(tag);
                        } else {
                            var classSize = 0;
                            var toggleType = false;
                            if (this.block.type == 'class') {
                                toggleType = 'toggle';
                                classSize = $(this.block.blocks).filter('.' + this.block.value).length;

                                if (this.block.blocksSize == classSize)
                                    toggleType = 'toggle';
                                else if (this.block.blocksSize > classSize)
                                    toggleType = 'set';
                                else if (classSize === 0)
                                    toggleType = 'set';

                            }

                            var exceptTags = ['ul', 'ol', 'li', 'td', 'th', 'dl', 'dt', 'dd'];
                            $.each(this.block.blocks, $.proxy(function(i, s) {
                                if ($.inArray(s.tagName.toLowerCase(), exceptTags) != -1)
                                    return;

                                var $formatted = this.utils.replaceToTag(s, tag);

                                if (toggleType) {
                                    if (toggleType == 'toggle')
                                        this.block.toggle($formatted);
                                    else if (toggleType == 'remove')
                                        this.block.remove($formatted);
                                    else if (toggleType == 'set')
                                        this.block.setForce($formatted);
                                } else
                                    this.block.toggle($formatted);

                                if (tag != 'p' && tag != 'blockquote')
                                    $formatted.find('img').remove();
                                if (this.block.isRemoveInline)
                                    this.utils.removeInlineTags($formatted);
                                if (tag == 'p' || this.block.headTag)
                                    $formatted.find('p').contents().unwrap();

                                if (typeof this.block.type == 'undefined' && typeof this.block.value == 'undefined') {
                                    $formatted.removeAttr('class').removeAttr('style');
                                }

                            }, this));
                        }
                    }
                },
                setForce: function($el) {
                    // remove style and class if the specified setting
                    if (this.block.clearStyle) {
                        $el.removeAttr('class').removeAttr('style');
                    }

                    if (this.block.type == 'class') {
                        $el.addClass(this.block.value);
                        return;
                    } else if (this.block.type == 'attr' || this.block.type == 'data') {
                        $el.attr(this.block.value.name, this.block.value.value);
                        return;
                    }
                },
                toggle: function($el) {
                    // remove style and class if the specified setting
                    if (this.block.clearStyle) {
                        $el.removeAttr('class').removeAttr('style');
                    }

                    if (this.block.type == 'class') {
                        $el.toggleClass(this.block.value);
                        return;
                    } else if (this.block.type == 'attr' || this.block.type == 'data') {
                        if ($el.attr(this.block.value.name) == this.block.value.value) {
                            $el.removeAttr(this.block.value.name);
                        } else {
                            $el.attr(this.block.value.name, this.block.value.value);
                        }

                        return;
                    } else {
                        $el.removeAttr('style class');
                        return;
                    }
                },
                remove: function($el) {
                    $el.removeClass(this.block.value);
                },
                formatListToBlockquote: function() {
                    var block = $(this.block.blocks[0]).closest('ul, ol', this.$editor[0]);

                    $(block).find('ul, ol').contents().unwrap();
                    $(block).find('li').append($('<br>')).contents().unwrap();

                    var $el = this.utils.replaceToTag(block, 'blockquote');
                    this.block.toggle($el);
                },
                formatBlockquote: function(tag) {
                    document.execCommand('outdent');
                    document.execCommand('formatblock', false, tag);

                    this.clean.clearUnverified();
                    this.$editor.find('p:empty').remove();

                    var formatted = this.selection.getBlock();

                    if (tag != 'p') {
                        $(formatted).find('img').remove();
                    }

                    if (!this.opts.linebreaks) {
                        this.block.toggle($(formatted));
                    }

                    this.$editor.find('ul, ol, tr, blockquote, p').each($.proxy(this.utils.removeEmpty, this));

                    if (this.opts.linebreaks && tag == 'p') {
                        this.utils.replaceWithContents(formatted);
                    }

                },
                formatWrap: function(tag) {
                    if (this.block.containerTag == 'UL' || this.block.containerTag == 'OL') {
                        if (tag == 'blockquote') {
                            this.block.formatListToBlockquote();
                        } else {
                            return;
                        }
                    }

                    var formatted = this.selection.wrap(tag);
                    if (formatted === false)
                        return;

                    var $formatted = $(formatted);

                    this.block.formatTableWrapping($formatted);

                    var $elements = $formatted.find(this.opts.blockLevelElements.join(',') + ', td, table, thead, tbody, tfoot, th, tr');

                    $elements.contents().unwrap();

                    if (tag != 'p' && tag != 'blockquote')
                        $formatted.find('img').remove();

                    $.each(this.block.blocks, $.proxy(this.utils.removeEmpty, this));

                    $formatted.append(this.selection.getMarker(2));

                    if (!this.opts.linebreaks) {
                        this.block.toggle($formatted);
                    }

                    this.$editor.find('ul, ol, tr, blockquote, p').each($.proxy(this.utils.removeEmpty, this));
                    $formatted.find('blockquote:empty').remove();

                    if (this.block.isRemoveInline) {
                        this.utils.removeInlineTags($formatted);
                    }

                    if (this.opts.linebreaks && tag == 'p') {
                        this.utils.replaceWithContents($formatted);
                    }

                    if (this.opts.linebreaks) {
                        var $next = $formatted.next().next();
                        if ($next.size() != 0 && $next[0].tagName === 'BR') {
                            $next.remove();
                        }
                    }

                },
                formatTableWrapping: function($formatted) {
                    if ($formatted.closest('table', this.$editor[0]).length === 0)
                        return;

                    if ($formatted.closest('tr', this.$editor[0]).length === 0)
                        $formatted.wrap('<tr>');
                    if ($formatted.closest('td', this.$editor[0]).length === 0 && $formatted.closest('th').length === 0) {
                        $formatted.wrap('<td>');
                    }
                },
                removeData: function(name, value) {
                    var blocks = this.selection.getBlocks();
                    $(blocks).removeAttr('data-' + name);

                    this.code.sync();
                },
                setData: function(name, value) {
                    var blocks = this.selection.getBlocks();
                    $(blocks).attr('data-' + name, value);

                    this.code.sync();
                },
                toggleData: function(name, value) {
                    var blocks = this.selection.getBlocks();
                    $.each(blocks, function() {
                        if ($(this).attr('data-' + name)) {
                            $(this).removeAttr('data-' + name);
                        } else {
                            $(this).attr('data-' + name, value);
                        }
                    });
                },
                removeAttr: function(attr, value) {
                    var blocks = this.selection.getBlocks();
                    $(blocks).removeAttr(attr);

                    this.code.sync();
                },
                setAttr: function(attr, value) {
                    var blocks = this.selection.getBlocks();
                    $(blocks).attr(attr, value);

                    this.code.sync();
                },
                toggleAttr: function(attr, value) {
                    var blocks = this.selection.getBlocks();
                    $.each(blocks, function() {
                        if ($(this).attr(name)) {
                            $(this).removeAttr(name);
                        } else {
                            $(this).attr(name, value);
                        }
                    });
                },
                removeClass: function(className) {
                    var blocks = this.selection.getBlocks();
                    $(blocks).removeClass(className);

                    this.utils.removeEmptyAttr(blocks, 'class');

                    this.code.sync();
                },
                setClass: function(className) {
                    var blocks = this.selection.getBlocks();
                    $(blocks).addClass(className);

                    this.code.sync();
                },
                toggleClass: function(className) {
                    var blocks = this.selection.getBlocks();
                    $(blocks).toggleClass(className);

                    this.code.sync();
                }
            };
        },
        buffer: function() {
            return {
                set: function(type) {
                    if (typeof type == 'undefined' || type == 'undo') {
                        this.buffer.setUndo();
                    } else {
                        this.buffer.setRedo();
                    }
                },
                setUndo: function() {
                    this.selection.save();
                    this.opts.buffer.push(this.$editor.html());
                    this.selection.restore();
                },
                setRedo: function() {
                    this.selection.save();
                    this.opts.rebuffer.push(this.$editor.html());
                    this.selection.restore();
                },
                getUndo: function() {
                    this.$editor.html(this.opts.buffer.pop());
                },
                getRedo: function() {
                    this.$editor.html(this.opts.rebuffer.pop());
                },
                add: function() {
                    this.opts.buffer.push(this.$editor.html());
                },
                undo: function() {
                    if (this.opts.buffer.length === 0)
                        return;

                    this.buffer.set('redo');
                    this.buffer.getUndo();

                    this.selection.restore();

                    setTimeout($.proxy(this.observe.load, this), 50);
                },
                redo: function() {
                    if (this.opts.rebuffer.length === 0)
                        return;

                    this.buffer.set('undo');
                    this.buffer.getRedo();

                    this.selection.restore();

                    setTimeout($.proxy(this.observe.load, this), 50);
                }
            };
        },
        build: function() {
            return {
                run: function() {
                    this.build.createContainerBox();
                    this.build.loadContent();
                    this.build.loadEditor();
                    this.build.enableEditor();
                    this.build.setCodeAndCall();
                },
                isTextarea: function() {
                    return (this.$element[0].tagName === 'TEXTAREA');
                },
                createContainerBox: function() {
                    this.$box = $('<div class="redactor-box" role="application" />');
                },
                createTextarea: function() {
                    this.$textarea = $('<textarea />').attr('name', this.build.getTextareaName());
                },
                getTextareaName: function() {
                    return ((typeof (name) == 'undefined')) ? 'content-' + this.uuid : this.$element.attr('id');
                },
                loadContent: function() {
                    var func = (this.build.isTextarea()) ? 'val' : 'html';
                    this.content = $.trim(this.$element[func]());
                },
                enableEditor: function() {
                    this.$editor.attr({
                        'contenteditable': true,
                        'dir': this.opts.direction
                    });
                },
                loadEditor: function() {
                    var func = (this.build.isTextarea()) ? 'fromTextarea' : 'fromElement';
                    this.build[func]();
                },
                fromTextarea: function() {
                    this.$editor = $('<div />');
                    this.$textarea = this.$element;
                    this.$box.insertAfter(this.$element).append(this.$editor).append(this.$element);
                    this.$editor.addClass('redactor-editor');

                    this.$element.hide();
                },
                fromElement: function() {
                    this.$editor = this.$element;
                    this.build.createTextarea();

                    /* VWO change */
                    this.$editor.append(this.$textarea);
                    this.$box.insertAfter('body');
                    /* end VWO change */

                    this.$editor.addClass('redactor-editor');

                    this.$textarea.hide();
                },
                setCodeAndCall: function() {
                    // set code
                    this.code.set(this.content);

                    this.build.setOptions();
                    this.build.callEditor();

                    // code mode
                    if (this.opts.visual)
                        return;
                    setTimeout($.proxy(this.code.showCode, this), 200);
                },
                callEditor: function() {
                    this.build.disableMozillaEditing();
                    this.build.disableIeLinks();
                    this.build.setEvents();
                    this.build.setHelpers();

                    // load toolbar
                    if (this.opts.toolbar) {
                        this.opts.toolbar = this.toolbar.init();
                        this.toolbar.build();
                    }

                    // modal templates init
                    this.modal.loadTemplates();

                    // plugins
                    this.build.plugins();

                    // observers
                    setTimeout($.proxy(this.observe.load, this), 4);

                    // init callback
                    this.core.setCallback('init');
                },
                setOptions: function() {
                    // textarea direction
                    $(this.$textarea).attr('dir', this.opts.direction);

                    if (this.opts.linebreaks)
                        this.$editor.addClass('redactor-linebreaks');

                    if (this.opts.tabindex)
                        this.$editor.attr('tabindex', this.opts.tabindex);

                    if (this.opts.minHeight)
                        this.$editor.css('minHeight', this.opts.minHeight);
                    if (this.opts.maxHeight)
                        this.$editor.css('maxHeight', this.opts.maxHeight);

                },
                setEventDropUpload: function(e) {
                    e.preventDefault();

                    if (!this.opts.dragImageUpload || !this.opts.dragFileUpload)
                        return;

                    var files = e.dataTransfer.files;
                    this.upload.directUpload(files[0], e);
                },
                setEventDrop: function(e) {
                    this.code.sync();
                    setTimeout(this.clean.clearUnverified, 1);
                    this.core.setCallback('drop', e);
                },
                setEvents: function() {
                    // drop
                    this.$editor.on('drop.redactor', $.proxy(function(e) {
                        e = e.originalEvent || e;

                        if (window.FormData === undefined || !e.dataTransfer)
                            return true;

                        if (e.dataTransfer.files.length === 0) {
                            return this.build.setEventDrop(e);
                        } else {
                            this.build.setEventDropUpload(e);
                        }

                        setTimeout(this.clean.clearUnverified, 1);
                        this.core.setCallback('drop', e);

                    }, this));

                    // click
                    this.$editor.on('click.redactor', $.proxy(function(e) {
                        var event = this.core.getEvent();
                        var type = (event == 'click' || event == 'arrow') ? false : 'click';

                        this.core.addEvent(type);
                        this.utils.disableSelectAll();
                        this.core.setCallback('click', e);

                    }, this));

                    // paste
                    this.$editor.on('paste.redactor', $.proxy(this.paste.init, this));

                    // cut
                    this.$editor.on('cut.redactor', $.proxy(this.code.sync, this));

                    // keydown
                    this.$editor.on('keydown.redactor', $.proxy(this.keydown.init, this));

                    // keyup
                    this.$editor.on('keyup.redactor', $.proxy(this.keyup.init, this));

                    // textarea keydown
                    if ($.isFunction(this.opts.codeKeydownCallback)) {
                        this.$textarea.on('keydown.redactor-textarea', $.proxy(this.opts.codeKeydownCallback, this));
                    }

                    // textarea keyup
                    if ($.isFunction(this.opts.codeKeyupCallback)) {
                        this.$textarea.on('keyup.redactor-textarea', $.proxy(this.opts.codeKeyupCallback, this));
                    }

                    // focus
                    this.$editor.on('focus.redactor', $.proxy(function(e) {
                        if ($.isFunction(this.opts.focusCallback))
                            this.core.setCallback('focus', e);

                        if (this.selection.getCurrent() === false) {
                            this.selection.get();
                            this.range.setStart(this.$editor[0], 0);
                            this.range.setEnd(this.$editor[0], 0);
                            this.selection.addRange();
                        }

                    }, this));

                    // blur
                    $(document).on('mousedown.redactor-blur.' + this.uuid, $.proxy(function(e) {
                        if (this.start)
                            return;
                        if (this.rtePaste)
                            return;

                        if ($(e.target).closest('.redactor-editor, .redactor-toolbar, .redactor-dropdown').size() !== 0) {
                            return;
                        }

                        this.utils.disableSelectAll();
                        if ($.isFunction(this.opts.blurCallback))
                            this.core.setCallback('blur', e);

                    }, this));

                },
                setHelpers: function() {
                    // linkify
                    if (this.linkify.isEnabled()) {
                        this.linkify.format();
                    }

                    // placeholder
                    this.placeholder.enable();

                    // focus
                    if (this.opts.focus)
                        setTimeout(this.focus.setStart, 100);
                    if (this.opts.focusEnd)
                        setTimeout(this.focus.setEnd, 100);

                },
                plugins: function() {
                    if (!this.opts.plugins)
                        return;

                    $.each(this.opts.plugins, $.proxy(function(i, s) {
                        var func = (typeof RedactorPlugins !== 'undefined' && typeof RedactorPlugins[s] !== 'undefined') ? RedactorPlugins : Redactor.fn;

                        if (!$.isFunction(func[s])) {
                            return;
                        }

                        this[s] = func[s]();

                        // get methods
                        var methods = this.getModuleMethods(this[s]);
                        var len = methods.length;

                        // bind methods
                        for (var z = 0; z < len; z++) {
                            this[s][methods[z]] = this[s][methods[z]].bind(this);
                        }

                        if ($.isFunction(this[s].init)) {
                            this[s].init();
                        }

                    }, this));

                },
                disableMozillaEditing: function() {
                    if (!this.utils.browser('mozilla'))
                        return;

                    // FF fix
                    try {
                        document.execCommand('enableObjectResizing', false, false);
                        document.execCommand('enableInlineTableEditing', false, false);
                    } catch (e) {}
                },
                disableIeLinks: function() {
                    if (!this.utils.browser('msie'))
                        return;

                    // IE prevent converting links
                    document.execCommand("AutoUrlDetect", false, false);
                }
            };
        },
        button: function() {
            return {
                build: function(btnName, btnObject) {
                    var $button = $('<a href="#" class="re-icon re-' + btnName + '" rel="' + btnName + '" />').attr({
                        'role': 'button',
                        'aria-label': btnObject.title,
                        'tabindex': '-1'
                    });

                    // click
                    if (btnObject.func || btnObject.command || btnObject.dropdown) {
                        this.button.setEvent($button, btnName, btnObject);
                    }

                    // dropdown
                    if (btnObject.dropdown) {
                        $button.addClass('redactor-toolbar-link-dropdown').attr('aria-haspopup', true);

                        var $dropdown = $('<div class="redactor-dropdown redactor-dropdown-' + this.uuid + ' redactor-dropdown-box-' + btnName + '" style="display: none;">');
                        $button.data('dropdown', $dropdown);
                        this.dropdown.build(btnName, $dropdown, btnObject.dropdown);
                    }

                    // tooltip
                    if (this.utils.isDesktop()) {
                        this.button.createTooltip($button, btnName, btnObject.title);
                    }

                    return $button;
                },
                setEvent: function($button, btnName, btnObject) {
                    $button.on('touchstart click', $.proxy(function(e) {
                        if ($button.hasClass('redactor-button-disabled'))
                            return false;

                        var type = 'func';
                        var callback = btnObject.func;

                        if (btnObject.command) {
                            type = 'command';
                            callback = btnObject.command;
                        } else if (btnObject.dropdown) {
                            type = 'dropdown';
                            callback = false;
                        }

                        this.button.onClick(e, btnName, type, callback);

                    }, this));
                },
                createTooltip: function($button, name, title) {
                    var $tooltip = $('<span>').addClass('redactor-toolbar-tooltip redactor-toolbar-tooltip-' + this.uuid + ' redactor-toolbar-tooltip-' + name).hide().html(title);
                    $tooltip.appendTo('body');

                    $button.on('mouseover', function() {
                        if ($(this).hasClass('redactor-button-disabled'))
                            return;

                        var pos = $button.offset();

                        $tooltip.show();
                        $tooltip.css({
                            top: (pos.top + $button.innerHeight()) + 'px',
                            left: (pos.left + $button.innerWidth() / 2 - $tooltip.innerWidth() / 2) + 'px'
                        });
                    });

                    $button.on('mouseout', function() {
                        $tooltip.hide();
                    });

                },
                onClick: function(e, btnName, type, callback) {
                    this.button.caretOffset = this.caret.getOffset();

                    e.preventDefault();

                    $(document).find('.redactor-toolbar-tooltip').hide();

                    if (this.utils.browser('msie'))
                        e.returnValue = false;

                    if (type == 'command')
                        this.inline.format(callback);
                    else if (type == 'dropdown')
                        this.dropdown.show(e, btnName);
                    else
                        this.button.onClickCallback(e, callback, btnName);
                },
                onClickCallback: function(e, callback, btnName) {
                    var func;

                    if ($.isFunction(callback))
                        callback.call(this, btnName);
                    else if (callback.search(/\./) != '-1') {
                        func = callback.split('.');
                        if (typeof this[func[0]] == 'undefined')
                            return;

                        this[func[0]][func[1]](btnName);
                    } else
                        this[callback](btnName);

                    this.observe.buttons(e, btnName);
                },
                get: function(key) {
                    return this.$toolbar.find('a.re-' + key);
                },
                setActive: function(key) {
                    this.button.get(key).addClass('redactor-act');
                },
                setInactive: function(key) {
                    this.button.get(key).removeClass('redactor-act');
                },
                setInactiveAll: function(key) {
                    if (typeof key === 'undefined') {
                        this.$toolbar.find('a.re-icon').removeClass('redactor-act');
                    } else {
                        this.$toolbar.find('a.re-icon').not('.re-' + key).removeClass('redactor-act');
                    }
                },
                setActiveInVisual: function() {
                    this.$toolbar.find('a.re-icon').not('a.re-html, a.re-fullscreen').removeClass('redactor-button-disabled');
                },
                setInactiveInCode: function() {
                    this.$toolbar.find('a.re-icon').not('a.re-html, a.re-fullscreen').addClass('redactor-button-disabled');
                },
                changeIcon: function(key, classname) {
                    this.button.get(key).addClass('re-' + classname);
                },
                removeIcon: function(key, classname) {
                    this.button.get(key).removeClass('re-' + classname);
                },
                setAwesome: function(key, name) {
                    var $button = this.button.get(key);
                    $button.removeClass('redactor-btn-image').addClass('fa-redactor-btn');
                    $button.html('<i class="fa ' + name + '"></i>');
                },
                addCallback: function($btn, callback) {
                    if ($btn == "buffer")
                        return;

                    var type = (callback == 'dropdown') ? 'dropdown' : 'func';
                    var key = $btn.attr('rel');
                    $btn.on('touchstart click', $.proxy(function(e) {
                        if ($btn.hasClass('redactor-button-disabled'))
                            return false;
                        this.button.onClick(e, key, type, callback);

                    }, this));
                },
                addDropdown: function($btn, dropdown) {
                    $btn.addClass('redactor-toolbar-link-dropdown').attr('aria-haspopup', true);

                    var key = $btn.attr('rel');
                    this.button.addCallback($btn, 'dropdown');

                    var $dropdown = $('<div class="redactor-dropdown redactor-dropdown-' + this.uuid + ' redactor-dropdown-box-' + key + '" style="display: none;">');
                    $btn.data('dropdown', $dropdown);

                    // build dropdown
                    if (dropdown)
                        this.dropdown.build(key, $dropdown, dropdown);

                    return $dropdown;
                },
                add: function(key, title) {
                    if (!this.opts.toolbar)
                        return;

                    if (this.button.isMobileUndoRedo(key))
                        return "buffer";

                    var btn = this.button.build(key, {
                        title: title
                    });
                    btn.addClass('redactor-btn-image');

                    this.$toolbar.append($('<li>').append(btn));

                    return btn;
                },
                addFirst: function(key, title) {
                    if (!this.opts.toolbar)
                        return;

                    if (this.button.isMobileUndoRedo(key))
                        return "buffer";

                    var btn = this.button.build(key, {
                        title: title
                    });
                    btn.addClass('redactor-btn-image');
                    this.$toolbar.prepend($('<li>').append(btn));

                    return btn;
                },
                addAfter: function(afterkey, key, title) {
                    if (!this.opts.toolbar)
                        return;

                    if (this.button.isMobileUndoRedo(key))
                        return "buffer";

                    var btn = this.button.build(key, {
                        title: title
                    });
                    btn.addClass('redactor-btn-image');
                    var $btn = this.button.get(afterkey);

                    if ($btn.length !== 0)
                        $btn.parent().after($('<li>').append(btn));
                    else
                        this.$toolbar.append($('<li>').append(btn));

                    return btn;
                },
                addBefore: function(beforekey, key, title) {
                    if (!this.opts.toolbar)
                        return;

                    if (this.button.isMobileUndoRedo(key))
                        return "buffer";

                    var btn = this.button.build(key, {
                        title: title
                    });
                    btn.addClass('redactor-btn-image');
                    var $btn = this.button.get(beforekey);

                    if ($btn.length !== 0)
                        $btn.parent().before($('<li>').append(btn));
                    else
                        this.$toolbar.append($('<li>').append(btn));

                    return btn;
                },
                remove: function(key) {
                    this.button.get(key).remove();
                },
                isMobileUndoRedo: function(key) {
                    return (key == "undo" || key == "redo") && !this.utils.isDesktop();
                }
            };
        },
        caret: function() {
            return {
                setStart: function(node) {
                    // inline tag
                    if (!this.utils.isBlock(node)) {
                        var space = this.utils.createSpaceElement();

                        $(node).prepend(space);
                        this.caret.setEnd(space);
                    } else {
                        this.caret.set(node, 0, node, 0);
                    }
                },
                setEnd: function(node) {
                    node = node[0] || node;
                    if (node.lastChild.nodeType == 1) {
                        return this.caret.setAfter(node.lastChild);
                    }

                    this.caret.set(node, 1, node, 1);

                },
                set: function(orgn, orgo, focn, foco) {
                    // focus
                    // disabled in 10.0.7
                    // if (!this.utils.browser('msie')) this.$editor.focus();

                    orgn = orgn[0] || orgn;
                    focn = focn[0] || focn;

                    if (this.utils.isBlockTag(orgn.tagName) && orgn.innerHTML === '') {
                        orgn.innerHTML = this.opts.invisibleSpace;
                    }

                    if (orgn.tagName == 'BR' && this.opts.linebreaks === false) {
                        var parent = $(this.opts.emptyHtml)[0];
                        $(orgn).replaceWith(parent);
                        orgn = parent;
                        focn = orgn;
                    }

                    this.selection.get();

                    try {
                        this.range.setStart(orgn, orgo);
                        this.range.setEnd(focn, foco);
                    } catch (e) {}

                    this.selection.addRange();
                },
                setAfter: function(node) {
                    try {
                        var tag = $(node)[0].tagName;

                        // inline tag
                        if (tag != 'BR' && !this.utils.isBlock(node)) {
                            var space = this.utils.createSpaceElement();

                            $(node).after(space);
                            this.caret.setEnd(space);
                        } else {
                            if (tag != 'BR' && this.utils.browser('msie')) {
                                this.caret.setStart($(node).next());
                            } else {
                                this.caret.setAfterOrBefore(node, 'after');
                            }
                        }
                    } catch (e) {
                        var space = this.utils.createSpaceElement();
                        $(node).after(space);
                        this.caret.setEnd(space);
                    }
                },
                setBefore: function(node) {
                    // block tag
                    if (this.utils.isBlock(node)) {
                        this.caret.setEnd($(node).prev());
                    } else {
                        this.caret.setAfterOrBefore(node, 'before');
                    }
                },
                setAfterOrBefore: function(node, type) {
                    // focus
                    if (!this.utils.browser('msie'))
                        this.$editor.focus();

                    node = node[0] || node;

                    this.selection.get();

                    if (type == 'after') {
                        try {

                            this.range.setStartAfter(node);
                            this.range.setEndAfter(node);
                        } catch (e) {}
                    } else {
                        try {
                            this.range.setStartBefore(node);
                            this.range.setEndBefore(node);
                        } catch (e) {}
                    }

                    this.range.collapse(false);
                    this.selection.addRange();
                },
                getOffsetOfElement: function(node) {
                    node = node[0] || node;

                    this.selection.get();

                    var cloned = this.range.cloneRange();
                    cloned.selectNodeContents(node);
                    cloned.setEnd(this.range.endContainer, this.range.endOffset);

                    return $.trim(cloned.toString()).length;
                },
                getOffset: function() {
                    var offset = 0;
                    var sel = window.getSelection();

                    if (sel.rangeCount > 0) {
                        var range = window.getSelection().getRangeAt(0);
                        var caretRange = range.cloneRange();
                        caretRange.selectNodeContents(this.$editor[0]);
                        caretRange.setEnd(range.endContainer, range.endOffset);
                        offset = caretRange.toString().length;
                    }

                    return offset;
                },
                setOffset: function(start, end) {
                    if (typeof end == 'undefined')
                        end = start;
                    if (!this.focus.isFocused())
                        this.focus.setStart();

                    var sel = this.selection.get();
                    var node, offset = 0;
                    var walker = document.createTreeWalker(this.$editor[0], NodeFilter.SHOW_TEXT, null, null);

                    while (node == walker.nextNode()) {
                        offset += node.nodeValue.length;
                        if (offset > start) {
                            this.range.setStart(node, node.nodeValue.length + start - offset);
                            start = Infinity;
                        }

                        if (offset >= end) {
                            this.range.setEnd(node, node.nodeValue.length + end - offset);
                            break;
                        }
                    }

                    this.range.collapse(false);
                    this.selection.addRange();
                },
                // deprecated
                setToPoint: function(start, end) {
                    this.caret.setOffset(start, end);
                },
                getCoords: function() {
                    return this.caret.getOffset();
                }
            };
        },
        clean: function() {
            return {
                onSet: function(html) {
                    html = this.clean.savePreCode(html);

                    // convert script tag
                    html = html.replace(/<script(.*?[^>]?)>([\w\W]*?)<\/script>/gi, '<pre class="redactor-script-tag" style="display: none;" $1>$2</pre>');

                    // replace dollar sign to entity
                    html = html.replace(/\$/g, '&#36;');

                    // replace special characters in links
                    html = html.replace(/<a href="(.*?[^>]?)®(.*?[^>]?)">/gi, '<a href="$1&reg$2">');

                    if (this.opts.replaceDivs && !this.opts.linebreaks)
                        html = this.clean.replaceDivs(html);
                    if (this.opts.linebreaks)
                        html = this.clean.replaceParagraphsToBr(html);

                    // save form tag
                    html = this.clean.saveFormTags(html);

                    // convert font tag to span
                    var $div = $('<div>');
                    $div.html(html);
                    var fonts = $div.find('font[style]');
                    if (fonts.length !== 0) {
                        fonts.replaceWith(function() {
                            var $el = $(this);
                            var $span = $('<span>').attr('style', $el.attr('style'));
                            return $span.append($el.contents());
                        });

                        html = $div.html();
                    }

                    $div.remove();

                    // remove font tag
                    html = html.replace(/<font(.*?)>/gi, '');
                    html = html.replace(/<\/font>/gi, '');

                    // tidy html
                    html = this.tidy.load(html);

                    // paragraphize
                    if (this.opts.paragraphize)
                        html = this.paragraphize.load(html);

                    // verified
                    html = this.clean.setVerified(html);

                    // convert inline tags
                    html = this.clean.convertInline(html);

                    html = html.replace(/&amp;/g, '&');

                    return html;
                },
                onSync: function(html) {
                    // remove spaces
                    html = html.replace(/\u200B/g, '');
                    html = html.replace(/&#x200b;/gi, '');

                    if (this.opts.cleanSpaces) {
                        html = html.replace(/&nbsp;/gi, ' ');
                    }

                    if (html.search(/^<p>(||\s||<br\s?\/?>||&nbsp;)<\/p>$/i) != -1) {
                        return '';
                    }

                    // reconvert script tag
                    html = html.replace(/<pre class="redactor-script-tag" style="display: none;"(.*?[^>]?)>([\w\W]*?)<\/pre>/gi, '<script$1>$2</script>');

                    // restore form tag
                    html = this.clean.restoreFormTags(html);

                    var chars = {
                        '\u2122': '&trade;',
                        '\u00a9': '&copy;',
                        '\u2026': '&hellip;',
                        '\u2014': '&mdash;',
                        '\u2010': '&dash;'
                    };
                    // replace special characters
                    $.each(chars, function(i, s) {
                        html = html.replace(new RegExp(i,'g'), s);
                    });

                    // remove last br in FF
                    if (this.utils.browser('mozilla')) {
                        html = html.replace(/<br\s?\/?>$/gi, '');
                    }

                    // remove br in|of li tags
                    html = html.replace(new RegExp('<br\\s?/?></li>','gi'), '</li>');
                    html = html.replace(new RegExp('</li><br\\s?/?>','gi'), '</li>');

                    // remove empty attributes
                    html = html.replace(/<(.*?)rel="\s*?"(.*?[^>]?)>/gi, '<$1$2">');
                    html = html.replace(/<(.*?)style="\s*?"(.*?[^>]?)>/gi, '<$1$2">');
                    html = html.replace(/="">/gi, '>');
                    html = html.replace(/""">/gi, '">');
                    html = html.replace(/"">/gi, '">');

                    // remove verified
                    html = html.replace(/<div(.*?)data-tagblock="redactor"(.*?[^>])>/gi, '<div$1$2>');
                    html = html.replace(/<(.*?) data-verified="redactor"(.*?[^>])>/gi, '<$1$2>');

                    var $div = $("<div/>").html($.parseHTML(html, document, true));
                    $div.find("span").removeAttr("rel");

                    $div.find('pre .redactor-invisible-space').each(function() {
                        $(this).contents().unwrap();
                    });

                    html = $div.html();

                    // remove rel attribute from img
                    html = html.replace(/<img(.*?[^>])rel="(.*?[^>])"(.*?[^>])>/gi, '<img$1$3>');
                    html = html.replace(/<span class="redactor-invisible-space">(.*?)<\/span>/gi, '$1');

                    html = html.replace(/ data-save-url="(.*?[^>])"/gi, '');

                    // remove image resize
                    html = html.replace(/<span(.*?)id="redactor-image-box"(.*?[^>])>([\w\W]*?)<img(.*?)><\/span>/gi, '$3<img$4>');
                    html = html.replace(/<span(.*?)id="redactor-image-resizer"(.*?[^>])>(.*?)<\/span>/gi, '');
                    html = html.replace(/<span(.*?)id="redactor-image-editter"(.*?[^>])>(.*?)<\/span>/gi, '');

                    // remove font tag
                    html = html.replace(/<font(.*?)>/gi, '');
                    html = html.replace(/<\/font>/gi, '');

                    // tidy html
                    html = this.tidy.load(html);

                    // link nofollow
                    if (this.opts.linkNofollow) {
                        html = html.replace(/<a(.*?)rel="nofollow"(.*?[^>])>/gi, '<a$1$2>');
                        html = html.replace(/<a(.*?[^>])>/gi, '<a$1 rel="nofollow">');
                    }

                    // reconvert inline
                    html = html.replace(/\sdata-redactor-(tag|class|style)="(.*?[^>])"/gi, '');
                    html = html.replace(new RegExp('<(.*?) data-verified="redactor"(.*?[^>])>','gi'), '<$1$2>');
                    html = html.replace(new RegExp('<(.*?) data-verified="redactor">','gi'), '<$1>');

                    html = html.replace(/&amp;/g, '&');

                    return html;
                },
                onPaste: function(html, setMode) {
                    html = $.trim(html);
                    html = html.replace(/\$/g, '&#36;');

                    // convert dirty spaces
                    html = html.replace(/<span class="s[0-9]">/gi, '<span>');
                    html = html.replace(/<span class="Apple-converted-space">&nbsp;<\/span>/gi, ' ');
                    html = html.replace(/<span class="Apple-tab-span"[^>]*>\t<\/span>/gi, '\t');
                    html = html.replace(/<span[^>]*>(\s|&nbsp;)<\/span>/gi, ' ');

                    if (this.opts.pastePlainText) {
                        return this.clean.getPlainText(html);
                    }

                    if (!this.utils.isSelectAll() && typeof setMode == 'undefined') {
                        if (this.utils.isCurrentOrParent(['FIGCAPTION', 'A'])) {
                            return this.clean.getPlainText(html, false);
                        }

                        if (this.utils.isCurrentOrParent('PRE')) {
                            html = html.replace(/”/g, '"');
                            html = html.replace(/“/g, '"');
                            html = html.replace(/‘/g, '\'');
                            html = html.replace(/’/g, '\'');

                            return this.clean.getPreCode(html);
                        }

                        if (this.utils.isCurrentOrParent(['BLOCKQUOTE', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6'])) {
                            html = this.clean.getOnlyImages(html);

                            if (!this.utils.browser('msie')) {
                                var block = this.selection.getBlock();
                                if (block && block.tagName == 'P') {
                                    html = html.replace(/<img(.*?)>/gi, '<p><img$1></p>');
                                }
                            }

                            return html;
                        }

                        if (this.utils.isCurrentOrParent(['TD'])) {
                            html = this.clean.onPasteTidy(html, 'td');

                            if (this.opts.linebreaks)
                                html = this.clean.replaceParagraphsToBr(html);

                            html = this.clean.replaceDivsToBr(html);

                            return html;
                        }

                        if (this.utils.isCurrentOrParent(['LI'])) {
                            return this.clean.onPasteTidy(html, 'li');
                        }
                    }

                    html = this.clean.isSingleLine(html, setMode);

                    if (!this.clean.singleLine) {
                        if (this.opts.linebreaks)
                            html = this.clean.replaceParagraphsToBr(html);
                        if (this.opts.replaceDivs)
                            html = this.clean.replaceDivs(html);

                        html = this.clean.saveFormTags(html);
                    }

                    html = this.clean.onPasteWord(html);
                    html = this.clean.onPasteExtra(html);

                    html = this.clean.onPasteTidy(html, 'all');

                    // paragraphize
                    if (!this.clean.singleLine && this.opts.paragraphize) {
                        html = this.paragraphize.load(html);
                    }

                    html = this.clean.removeDirtyStyles(html);
                    html = this.clean.onPasteRemoveSpans(html);
                    html = this.clean.onPasteRemoveEmpty(html);

                    html = this.clean.convertInline(html);

                    return html;
                },
                onPasteWord: function(html) {
                    // comments
                    html = html.replace(/<!--[\s\S]*?-->/gi, '');

                    // style
                    html = html.replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '');

                    // op
                    html = html.replace(/<o\:p[^>]*>[\s\S]*?<\/o\:p>/gi, '');

                    if (html.match(/class="?Mso|style="[^"]*\bmso-|style='[^'']*\bmso-|w:WordDocument/i)) {
                        // comments
                        html = html.replace(/<!--[\s\S]+?-->/gi, '');

                        // scripts
                        html = html.replace(/<(!|script[^>]*>.*?<\/script(?=[>\s])|\/?(\?xml(:\w+)?|img|meta|link|style|\w:\w+)(?=[\s\/>]))[^>]*>/gi, '');

                        // Convert <s> into <strike>
                        html = html.replace(/<(\/?)s>/gi, "<$1strike>");

                        // Replace nbsp entites to char since it's easier to handle
                        html = html.replace(/ /gi, ' ');

                        // Convert <span style="mso-spacerun:yes">___</span> to string of alternating
                        // breaking/non-breaking spaces of same length
                        html = html.replace(/<span\s+style\s*=\s*"\s*mso-spacerun\s*:\s*yes\s*;?\s*"\s*>([\s\u00a0]*)<\/span>/gi, function(str, spaces) {
                            return (spaces.length > 0) ? spaces.replace(/./, " ").slice(Math.floor(spaces.length / 2)).split("").join("\u00a0") : '';
                        });

                        html = this.clean.onPasteIeFixLinks(html);

                        // shapes
                        html = html.replace(/<img(.*?)v:shapes=(.*?)>/gi, '');
                        html = html.replace(/src="file\:\/\/(.*?)"/, 'src=""');

                        // lists
                        var $div = $("<div/>").html(html);

                        var lastList = false;
                        var lastLevel = 1;
                        var listsIds = [];

                        $div.find("p[style]").each(function() {
                            var matches = $(this).attr('style').match(/mso\-list\:l([0-9]+)\slevel([0-9]+)/);

                            if (matches) {
                                var currentList = parseInt(matches[1]);
                                var currentLevel = parseInt(matches[2]);
                                var listType = $(this).html().match(/^[\w]+\./) ? "ol" : "ul";

                                var $li = $("<li/>").html($(this).html());

                                $li.html($li.html().replace(/^([\w\.]+)</, '<'));
                                $li.find("span:first").remove();

                                if (currentLevel == 1 && $.inArray(currentList, listsIds) == -1) {
                                    var $list = $("<" + listType + "/>").attr({
                                        "data-level": currentLevel,
                                        "data-list": currentList
                                    }).html($li);

                                    $(this).replaceWith($list);

                                    lastList = currentList;
                                    listsIds.push(currentList);
                                } else {
                                    if (currentLevel > lastLevel) {
                                        var $prevList = $div.find('[data-level="' + lastLevel + '"][data-list="' + lastList + '"]');

                                        var $lastList = $prevList;

                                        for (var i = lastLevel; i < currentLevel; i++) {
                                            $list = $("<" + listType + "/>");

                                            $list.appendTo($lastList.find("li").last());

                                            $lastList = $list;
                                        }

                                        $lastList.attr({
                                            "data-level": currentLevel,
                                            "data-list": currentList
                                        }).html($li);

                                    } else {
                                        var $prevList = $div.find('[data-level="' + currentLevel + '"][data-list="' + currentList + '"]').last();

                                        $prevList.append($li);
                                    }

                                    lastLevel = currentLevel;
                                    lastList = currentList;

                                    $(this).remove();
                                }
                            }
                        });

                        $div.find('[data-level][data-list]').removeAttr('data-level data-list');
                        html = $div.html();

                        // remove ms word's bullet
                        html = html.replace(/·/g, '');
                        html = html.replace(/<p class="Mso(.*?)"/gi, '<p');

                        // classes
                        html = html.replace(/ class=\"(mso[^\"]*)\"/gi, "");
                        html = html.replace(/ class=(mso\w+)/gi, "");

                        // remove ms word tags
                        html = html.replace(/<o:p(.*?)>([\w\W]*?)<\/o:p>/gi, '$2');

                        // ms word break lines
                        html = html.replace(/\n/g, ' ');

                        // ms word lists break lines
                        html = html.replace(/<p>\n?<li>/gi, '<li>');
                    }

                    return html;
                },
                onPasteExtra: function(html) {
                    // remove google docs markers
                    html = html.replace(/<b\sid="internal-source-marker(.*?)">([\w\W]*?)<\/b>/gi, "$2");
                    html = html.replace(/<b(.*?)id="docs-internal-guid(.*?)">([\w\W]*?)<\/b>/gi, "$3");

                    // google docs styles
                    html = html.replace(/<span[^>]*(font-style: italic; font-weight: bold|font-weight: bold; font-style: italic)[^>]*>/gi, '<span style="font-weight: bold;"><span style="font-style: italic;">');
                    html = html.replace(/<span[^>]*font-style: italic[^>]*>/gi, '<span style="font-style: italic;">');
                    html = html.replace(/<span[^>]*font-weight: bold[^>]*>/gi, '<span style="font-weight: bold;">');
                    html = html.replace(/<span[^>]*text-decoration: underline[^>]*>/gi, '<span style="text-decoration: underline;">');

                    html = html.replace(/<img>/gi, '');
                    html = html.replace(/\n{3,}/gi, '\n');
                    html = html.replace(/<font(.*?)>([\w\W]*?)<\/font>/gi, '$2');

                    // remove dirty p
                    html = html.replace(/<p><p>/gi, '<p>');
                    html = html.replace(/<\/p><\/p>/gi, '</p>');
                    html = html.replace(/<li>(\s*|\t*|\n*)<p>/gi, '<li>');
                    html = html.replace(/<\/p>(\s*|\t*|\n*)<\/li>/gi, '</li>');

                    // remove space between paragraphs
                    html = html.replace(/<\/p>\s<p/gi, '<\/p><p');

                    // remove safari local images
                    html = html.replace(/<img src="webkit-fake-url\:\/\/(.*?)"(.*?)>/gi, '');

                    // bullets
                    html = html.replace(/<p>•([\w\W]*?)<\/p>/gi, '<li>$1</li>');

                    // FF fix
                    if (this.utils.browser('mozilla')) {
                        html = html.replace(/<br\s?\/?>$/gi, '');
                    }

                    return html;
                },
                onPasteTidy: function(html, type) {
                    // remove all tags except these
                    var tags = ['span', 'a', 'pre', 'blockquote', 'small', 'em', 'strong', 'code', 'kbd', 'mark', 'address', 'cite', 'var', 'samp', 'dfn', 'sup', 'sub', 'b', 'i', 'u', 'del', 'ol', 'ul', 'li', 'dl', 'dt', 'dd', 'p', 'br', 'video', 'audio', 'iframe', 'embed', 'param', 'object', 'img', 'table', 'td', 'th', 'tr', 'tbody', 'tfoot', 'thead', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
                    var tagsEmpty = false;
                    var attrAllowed = [['a', '*'], ['img', ['src', 'alt']], ['span', ['class', 'rel', 'data-verified']], ['iframe', '*'], ['video', '*'], ['audio', '*'], ['embed', '*'], ['object', '*'], ['param', '*'], ['source', '*']];

                    if (type == 'all') {
                        tagsEmpty = ['p', 'span', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
                        attrAllowed = [['table', 'class'], ['td', ['colspan', 'rowspan']], ['a', '*'], ['img', ['src', 'alt', 'data-redactor-inserted-image']], ['span', ['class', 'rel', 'data-verified']], ['iframe', '*'], ['video', '*'], ['audio', '*'], ['embed', '*'], ['object', '*'], ['param', '*'], ['source', '*']];
                    } else if (type == 'td') {
                        // remove all tags except these and remove all table tags: tr, td etc
                        tags = ['ul', 'ol', 'li', 'span', 'a', 'small', 'em', 'strong', 'code', 'kbd', 'mark', 'cite', 'var', 'samp', 'dfn', 'sup', 'sub', 'b', 'i', 'u', 'del', 'ol', 'ul', 'li', 'dl', 'dt', 'dd', 'br', 'iframe', 'video', 'audio', 'embed', 'param', 'object', 'img', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];

                    } else if (type == 'li') {
                        // only inline tags and ul, ol, li
                        tags = ['ul', 'ol', 'li', 'span', 'a', 'small', 'em', 'strong', 'code', 'kbd', 'mark', 'cite', 'var', 'samp', 'dfn', 'sup', 'sub', 'b', 'i', 'u', 'del', 'br', 'iframe', 'video', 'audio', 'embed', 'param', 'object', 'img'];
                    }

                    var options = {
                        deniedTags: (this.opts.deniedTags) ? this.opts.deniedTags : false,
                        allowedTags: (this.opts.allowedTags) ? this.opts.allowedTags : tags,
                        removeComments: true,
                        removePhp: true,
                        removeAttr: (this.opts.removeAttr) ? this.opts.removeAttr : false,
                        allowedAttr: (this.opts.allowedAttr) ? this.opts.allowedAttr : attrAllowed,
                        removeEmpty: tagsEmpty
                    };

                    return this.tidy.load(html, options);
                },
                onPasteRemoveEmpty: function(html) {
                    html = html.replace(/<(p|h[1-6])>(|\s|\n|\t|<br\s?\/?>)<\/(p|h[1-6])>/gi, '');

                    // remove br in the end
                    if (!this.opts.linebreaks)
                        html = html.replace(/<br>$/i, '');

                    return html;
                },
                onPasteRemoveSpans: function(html) {
                    html = html.replace(/<span>(.*?)<\/span>/gi, '$1');
                    html = html.replace(/<span[^>]*>\s|&nbsp;<\/span>/gi, ' ');

                    return html;
                },
                onPasteIeFixLinks: function(html) {
                    if (!this.utils.browser('msie'))
                        return html;

                    var tmp = $.trim(html);
                    if (tmp.search(/^<a(.*?)>(.*?)<\/a>$/i) === 0) {
                        html = html.replace(/^<a(.*?)>(.*?)<\/a>$/i, "$2");
                    }

                    return html;
                },
                isSingleLine: function(html, setMode) {
                    this.clean.singleLine = false;

                    if (!this.utils.isSelectAll() && typeof setMode == 'undefined') {
                        var blocks = this.opts.blockLevelElements.join('|').replace('P|', '').replace('DIV|', '');

                        var matchBlocks = html.match(new RegExp('</(' + blocks + ')>','gi'));
                        var matchContainers = html.match(/<\/(p|div)>/gi);

                        if (!matchBlocks && (matchContainers === null || (matchContainers && matchContainers.length <= 1))) {
                            var matchBR = html.match(/<br\s?\/?>/gi);
                            //var matchIMG = html.match(/<img(.*?[^>])>/gi);
                            if (!matchBR) {
                                this.clean.singleLine = true;
                                html = html.replace(/<\/?(p|div)(.*?)>/gi, '');
                            }
                        }
                    }

                    return html;
                },
                stripTags: function(input, allowed) {
                    allowed = (((allowed || '') + '').toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');
                    var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi;

                    return input.replace(tags, function($0, $1) {
                        return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                    });
                },
                savePreCode: function(html) {
                    html = this.clean.savePreFormatting(html);
                    html = this.clean.saveCodeFormatting(html);

                    html = this.clean.restoreSelectionMarker(html);

                    return html;
                },
                savePreFormatting: function(html) {
                    var pre = html.match(/<pre(.*?)>([\w\W]*?)<\/pre>/gi);

                    if (pre !== null) {
                        $.each(pre, $.proxy(function(i, s) {
                            var arr = s.match(/<pre(.*?)>([\w\W]*?)<\/pre>/i);

                            arr[2] = arr[2].replace(/<br\s?\/?>/g, '\n');
                            arr[2] = arr[2].replace(/&nbsp;/g, ' ');

                            if (this.opts.preSpaces) {
                                arr[2] = arr[2].replace(/\t/g, Array(this.opts.preSpaces + 1).join(' '));
                            }

                            arr[2] = this.clean.encodeEntities(arr[2]);

                            // $ fix
                            arr[2] = arr[2].replace(/\$/g, '&#36;');

                            html = html.replace(s, '<pre' + arr[1] + '>' + arr[2] + '</pre>');

                        }, this));
                    }

                    return html;
                },
                saveCodeFormatting: function(html) {
                    var code = html.match(/<code(.*?)>([\w\W]*?)<\/code>/gi);

                    if (code !== null) {
                        $.each(code, $.proxy(function(i, s) {
                            var arr = s.match(/<code(.*?)>([\w\W]*?)<\/code>/i);

                            arr[2] = arr[2].replace(/&nbsp;/g, ' ');
                            arr[2] = this.clean.encodeEntities(arr[2]);
                            arr[2] = arr[2].replace(/\$/g, '&#36;');

                            html = html.replace(s, '<code' + arr[1] + '>' + arr[2] + '</code>');
                        }, this));
                    }

                    return html;
                },
                restoreSelectionMarker: function(html) {
                    html = html.replace(/&lt;span id=&quot;selection-marker-([0-9])&quot; class=&quot;redactor-selection-marker&quot; data-verified=&quot;redactor&quot;&gt;​&lt;\/span&gt;/g, '<span id="selection-marker-$1" class="redactor-selection-marker" data-verified="redactor">​</span>');

                    return html;
                },
                getTextFromHtml: function(html) {
                    html = html.replace(/<br\s?\/?>|<\/H[1-6]>|<\/p>|<\/div>|<\/li>|<\/td>/gi, '\n');

                    var tmp = document.createElement('div');
                    tmp.innerHTML = html;
                    html = tmp.textContent || tmp.innerText;

                    return $.trim(html);
                },
                getPlainText: function(html, paragraphize) {
                    html = this.clean.getTextFromHtml(html);
                    html = html.replace(/\n/g, '<br />');

                    if (this.opts.paragraphize && typeof paragraphize == 'undefined' && !this.utils.browser('mozilla')) {
                        html = this.paragraphize.load(html);
                    }

                    return html;
                },
                getPreCode: function(html) {
                    html = html.replace(/<img(.*?) style="(.*?)"(.*?[^>])>/gi, '<img$1$3>');
                    html = html.replace(/<img(.*?)>/gi, '&lt;img$1&gt;');
                    html = this.clean.getTextFromHtml(html);

                    if (this.opts.preSpaces) {
                        html = html.replace(/\t/g, Array(this.opts.preSpaces + 1).join(' '));
                    }

                    html = this.clean.encodeEntities(html);

                    return html;
                },
                getOnlyImages: function(html) {
                    html = html.replace(/<img(.*?)>/gi, '[img$1]');

                    // remove all tags
                    html = html.replace(/<([Ss]*?)>/gi, '');

                    html = html.replace(/\[img(.*?)\]/gi, '<img$1>');

                    return html;
                },
                getOnlyLinksAndImages: function(html) {
                    html = html.replace(/<a(.*?)href="(.*?)"(.*?)>([\w\W]*?)<\/a>/gi, '[a href="$2"]$4[/a]');
                    html = html.replace(/<img(.*?)>/gi, '[img$1]');

                    // remove all tags
                    html = html.replace(/<(.*?)>/gi, '');

                    html = html.replace(/\[a href="(.*?)"\]([\w\W]*?)\[\/a\]/gi, '<a href="$1">$2</a>');
                    html = html.replace(/\[img(.*?)\]/gi, '<img$1>');

                    return html;
                },
                encodeEntities: function(str) {
                    str = String(str).replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"');
                    return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
                },
                removeDirtyStyles: function(html) {
                    if (this.utils.browser('msie'))
                        return html;

                    var div = document.createElement('div');
                    div.innerHTML = html;

                    this.clean.clearUnverifiedRemove($(div));

                    html = div.innerHTML;
                    $(div).remove();

                    return html;
                },
                clearUnverified: function() {
                    if (this.utils.browser('msie'))
                        return;

                    this.clean.clearUnverifiedRemove(this.$editor);

                    var headers = this.$editor.find('h1, h2, h3, h4, h5, h6');
                    headers.find('span').removeAttr('style');
                    headers.find(this.opts.verifiedTags.join(', ')).removeAttr('style');

                    this.code.sync();
                },
                clearUnverifiedRemove: function($editor) {
                    // VWO Hack: Prevent Headache, Keeps the formatting intact of span elements
                    // $editor.find(this.opts.verifiedTags.join(', ')).removeAttr('style');
                    // $editor.find('span').not('[data-verified="redactor"]').removeAttr('style');

                    $editor.find('span[data-verified="redactor"], img[data-verified="redactor"]').each(function(i, s) {
                        var $s = $(s);
                        $s.attr('style', $s.attr('rel'));
                    });

                },
                cleanEmptyParagraph: function() {
                },
                setVerified: function(html) {
                    if (this.utils.browser('msie'))
                        return html;

                    html = html.replace(new RegExp('<img(.*?[^>])>','gi'), '<img$1 data-verified="redactor">');
                    html = html.replace(new RegExp('<span(.*?[^>])>','gi'), '<span$1 data-verified="redactor">');

                    var matches = html.match(new RegExp('<(span|img)(.*?)style="(.*?)"(.*?[^>])>','gi'));

                    if (matches) {
                        var len = matches.length;
                        for (var i = 0; i < len; i++) {
                            try {

                                var newTag = matches[i].replace(/style="(.*?)"/i, 'style="$1" rel="$1"');
                                html = html.replace(matches[i], newTag);

                            } catch (e) {}
                        }
                    }

                    return html;
                },
                convertInline: function(html) {
                    var $div = $('<div />').html(html);

                    var tags = this.opts.inlineTags;
                    tags.push('span');

                    $div.find(tags.join(',')).each(function() {
                        var $el = $(this);
                        var tag = this.tagName.toLowerCase();
                        $el.attr('data-redactor-tag', tag);

                        if (tag == 'span') {
                            if ($el.attr('style'))
                                $el.attr('data-redactor-style', $el.attr('style'));
                            else if ($el.attr('class'))
                                $el.attr('data-redactor-class', $el.attr('class'));
                        }

                    });

                    html = $div.html();
                    $div.remove();

                    return html;
                },
                normalizeLists: function() {
                    this.$editor.find('li').each(function(i, s) {
                        var $next = $(s).next();
                        if ($next.length !== 0 && ($next[0].tagName == 'UL' || $next[0].tagName == 'OL')) {
                            $(s).append($next);
                        }

                    });
                },
                removeSpaces: function(html) {
                    html = html.replace(/\n/g, '');
                    html = html.replace(/[\t]*/g, '');
                    html = html.replace(/\n\s*\n/g, "\n");
                    html = html.replace(/^[\s\n]*/g, ' ');
                    html = html.replace(/[\s\n]*$/g, ' ');
                    html = html.replace(/>\s{2,}</g, '> <');
                    // between inline tags can be only one space
                    html = html.replace(/\n\n/g, "\n");
                    html = html.replace(/\u200B/g, '');

                    return html;
                },
                replaceDivs: function(html) {
                    if (this.opts.linebreaks) {
                        html = html.replace(/<div><br\s?\/?><\/div>/gi, '<br />');
                        html = html.replace(/<div(.*?)>([\w\W]*?)<\/div>/gi, '$2<br />');
                    } else {
                        html = html.replace(/<div(.*?)>([\w\W]*?)<\/div>/gi, '<p$1>$2</p>');
                    }

                    html = html.replace(/<div(.*?[^>])>/gi, '');
                    html = html.replace(/<\/div>/gi, '');

                    return html;
                },
                replaceDivsToBr: function(html) {
                    html = html.replace(/<div\s(.*?)>/gi, '<p>');
                    html = html.replace(/<div><br\s?\/?><\/div>/gi, '<br /><br />');
                    html = html.replace(/<div>([\w\W]*?)<\/div>/gi, '$1<br /><br />');

                    return html;
                },
                replaceParagraphsToBr: function(html) {
                    html = html.replace(/<p\s(.*?)>/gi, '<p>');
                    html = html.replace(/<p><br\s?\/?><\/p>/gi, '<br />');
                    html = html.replace(/<p>([\w\W]*?)<\/p>/gi, '$1<br /><br />');
                    html = html.replace(/(<br\s?\/?>){1,}\n?<\/blockquote>/gi, '</blockquote>');

                    return html;
                },
                saveFormTags: function(html) {
                    return html.replace(/<form(.*?)>([\w\W]*?)<\/form>/gi, '<section$1 rel="redactor-form-tag">$2</section>');
                },
                restoreFormTags: function(html) {
                    return html.replace(/<section(.*?) rel="redactor-form-tag"(.*?)>([\w\W]*?)<\/section>/gi, '<form$1$2>$3</form>');
                }
            };
        },
        code: function() {
            return {
                set: function(html) {
                    html = $.trim(html.toString());

                    // clean
                    html = this.clean.onSet(html);

                    if (this.utils.browser('msie')) {
                        html = html.replace(/<span(.*?)id="selection-marker-(1|2)"(.*?)><\/span>/gi, '');
                    }

                    this.$editor.html(html);
                    this.code.sync();

                    if (html !== '')
                        this.placeholder.remove();

                    setTimeout($.proxy(this.buffer.add, this), 15);
                    if (this.start === false)
                        this.observe.load();

                },
                get: function() {
                    var code = this.$textarea.val();

                    if (this.opts.replaceDivs)
                        code = this.clean.replaceDivs(code);
                    if (this.opts.linebreaks)
                        code = this.clean.replaceParagraphsToBr(code);

                    // indent code
                    code = this.tabifier.get(code);

                    return code;
                },
                sync: function() {
                    setTimeout($.proxy(this.code.startSync, this), 10);
                },
                startSync: function() {
                    var html = this.$editor.html();

                    // is there a need to synchronize
                    if (this.code.syncCode && this.code.syncCode == html) {
                        // do not sync
                        return;
                    }

                    // save code
                    this.code.syncCode = html;

                    // before clean callback
                    html = this.core.setCallback('syncBefore', html);

                    // clean
                    html = this.clean.onSync(html);

                    // set code
                    this.$textarea.val(html);

                    // after sync callback
                    this.core.setCallback('sync', html);

                    if (this.start === false) {
                        this.core.setCallback('change', html);
                    }

                    this.start = false;

                    if (this.autosave.html == false) {
                        this.autosave.html = this.code.get();
                    }

                    if (this.opts.codemirror) {
                        this.$textarea.next('.CodeMirror').each(function(i, el) {
                            el.CodeMirror.setValue(html);
                        });
                    }

                    //autosave
                    this.autosave.onChange();
                    this.autosave.enable();
                },
                toggle: function() {
                    if (this.opts.visual) {
                        this.code.showCode();
                    } else {
                        this.code.showVisual();
                    }
                },
                showCode: function() {
                    this.selection.save();

                    this.code.offset = this.caret.getOffset();
                    var scroll = $(window).scrollTop();

                    var width = this.$editor.innerWidth()
                      , height = this.$editor.innerHeight();

                    this.$editor.hide();

                    var html = this.$textarea.val();

                    this.modified = this.clean.removeSpaces(html);

                    // indent code
                    html = this.tabifier.get(html);

                    // caret position sync
                    var start = 0
                      , end = 0;
                    var $editorDiv = $("<div/>").append($.parseHTML(this.clean.onSync(this.$editor.html()), document, true));
                    var $selectionMarkers = $editorDiv.find("span.redactor-selection-marker");

                    if ($selectionMarkers.length > 0) {
                        var editorHtml = this.tabifier.get($editorDiv.html()).replace(/&amp;/g, '&');

                        if ($selectionMarkers.length == 1) {
                            start = this.utils.strpos(editorHtml, $editorDiv.find("#selection-marker-1").prop("outerHTML"));
                            end = start;
                        } else if ($selectionMarkers.length == 2) {
                            start = this.utils.strpos(editorHtml, $editorDiv.find("#selection-marker-1").prop("outerHTML"));
                            end = this.utils.strpos(editorHtml, $editorDiv.find("#selection-marker-2").prop("outerHTML")) - $editorDiv.find("#selection-marker-1").prop("outerHTML").toString().length;
                        }
                    }

                    this.selection.removeMarkers();
                    this.$textarea.val(html);

                    if (this.opts.codemirror) {
                        this.$textarea.next('.CodeMirror').each(function(i, el) {
                            $(el).show();
                            el.CodeMirror.setValue(html);
                            el.CodeMirror.setSize('100%', height);
                            el.CodeMirror.refresh();

                            if (start == end) {
                                el.CodeMirror.setCursor(el.CodeMirror.posFromIndex(start).line, el.CodeMirror.posFromIndex(end).ch);
                            } else {
                                el.CodeMirror.setSelection({
                                    line: el.CodeMirror.posFromIndex(start).line,
                                    ch: el.CodeMirror.posFromIndex(start).ch
                                }, {
                                    line: el.CodeMirror.posFromIndex(end).line,
                                    ch: el.CodeMirror.posFromIndex(end).ch
                                });
                            }

                            el.CodeMirror.focus();
                        });
                    } else {
                        this.$textarea.height(height).show().focus();
                        this.$textarea.on('keydown.redactor-textarea-indenting', this.code.textareaIndenting);

                        $(window).scrollTop(scroll);

                        if (this.$textarea[0].setSelectionRange) {
                            this.$textarea[0].setSelectionRange(start, end);
                        }

                        this.$textarea[0].scrollTop = 0;
                    }

                    this.opts.visual = false;

                    this.button.setInactiveInCode();
                    this.button.setActive('html');
                    this.core.setCallback('source', html);
                },
                showVisual: function() {
                    var html;

                    if (this.opts.visual)
                        return;

                    var start = 0
                      , end = 0;

                    if (this.opts.codemirror) {
                        var selection;

                        this.$textarea.next('.CodeMirror').each(function(i, el) {
                            selection = el.CodeMirror.listSelections();

                            start = el.CodeMirror.indexFromPos(selection[0].anchor);
                            end = el.CodeMirror.indexFromPos(selection[0].head);

                            html = el.CodeMirror.getValue();
                        });
                    } else {
                        start = this.$textarea.get(0).selectionStart;
                        end = this.$textarea.get(0).selectionEnd;

                        html = this.$textarea.hide().val();
                    }

                    // if selection starts from end
                    if (start > end && end > 0) {
                        var tempStart = end;
                        var tempEnd = start;

                        start = tempStart;
                        end = tempEnd;
                    }

                    start = this.code.enlargeOffset(html, start);
                    end = this.code.enlargeOffset(html, end);

                    html = html.substr(0, start) + this.selection.getMarkerAsHtml(1) + html.substr(start);

                    if (end > start) {
                        var markerLength = this.selection.getMarkerAsHtml(1).toString().length;

                        html = html.substr(0, end + markerLength) + this.selection.getMarkerAsHtml(2) + html.substr(end + markerLength);
                    }

                    if (this.modified !== this.clean.removeSpaces(html)) {
                        this.code.set(html);

                    }

                    if (this.opts.codemirror) {
                        this.$textarea.next('.CodeMirror').hide();
                    }

                    this.$editor.show();

                    if (!this.utils.isEmpty(html)) {
                        this.placeholder.remove();
                    }

                    this.selection.restore();

                    this.$textarea.off('keydown.redactor-textarea-indenting');

                    this.button.setActiveInVisual();
                    this.button.setInactive('html');
                    this.observe.load();
                    this.opts.visual = true;
                    this.core.setCallback('visual', html);
                },
                textareaIndenting: function(e) {
                    if (e.keyCode !== 9)
                        return true;

                    var $el = this.$textarea;
                    var start = $el.get(0).selectionStart;
                    $el.val($el.val().substring(0, start) + "\t" + $el.val().substring($el.get(0).selectionEnd));
                    $el.get(0).selectionStart = $el.get(0).selectionEnd = start + 1;

                    return false;
                },
                enlargeOffset: function(html, offset) {
                    var htmlLength = html.length;
                    var c = 0;

                    if (html[offset] == '>') {
                        c++;
                    } else {
                        for (var i = offset; i <= htmlLength; i++) {
                            c++;

                            if (html[i] == '>') {
                                break;
                            } else if (html[i] == '<' || i == htmlLength) {
                                c = 0;
                                break;
                            }
                        }
                    }

                    return offset + c;
                }
            };
        },
        core: function() {
            return {
                getObject: function() {
                    return $.extend({}, this);
                },
                getEditor: function() {
                    return this.$editor;
                },
                getBox: function() {
                    return this.$box;
                },
                getElement: function() {
                    return this.$element;
                },
                getTextarea: function() {
                    return this.$textarea;
                },
                getToolbar: function() {
                    return (this.$toolbar) ? this.$toolbar : false;
                },
                addEvent: function(name) {
                    this.core.event = name;
                },
                getEvent: function() {
                    return this.core.event;
                },
                setCallback: function(type, e, data) {
                    var eventName = type + 'Callback';
                    var eventNamespace = 'redactor';
                    var callback = this.opts[eventName];

                    if (this.$textarea) {
                        var returnValue = false;
                        var events = $._data(this.$textarea[0], 'events');

                        if (typeof events != 'undefined' && typeof events[eventName] != 'undefined') {
                            $.each(events[eventName], $.proxy(function(key, value) {
                                if (value['namespace'] == eventNamespace) {
                                    var data = (typeof data == 'undefined') ? [e] : [e, data];

                                    returnValue = (typeof data == 'undefined') ? value.handler.call(this, e) : value.handler.call(this, e, data);
                                }
                            }, this));
                        }

                        if (returnValue)
                            return returnValue;
                    }

                    if ($.isFunction(callback)) {
                        return (typeof data == 'undefined') ? callback.call(this, e) : callback.call(this, e, data);
                    } else {
                        return (typeof data == 'undefined') ? e : data;
                    }
                },
                destroy: function() {
                    this.opts.destroyed = true;

                    this.core.setCallback('destroy');

                    // off events and remove data
                    this.$element.off('.redactor').removeData('redactor');
                    this.$editor.off('.redactor');

                    $(document).off('mousedown.redactor-blur.' + this.uuid);
                    $(document).off('mousedown.redactor.' + this.uuid);
                    $(document).off('click.redactor-image-delete.' + this.uuid);
                    $(document).off('click.redactor-image-resize-hide.' + this.uuid);
                    $(document).off('touchstart.redactor.' + this.uuid + ' click.redactor.' + this.uuid);
                    $("body").off('scroll.redactor.' + this.uuid);
                    $(this.opts.toolbarFixedTarget).off('scroll.redactor.' + this.uuid);

                    // common
                    this.$editor.removeClass('redactor-editor redactor-linebreaks redactor-placeholder');
                    this.$editor.removeAttr('contenteditable');

                    var html = this.code.get();

                    if (this.opts.toolbar) {
                        // dropdowns off
                        this.$toolbar.find('a').each(function() {
                            var $el = $(this);
                            if ($el.data('dropdown')) {
                                $el.data('dropdown').remove();
                                $el.data('dropdown', {});
                            }
                        });
                    }

                    if (this.build.isTextarea()) {
                        // vwo change
                        // this.$box.after(this.$editor);
                        // end vwo change
                        this.$box.remove();
                        this.$element.val(html).show();
                    } else {
                        // vwo change
                        // this.$box.after(this.$editor);
                        // end vwo change
                        this.$box.remove();
                        this.$element.html(html).show();
                    }

                    // paste box
                    if (this.$pasteBox)
                        this.$pasteBox.remove();

                    // modal
                    if (this.$modalBox)
                        this.$modalBox.remove();
                    if (this.$modalOverlay)
                        this.$modalOverlay.remove();

                    // buttons tooltip
                    $('.redactor-toolbar-tooltip-' + this.uuid).remove();

                    // autosave
                    clearInterval(this.autosaveInterval);
                }
            };
        },
        dropdown: function() {
            return {
                build: function(name, $dropdown, dropdownObject) {
                    if (name == 'formatting' && this.opts.formattingAdd) {
                        $.each(this.opts.formattingAdd, $.proxy(function(i, s) {
                            var name = s.tag, func;

                            if (typeof s['class'] != 'undefined') {
                                name = name + '-' + s['class'];
                            }

                            s.type = (this.utils.isBlockTag(s.tag)) ? 'block' : 'inline';

                            if (typeof s.func !== "undefined") {
                                func = s.func;
                            } else {
                                func = (s.type == 'inline') ? 'inline.formatting' : 'block.formatting';
                            }

                            if (this.opts.linebreaks && s.type == 'block' && s.tag == 'p')
                                return;

                            this.formatting[name] = {
                                tag: s.tag,
                                style: s.style,
                                'class': s['class'],
                                attr: s.attr,
                                data: s.data,
                                clear: s.clear
                            };

                            dropdownObject[name] = {
                                func: func,
                                title: s.title
                            };

                        }, this));
                    }

                    $.each(dropdownObject, $.proxy(function(btnName, btnObject) {
                        var $item = $('<a href="#" class="redactor-dropdown-' + btnName + '" role="button">' + btnObject.title + '</a>');
                        if (name == 'formatting')
                            $item.addClass('redactor-formatting-' + btnName);

                        $item.on('click', $.proxy(function(e) {
                            e.preventDefault();

                            var type = 'func';
                            var callback = btnObject.func;
                            if (btnObject.command) {
                                type = 'command';
                                callback = btnObject.command;
                            } else if (btnObject.dropdown) {
                                type = 'dropdown';
                                callback = btnObject.dropdown;
                            }

                            if ($(e.target).hasClass('redactor-dropdown-link-inactive'))
                                return;

                            this.button.onClick(e, btnName, type, callback);
                            this.dropdown.hideAll();

                        }, this));

                        this.observe.addDropdown($item, btnName, btnObject);

                        $dropdown.append($item);

                    }, this));
                },
                show: function(e, key) {
                    if (!this.opts.visual) {
                        e.preventDefault();
                        return false;
                    }

                    var $button = this.button.get(key);

                    // Always re-append it to the end of <body> so it always has the highest sub-z-index.
                    var $dropdown = $button.data('dropdown').appendTo(document.body);

                    if (this.opts.highContrast) {
                        $dropdown.addClass("redactor-dropdown-contrast");
                    }

                    if ($button.hasClass('dropact')) {
                        this.dropdown.hideAll();
                    } else {
                        this.dropdown.hideAll();
                        this.observe.dropdowns();

                        this.core.setCallback('dropdownShow', {
                            dropdown: $dropdown,
                            key: key,
                            button: $button
                        });

                        this.button.setActive(key);

                        $button.addClass('dropact');

                        var keyPosition = $button.offset();

                        // fix right placement
                        var dropdownWidth = $dropdown.width();
                        if ((keyPosition.left + dropdownWidth) > $(document).width()) {
                            keyPosition.left = Math.max(0, keyPosition.left - dropdownWidth);
                        }

                        var left = keyPosition.left + 'px';
                        if (this.$toolbar.hasClass('toolbar-fixed-box')) {
                            var top = this.$toolbar.innerHeight() + this.opts.toolbarFixedTopOffset;
                            var position = 'fixed';
                            if (this.opts.toolbarFixedTarget !== document) {
                                top = (this.$toolbar.innerHeight() + this.$toolbar.offset().top) + this.opts.toolbarFixedTopOffset;
                                position = 'absolute';
                            }

                            $dropdown.css({
                                position: position,
                                left: left,
                                top: top + 'px'
                            }).show();
                        } else {
                            var top = ($button.innerHeight() + keyPosition.top) + 'px';

                            $dropdown.css({
                                position: 'absolute',
                                left: left,
                                top: top
                            }).show();
                        }

                        this.core.setCallback('dropdownShown', {
                            dropdown: $dropdown,
                            key: key,
                            button: $button
                        });

                        this.$dropdown = $dropdown;
                    }

                    $(document).one('click.redactor-dropdown', $.proxy(this.dropdown.hide, this));
                    this.$editor.one('click.redactor-dropdown', $.proxy(this.dropdown.hide, this));
                    $(document).one('keyup.redactor-dropdown', $.proxy(this.dropdown.closeHandler, this));

                    // disable scroll whan dropdown scroll
                    $dropdown.on('mouseover.redactor-dropdown', $.proxy(this.utils.disableBodyScroll, this)).on('mouseout.redactor-dropdown', $.proxy(this.utils.enableBodyScroll, this));

                    e.stopPropagation();
                },
                closeHandler: function(e) {
                    if (e.which != this.keyCode.ESC)
                        return;

                    this.dropdown.hideAll();
                    this.$editor.focus();
                },
                hideAll: function() {
                    this.$toolbar.find('a.dropact').removeClass('redactor-act').removeClass('dropact');

                    this.utils.enableBodyScroll();

                    $('.redactor-dropdown-' + this.uuid).hide();
                    $('.redactor-dropdown-link-selected').removeClass('redactor-dropdown-link-selected');

                    if (this.$dropdown) {
                        this.$dropdown.off('.redactor-dropdown');
                        this.core.setCallback('dropdownHide', this.$dropdown);

                        this.$dropdown = false;
                    }
                },
                hide: function(e) {
                    var $dropdown = $(e.target);

                    if (!$dropdown.hasClass('dropact') && !$dropdown.hasClass('redactor-dropdown-link-inactive')) {
                        $dropdown.removeClass('dropact');
                        $dropdown.off('mouseover mouseout');

                        this.dropdown.hideAll();
                    }
                }
            };
        },
        file: function() {
            return {
                show: function() {
                    this.modal.load('file', this.lang.get('file'), 700);
                    this.upload.init('#redactor-modal-file-upload', this.opts.fileUpload, this.file.insert);

                    this.selection.save();

                    this.selection.get();
                    var text = this.sel.toString();

                    $('#redactor-filename').val(text);

                    this.modal.show();
                },
                insert: function(json, direct, e) {
                    // error callback
                    if (typeof json.error != 'undefined') {
                        this.modal.close();
                        this.selection.restore();
                        this.core.setCallback('fileUploadError', json);
                        return;
                    }

                    var link;
                    if (typeof json == 'string') {
                        link = json;
                    } else {
                        var text = $('#redactor-filename').val();
                        if (typeof text == 'undefined' || text === '')
                            text = json.filename;

                        link = '<a href="' + json.filelink + '" id="filelink-marker">' + text + '</a>';
                    }

                    if (direct) {
                        this.selection.removeMarkers();
                        var marker = this.selection.getMarker();
                        this.insert.nodeToCaretPositionFromPoint(e, marker);
                    } else {
                        this.modal.close();
                    }

                    this.selection.restore();
                    this.buffer.set();

                    this.insert.htmlWithoutClean(link);

                    if (typeof json == 'string')
                        return;

                    var linkmarker = $(this.$editor.find('a#filelink-marker'));
                    if (linkmarker.length !== 0) {
                        linkmarker.removeAttr('id').removeAttr('style');
                    } else
                        linkmarker = false;

                    this.core.setCallback('fileUpload', linkmarker, json);

                }
            };
        },
        focus: function() {
            return {
                setStart: function() {
                    this.$editor.focus();

                    var first = this.$editor.children().first();

                    if (first.length === 0)
                        return;
                    if (first[0].length === 0 || first[0].tagName == 'BR' || first[0].nodeType == 3) {
                        return;
                    }

                    if (first[0].tagName == 'UL' || first[0].tagName == 'OL') {
                        var child = first.find('li').first();
                        if (!this.utils.isBlock(child) && child.text() === '') {
                            // empty inline tag in li
                            this.caret.setStart(child);
                            return;
                        }
                    }

                    if (this.opts.linebreaks && !this.utils.isBlockTag(first[0].tagName)) {
                        this.selection.get();
                        this.range.setStart(this.$editor[0], 0);
                        this.range.setEnd(this.$editor[0], 0);
                        this.selection.addRange();

                        return;
                    }

                    // if node is tag
                    this.caret.setStart(first);
                },
                setEnd: function() {
                    var last = this.$editor.children().last();
                    this.$editor.focus();

                    if (last.size() === 0)
                        return;
                    if (this.utils.isEmpty(this.$editor.html())) {

                        this.selection.get();
                        this.range.collapse(true);
                        this.range.setStartAfter(last[0]);
                        this.range.setEnd(last[0], 0);
                        this.selection.addRange();
                    } else {
                        this.selection.get();
                        this.range.selectNodeContents(last[0]);
                        this.range.collapse(false);
                        this.selection.addRange();

                    }
                },
                isFocused: function() {
                    var focusNode = document.getSelection().focusNode;
                    if (focusNode === null)
                        return false;

                    if (this.opts.linebreaks && $(focusNode.parentNode).hasClass('redactor-linebreaks'))
                        return true;
                    else if (!this.utils.isRedactorParent(focusNode.parentNode))
                        return false;

                    return this.$editor.is(':focus');
                }
            };
        },
        image: function() {
            return {
                show: function() {
                    this.modal.load('image', this.lang.get('image'), 700);
                    this.upload.init('#redactor-modal-image-droparea', this.opts.imageUpload, this.image.insert);

                    this.selection.save();
                    this.modal.show();

                },
                showEdit: function($image) {
                    var $link = $image.closest('a', this.$editor[0]);

                    this.modal.load('imageEdit', this.lang.get('edit'), 705);

                    this.modal.createCancelButton();
                    this.image.buttonDelete = this.modal.createDeleteButton(this.lang.get('_delete'));
                    this.image.buttonSave = this.modal.createActionButton(this.lang.get('save'));

                    this.image.buttonDelete.on('click', $.proxy(function() {
                        this.image.remove($image);

                    }, this));

                    this.image.buttonSave.on('click', $.proxy(function() {
                        this.image.update($image);

                    }, this));

                    // hide link's tooltip
                    $('.redactor-link-tooltip').remove();

                    $('#redactor-image-title').val($image.attr('alt'));

                    if (!this.opts.imageLink)
                        $('.redactor-image-link-option').hide();
                    else {
                        var $redactorImageLink = $('#redactor-image-link');

                        $redactorImageLink.attr('href', $image.attr('src'));
                        if ($link.length !== 0) {
                            $redactorImageLink.val($link.attr('href'));
                            if ($link.attr('target') == '_blank')
                                $('#redactor-image-link-blank').prop('checked', true);
                        }
                    }

                    if (!this.opts.imagePosition)
                        $('.redactor-image-position-option').hide();
                    else {
                        var floatValue = ($image.css('display') == 'block' && $image.css('float') == 'none') ? 'center' : $image.css('float');
                        $('#redactor-image-align').val(floatValue);
                    }

                    this.modal.show();
                    $('#redactor-image-title').focus();

                },
                setFloating: function($image) {
                    var floating = $('#redactor-image-align').val();

                    var imageFloat = '';
                    var imageDisplay = '';
                    var imageMargin = '';

                    switch (floating) {
                    case 'left':
                        imageFloat = 'left';
                        imageMargin = '0 ' + this.opts.imageFloatMargin + ' ' + this.opts.imageFloatMargin + ' 0';
                        break;
                    case 'right':
                        imageFloat = 'right';
                        imageMargin = '0 0 ' + this.opts.imageFloatMargin + ' ' + this.opts.imageFloatMargin;
                        break;
                    case 'center':
                        imageDisplay = 'block';
                        imageMargin = 'auto';
                        break;
                    }

                    $image.css({
                        'float': imageFloat,
                        display: imageDisplay,
                        margin: imageMargin
                    });
                    $image.attr('rel', $image.attr('style'));
                },
                update: function($image) {
                    this.image.hideResize();
                    this.buffer.set();

                    var $link = $image.closest('a', this.$editor[0]);

                    var title = $('#redactor-image-title').val().replace(/(<([^>]+)>)/ig, "");
                    $image.attr('alt', title);

                    this.image.setFloating($image);

                    // as link
                    var link = $.trim($('#redactor-image-link').val());
                    var link = link.replace(/(<([^>]+)>)/ig, "");
                    if (link !== '') {
                        // test url (add protocol)
                        var pattern = '((xn--)?[a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}';
                        var re = new RegExp('^(http|ftp|https)://' + pattern,'i');
                        var re2 = new RegExp('^' + pattern,'i');

                        if (link.search(re) == -1 && link.search(re2) === 0 && this.opts.linkProtocol) {
                            link = this.opts.linkProtocol + '://' + link;
                        }

                        var target = ($('#redactor-image-link-blank').prop('checked')) ? true : false;

                        if ($link.length === 0) {
                            var a = $('<a href="' + link + '">' + this.utils.getOuterHtml($image) + '</a>');
                            if (target)
                                a.attr('target', '_blank');

                            $image.replaceWith(a);
                        } else {
                            $link.attr('href', link);
                            if (target) {
                                $link.attr('target', '_blank');
                            } else {
                                $link.removeAttr('target');
                            }
                        }
                    } else if ($link.length !== 0) {
                        $link.replaceWith(this.utils.getOuterHtml($image));

                    }

                    this.modal.close();
                    this.observe.images();
                    this.code.sync();

                },
                setEditable: function($image) {
                    if (this.opts.imageEditable) {
                        $image.on('dragstart', $.proxy(this.image.onDrag, this));
                    }

                    var handler = $.proxy(function(e) {

                        this.observe.image = $image;

                        this.image.resizer = this.image.loadEditableControls($image);

                        $(document).on('mousedown.redactor-image-resize-hide.' + this.uuid, $.proxy(this.image.hideResize, this));

                        // resize
                        if (!this.opts.imageResizable)
                            return;

                        this.image.resizer.on('mousedown.redactor touchstart.redactor', $.proxy(function(e) {
                            this.image.setResizable(e, $image);
                        }, this));

                    }, this);

                    $image.off('mousedown.redactor').on('mousedown.redactor', $.proxy(this.image.hideResize, this));
                    $image.off('click.redactor touchstart.redactor').on('click.redactor touchstart.redactor', handler);
                },
                setResizable: function(e, $image) {
                    e.preventDefault();

                    this.image.resizeHandle = {
                        x: e.pageX,
                        y: e.pageY,
                        el: $image,
                        ratio: $image.width() / $image.height(),
                        h: $image.height()
                    };

                    e = e.originalEvent || e;

                    if (e.targetTouches) {
                        this.image.resizeHandle.x = e.targetTouches[0].pageX;
                        this.image.resizeHandle.y = e.targetTouches[0].pageY;
                    }

                    this.image.startResize();

                },
                startResize: function() {
                    $(document).on('mousemove.redactor-image-resize touchmove.redactor-image-resize', $.proxy(this.image.moveResize, this));
                    $(document).on('mouseup.redactor-image-resize touchend.redactor-image-resize', $.proxy(this.image.stopResize, this));
                },
                moveResize: function(e) {
                    e.preventDefault();

                    e = e.originalEvent || e;

                    var height = this.image.resizeHandle.h;

                    if (e.targetTouches)
                        height += (e.targetTouches[0].pageY - this.image.resizeHandle.y);
                    else
                        height += (e.pageY - this.image.resizeHandle.y);

                    var width = Math.round(height * this.image.resizeHandle.ratio);

                    if (height < 50 || width < 100)
                        return;

                    var height = Math.round(this.image.resizeHandle.el.width() / this.image.resizeHandle.ratio);

                    this.image.resizeHandle.el.attr({
                        width: width,
                        height: height
                    });
                    this.image.resizeHandle.el.width(width);
                    this.image.resizeHandle.el.height(height);

                    this.code.sync();
                },
                stopResize: function() {
                    this.handle = false;
                    $(document).off('.redactor-image-resize');

                    this.image.hideResize();
                },
                onDrag: function(e) {
                    if (this.$editor.find('#redactor-image-box').length !== 0) {
                        e.preventDefault();
                        return false;
                    }

                    this.$editor.on('drop.redactor-image-inside-drop', $.proxy(function() {
                        setTimeout($.proxy(this.image.onDrop, this), 1);

                    }, this));
                },
                onDrop: function() {
                    this.image.fixImageSourceAfterDrop();
                    this.observe.images();
                    this.$editor.off('drop.redactor-image-inside-drop');
                    this.clean.clearUnverified();
                    this.code.sync();
                },
                fixImageSourceAfterDrop: function() {
                    this.$editor.find('img[data-save-url]').each(function() {
                        var $el = $(this);
                        $el.attr('src', $el.attr('data-save-url'));
                        $el.removeAttr('data-save-url');
                    });
                },
                hideResize: function(e) {
                    if (e && $(e.target).closest('#redactor-image-box', this.$editor[0]).length !== 0)
                        return;
                    if (e && e.target.tagName == 'IMG') {
                        var $image = $(e.target);
                        $image.attr('data-save-url', $image.attr('src'));
                    }

                    var imageBox = this.$editor.find('#redactor-image-box');
                    if (imageBox.length === 0)
                        return;

                    $('#redactor-image-editter').remove();
                    $('#redactor-image-resizer').remove();

                    imageBox.find('img').css({
                        marginTop: imageBox[0].style.marginTop,
                        marginBottom: imageBox[0].style.marginBottom,
                        marginLeft: imageBox[0].style.marginLeft,
                        marginRight: imageBox[0].style.marginRight
                    });

                    imageBox.css('margin', '');
                    imageBox.find('img').css('opacity', '');
                    imageBox.replaceWith(function() {
                        return $(this).contents();
                    });

                    $(document).off('mousedown.redactor-image-resize-hide.' + this.uuid);

                    if (typeof this.image.resizeHandle !== 'undefined') {
                        this.image.resizeHandle.el.attr('rel', this.image.resizeHandle.el.attr('style'));
                    }

                    this.code.sync();

                },
                loadResizableControls: function($image, imageBox) {
                    if (this.opts.imageResizable && !this.utils.isMobile()) {
                        var imageResizer = $('<span id="redactor-image-resizer" data-redactor="verified"></span>');

                        if (!this.utils.isDesktop()) {
                            imageResizer.css({
                                width: '15px',
                                height: '15px'
                            });
                        }

                        imageResizer.attr('contenteditable', false);
                        imageBox.append(imageResizer);
                        imageBox.append($image);

                        return imageResizer;
                    } else {
                        imageBox.append($image);
                        return false;
                    }
                },
                loadEditableControls: function($image) {
                    var imageBox = $('<span id="redactor-image-box" data-redactor="verified">');
                    imageBox.css('float', $image.css('float')).attr('contenteditable', false);

                    if ($image[0].style.margin != 'auto') {
                        imageBox.css({
                            marginTop: $image[0].style.marginTop,
                            marginBottom: $image[0].style.marginBottom,
                            marginLeft: $image[0].style.marginLeft,
                            marginRight: $image[0].style.marginRight
                        });

                        $image.css('margin', '');
                    } else {
                        imageBox.css({
                            'display': 'block',
                            'margin': 'auto'
                        });
                    }

                    // VWO Hack
                    this.$editor.find('img').removeClass('_vwo_inline_image');
                    $image.after(imageBox);
                    $image.addClass('_vwo_inline_image');

                    if (this.opts.imageEditable) {
                        // editter
                        this.image.editter = $('<span id="redactor-image-editter" data-redactor="verified">' + this.lang.get('edit') + '</span>');
                        this.image.editter.attr('contenteditable', false);
                        this.image.editter.on('click', $.proxy(function() {
                            this.image.showEdit($image);
                        }, this));

                        imageBox.append(this.image.editter);

                        // position correction
                        var editerWidth = this.image.editter.innerWidth();
                        this.image.editter.css('margin-left', '-' + editerWidth / 2 + 'px');
                    }

                    return this.image.loadResizableControls($image, imageBox);

                },
                remove: function(image) {
                    var $image = $(image);
                    var $link = $image.closest('a', this.$editor[0]);
                    var $figure = $image.closest('figure', this.$editor[0]);
                    var $parent = $image.parent();
                    if ($('#redactor-image-box').length !== 0) {
                        $parent = $('#redactor-image-box').parent();
                    }

                    var $next;
                    if ($figure.length !== 0) {
                        $next = $figure.next();
                        $figure.remove();
                    } else if ($link.length !== 0) {
                        $parent = $link.parent();
                        $link.remove();
                    } else {
                        $image.remove();
                    }

                    $('#redactor-image-box').remove();

                    if ($figure.length !== 0) {
                        this.caret.setStart($next);
                    } else {
                        this.caret.setStart($parent);
                    }

                    // delete callback
                    this.core.setCallback('imageDelete', $image[0].src, $image);

                    this.modal.close();
                    this.code.sync();
                },
                insert: function(json, direct, e) {
                    // error callback
                    if (typeof json.error != 'undefined') {
                        this.modal.close();
                        this.selection.restore();
                        this.core.setCallback('imageUploadError', json);
                        return;
                    }

                    var $img;
                    if (typeof json == 'string') {
                        $img = $(json).attr('data-redactor-inserted-image', 'true');
                    } else {
                        $img = $('<img>');
                        $img.attr('src', json.filelink).attr('data-redactor-inserted-image', 'true');
                    }

                    var node = $img;
                    var isP = this.utils.isCurrentOrParent('P');
                    if (isP) {
                        // will replace
                        node = $('<blockquote />').append($img);
                    }

                    if (direct) {
                        this.selection.removeMarkers();
                        var marker = this.selection.getMarker();
                        this.insert.nodeToCaretPositionFromPoint(e, marker);
                    } else {
                        this.modal.close();
                    }

                    this.selection.restore();
                    this.buffer.set();

                    this.insert.html(this.utils.getOuterHtml(node), false);

                    var $image = this.$editor.find('img[data-redactor-inserted-image=true]').removeAttr('data-redactor-inserted-image');

                    if (isP) {
                        $image.parent().contents().unwrap().wrap('<p />');
                    } else if (this.opts.linebreaks) {
                        if (!this.utils.isEmpty(this.code.get())) {
                            $image.before('<br>');
                        }

                        $image.after('<br>');
                    }

                    if (typeof json == 'string')
                        return;

                    this.core.setCallback('imageUpload', $image, json);

                }
            };
        },
        indent: function() {
            return {
                increase: function() {
                    // focus
                    if (!this.utils.browser('msie'))
                        this.$editor.focus();

                    this.buffer.set();
                    this.selection.save();

                    var block = this.selection.getBlock();

                    if (block && block.tagName == 'LI') {
                        this.indent.increaseLists();
                    } else if (block === false && this.opts.linebreaks) {
                        this.indent.increaseText();
                    } else {
                        this.indent.increaseBlocks();
                    }

                    this.selection.restore();
                    this.code.sync();
                },
                increaseLists: function() {
                    document.execCommand('indent');

                    this.indent.fixEmptyIndent();
                    this.clean.normalizeLists();
                    this.clean.clearUnverified();
                },
                increaseBlocks: function() {
                    $.each(this.selection.getBlocks(), $.proxy(function(i, elem) {
                        if (elem.tagName === 'TD' || elem.tagName === 'TH')
                            return;

                        var $el = this.utils.getAlignmentElement(elem);

                        var left = this.utils.normalize($el.css('margin-left')) + this.opts.indentValue;
                        $el.css('margin-left', left + 'px');

                    }, this));
                },
                increaseText: function() {
                    var wrapper = this.selection.wrap('div');
                    $(wrapper).attr('data-tagblock', 'redactor');
                    $(wrapper).css('margin-left', this.opts.indentValue + 'px');
                },
                decrease: function() {
                    this.buffer.set();
                    this.selection.save();

                    var block = this.selection.getBlock();
                    if (block && block.tagName == 'LI') {
                        this.indent.decreaseLists();
                    } else {
                        this.indent.decreaseBlocks();
                    }

                    this.selection.restore();
                    this.code.sync();
                },
                decreaseLists: function() {
                    document.execCommand('outdent');

                    var current = this.selection.getCurrent();
                    var $item = $(current).closest('li', this.$editor[0]);

                    this.indent.fixEmptyIndent();

                    if (!this.opts.linebreaks && $item.length === 0) {
                        document.execCommand('formatblock', false, 'p');
                        this.$editor.find('ul, ol, blockquote, p').each($.proxy(this.utils.removeEmpty, this));
                    }

                    this.clean.clearUnverified();
                },
                decreaseBlocks: function() {
                    $.each(this.selection.getBlocks(), $.proxy(function(i, elem) {
                        var $el = this.utils.getAlignmentElement(elem);
                        var left = this.utils.normalize($el.css('margin-left')) - this.opts.indentValue;

                        if (left <= 0) {
                            if (this.opts.linebreaks && typeof ($el.data('tagblock')) !== 'undefined') {
                                $el.replaceWith($el.html() + '<br />');
                            } else {
                                $el.css('margin-left', '');
                                this.utils.removeEmptyAttr($el, 'style');
                            }
                        } else {
                            $el.css('margin-left', left + 'px');
                        }

                    }, this));
                },
                fixEmptyIndent: function() {
                    var block = this.selection.getBlock();

                    if (this.range.collapsed && block && block.tagName == 'LI' && this.utils.isEmpty($(block).text())) {
                        var $block = $(block);
                        $block.find('span').not('.redactor-selection-marker').contents().unwrap();
                        $block.append('<br>');
                    }
                }
            };
        },
        inline: function() {
            return {
                formatting: function(name) {
                    var type, value;

                    if (typeof this.formatting[name].style != 'undefined')
                        type = 'style';
                    else if (typeof this.formatting[name]['class'] != 'undefined')
                        type = 'class';

                    if (type)
                        value = this.formatting[name][type];

                    this.inline.format(this.formatting[name].tag, type, value);

                },
                format: function(tag, type, value) {
                    var current = this.selection.getCurrent();
                    if (current && current.tagName === 'TR')
                        return;

                    // Stop formatting pre and headers
                    if (this.utils.isCurrentOrParent('PRE') || this.utils.isCurrentOrParentHeader())
                        return;

                    var tags = ['b', 'bold', 'i', 'italic', 'underline', 'strikethrough', 'deleted', 'superscript', 'subscript'];
                    var replaced = ['strong', 'strong', 'em', 'em', 'u', 'del', 'del', 'sup', 'sub'];

                    for (var i = 0; i < tags.length; i++) {
                        if (tag == tags[i])
                            tag = replaced[i];
                    }

                    if (this.opts.allowedTags) {
                        if ($.inArray(tag, this.opts.allowedTags) == -1)
                            return;
                    } else {
                        if ($.inArray(tag, this.opts.deniedTags) !== -1)
                            return;
                    }

                    this.inline.type = type || false;
                    this.inline.value = value || false;

                    this.buffer.set();

                    if (!this.utils.browser('msie') && !this.opts.linebreaks) {// VWO change
                    // this.$editor.focus();
                    // end VWO change
                    }

                    this.selection.get();

                    if (this.range.collapsed) {
                        this.inline.formatCollapsed(tag);
                    } else {
                        this.inline.formatMultiple(tag);
                    }
                },
                formatCollapsed: function(tag) {
                    var current = this.selection.getCurrent();
                    var $parent = $(current).closest(tag + '[data-redactor-tag=' + tag + ']', this.$editor[0]);

                    // inline there is
                    if ($parent.length !== 0 && (this.inline.type != 'style' && $parent[0].tagName != 'SPAN')) {
                        // remove empty
                        if (this.utils.isEmpty($parent.text())) {
                            this.caret.setAfter($parent[0]);

                            $parent.remove();
                            this.code.sync();
                        } else if (this.utils.isEndOfElement($parent)) {
                            this.caret.setAfter($parent[0]);
                        }

                        return;
                    }

                    // create empty inline
                    var node = $('<' + tag + '>').attr('data-verified', 'redactor').attr('data-redactor-tag', tag);
                    node.html(this.opts.invisibleSpace);

                    node = this.inline.setFormat(node);

                    var node = this.insert.node(node);
                    this.caret.setEnd(node);

                    this.code.sync();
                },
                formatMultiple: function(tag) {
                    this.inline.formatConvert(tag);

                    this.selection.save();
                    document.execCommand('strikethrough');

                    this.$editor.find('strike').each($.proxy(function(i, s) {
                        var $el = $(s);

                        this.inline.formatRemoveSameChildren($el, tag);

                        var $span;
                        if (this.inline.type) {
                            $span = $('<span>').attr('data-redactor-tag', tag).attr('data-verified', 'redactor');
                            $span = this.inline.setFormat($span);
                        } else {
                            $span = $('<' + tag + '>').attr('data-redactor-tag', tag).attr('data-verified', 'redactor');
                        }

                        $el.replaceWith($span.html($el.contents()));
                        var $parent = $span.parent();
                        // vwo change
                        if ($parent[0] === this.$editor[0] || $parent.contents().length > 1) {
                            $parent = undefined;
                        }
                        // end vwo change

                        // remove U tag if selected link + node
                        if ($span[0].tagName === 'A' && $parent && $parent[0].tagName === 'U') {
                            $span.parent().replaceWith($span);
                        }

                        if (tag == 'span') {
                            if ($parent && $parent[0].tagName === 'SPAN' && this.inline.type === 'style') {
                                var arr = this.inline.value.split(';');

                                for (var z = 0; z < arr.length; z++) {
                                    if (arr[z] === '')
                                        return;
                                    var style = arr[z].split(':');
                                    $parent.css(style[0], '');

                                    if (this.utils.removeEmptyAttr($parent, 'style')) {
                                        $parent.replaceWith($parent.contents());
                                    }

                                }

                            }
                        }

                    }, this));

                    // clear text decoration
                    if (tag != 'span') {
                        this.$editor.find(this.opts.inlineTags.join(', ')).each($.proxy(function(i, s) {
                            var $el = $(s);

                            if (s.tagName === 'U' && s.attributes.length === 0) {
                                $el.replaceWith($el.contents());
                                return;
                            }

                            var property = $el.css('text-decoration');
                            if (property === 'line-through') {
                                $el.css('text-decoration', '');
                                this.utils.removeEmptyAttr($el, 'style');
                            }
                        }, this));
                    }

                    if (tag != 'del') {
                        var _this = this;
                        this.$editor.find('inline').each(function(i, s) {
                            _this.utils.replaceToTag(s, 'del');
                        });
                    }

                    this.selection.restore();
                    this.code.sync();

                },
                formatRemoveSameChildren: function($el, tag) {
                    var self = this;
                    $el.children(tag).each(function() {
                        var $child = $(this);

                        if (!$child.hasClass('redactor-selection-marker')) {
                            if (self.inline.type == 'style') {
                                var arr = self.inline.value.split(';');

                                for (var z = 0; z < arr.length; z++) {
                                    if (arr[z] === '')
                                        return;

                                    var style = arr[z].split(':');
                                    $child.css(style[0], '');

                                    if (self.utils.removeEmptyAttr($child, 'style')) {
                                        $child.replaceWith($child.contents());
                                    }

                                }
                            } else {
                                $child.contents().unwrap();
                            }
                        }

                    });
                },
                formatConvert: function(tag) {
                    this.selection.save();

                    var find = '';
                    if (this.inline.type == 'class')
                        find = '[data-redactor-class=' + this.inline.value + ']';
                    else if (this.inline.type == 'style') {
                        find = '[data-redactor-style="' + this.inline.value + '"]';
                    }

                    var self = this;
                    if (tag != 'del') {
                        this.$editor.find('del').each(function(i, s) {
                            self.utils.replaceToTag(s, 'inline');
                        });
                    }

                    if (tag != 'span') {
                        this.$editor.find(tag).each(function() {
                            var $el = $(this);
                            $el.replaceWith($('<strike />').html($el.contents()));

                        });
                    }

                    this.$editor.find('[data-redactor-tag="' + tag + '"]' + find).each(function() {
                        if (find === '' && tag == 'span' && this.tagName.toLowerCase() == tag)
                            return;

                        var $el = $(this);
                        $el.replaceWith($('<strike />').html($el.contents()));

                    });

                    this.selection.restore();
                },
                setFormat: function(node) {
                    switch (this.inline.type) {
                    case 'class':

                        if (node.hasClass(this.inline.value)) {
                            node.removeClass(this.inline.value);
                            node.removeAttr('data-redactor-class');
                        } else {
                            node.addClass(this.inline.value);
                            node.attr('data-redactor-class', this.inline.value);
                        }

                        break;
                    case 'style':

                        node[0].style.cssText = this.inline.value;
                        node.attr('data-redactor-style', this.inline.value);

                        break;
                    }

                    return node;
                },
                removeStyle: function() {
                    this.buffer.set();
                    var current = this.selection.getCurrent();
                    var nodes = this.selection.getInlines();

                    this.selection.save();

                    if (current && current.tagName === 'SPAN') {
                        var $s = $(current);

                        $s.removeAttr('style');
                        if ($s[0].attributes.length === 0) {
                            $s.replaceWith($s.contents());
                        }
                    }

                    $.each(nodes, $.proxy(function(i, s) {
                        var $s = $(s);
                        if ($.inArray(s.tagName.toLowerCase(), this.opts.inlineTags) != -1 && !$s.hasClass('redactor-selection-marker')) {
                            $s.removeAttr('style');
                            if ($s[0].attributes.length === 0) {
                                $s.replaceWith($s.contents());
                            }
                        }
                    }, this));

                    this.selection.restore();
                    this.code.sync();

                },
                removeStyleRule: function(name) {
                    this.buffer.set();
                    var parent = this.selection.getParent();
                    var nodes = this.selection.getInlines();

                    this.selection.save();

                    if (parent && parent.tagName === 'SPAN') {
                        var $s = $(parent);

                        $s.css(name, '');
                        this.utils.removeEmptyAttr($s, 'style');
                        if ($s[0].attributes.length === 0) {
                            $s.replaceWith($s.contents());
                        }
                    }

                    $.each(nodes, $.proxy(function(i, s) {
                        var $s = $(s);
                        if ($.inArray(s.tagName.toLowerCase(), this.opts.inlineTags) != -1 && !$s.hasClass('redactor-selection-marker')) {
                            $s.css(name, '');
                            this.utils.removeEmptyAttr($s, 'style');
                            if ($s[0].attributes.length === 0) {
                                $s.replaceWith($s.contents());
                            }
                        }
                    }, this));

                    this.selection.restore();
                    this.code.sync();
                },
                removeFormat: function() {
                    this.buffer.set();
                    var current = this.selection.getCurrent();

                    this.selection.save();

                    document.execCommand('removeFormat');

                    if (current && current.tagName === 'SPAN') {
                        $(current).replaceWith($(current).contents());
                    }

                    $.each(this.selection.getNodes(), $.proxy(function(i, s) {
                        var $s = $(s);
                        if ($.inArray(s.tagName.toLowerCase(), this.opts.inlineTags) != -1 && !$s.hasClass('redactor-selection-marker')) {
                            $s.replaceWith($s.contents());
                        }
                    }, this));

                    this.selection.restore();
                    this.code.sync();

                },
                toggleClass: function(className) {
                    this.inline.format('span', 'class', className);
                },
                toggleStyle: function(value) {
                    this.inline.format('span', 'style', value);
                }
            };
        },
        insert: function() {
            return {
                set: function(html, clean) {
                    this.placeholder.remove();

                    html = this.clean.setVerified(html);

                    if (typeof clean == 'undefined') {
                        html = this.clean.onPaste(html, false);
                    }

                    this.$editor.html(html);
                    this.selection.remove();
                    this.focus.setEnd();
                    this.clean.normalizeLists();
                    this.code.sync();
                    this.observe.load();

                    if (typeof clean == 'undefined') {
                        setTimeout($.proxy(this.clean.clearUnverified, this), 10);
                    }
                },
                text: function(text) {
                    this.placeholder.remove();

                    text = text.toString();
                    text = $.trim(text);
                    text = this.clean.getPlainText(text, false);

                    this.$editor.focus();

                    if (this.utils.browser('msie')) {
                        this.insert.htmlIe(text);
                    } else {
                        this.selection.get();

                        this.range.deleteContents();
                        var el = document.createElement("div");
                        el.innerHTML = text;
                        var frag = document.createDocumentFragment(), node, lastNode;
                        while ((node = el.firstChild)) {
                            lastNode = frag.appendChild(node);
                        }

                        this.range.insertNode(frag);

                        if (lastNode) {
                            var range = this.range.cloneRange();
                            range.setStartAfter(lastNode);
                            range.collapse(true);
                            this.sel.removeAllRanges();
                            this.sel.addRange(range);
                        }
                    }

                    this.code.sync();
                    this.clean.clearUnverified();
                },
                htmlWithoutClean: function(html) {
                    this.insert.html(html, false);
                },
                html: function(html, clean) {
                    this.placeholder.remove();

                    if (typeof clean == 'undefined')
                        clean = true;

                    if (!this.opts.linebreaks) {
                        this.$editor.focus();
                    }

                    html = this.clean.setVerified(html);

                    if (clean) {
                        html = this.clean.onPaste(html);
                    }

                    if (this.utils.browser('msie')) {
                        this.insert.htmlIe(html);
                    } else {
                        if (this.clean.singleLine)
                            this.insert.execHtml(html);
                        else
                            document.execCommand('insertHTML', false, html);

                        this.insert.htmlFixMozilla();

                    }

                    this.clean.normalizeLists();

                    // remove empty paragraphs finaly
                    if (!this.opts.linebreaks) {
                        this.$editor.find('p').each($.proxy(this.utils.removeEmpty, this));
                    }

                    this.code.sync();
                    this.observe.load();

                    if (clean) {
                        this.clean.clearUnverified();
                    }

                },
                htmlFixMozilla: function() {
                    // FF inserts empty p when content was selected dblclick
                    if (!this.utils.browser('mozilla'))
                        return;

                    var $next = $(this.selection.getBlock()).next();
                    if ($next.length > 0 && $next[0].tagName == 'P' && $next.html() === '') {
                        $next.remove();
                    }

                },
                htmlIe: function(html) {
                    if (this.utils.isIe11()) {
                        var parent = this.utils.isCurrentOrParent('P');
                        var $html = $('<div>').append(html);
                        var blocksMatch = $html.contents().is('p, :header, dl, ul, ol, div, table, td, blockquote, pre, address, section, header, footer, aside, article');

                        if (parent && blocksMatch)
                            this.insert.ie11FixInserting(parent, html);
                        else
                            this.insert.ie11PasteFrag(html);

                        return;
                    }

                    document.selection.createRange().pasteHTML(html);

                },
                execHtml: function(html) {
                    html = this.clean.setVerified(html);

                    this.selection.get();

                    this.range.deleteContents();

                    var el = document.createElement('div');
                    el.innerHTML = html;

                    var frag = document.createDocumentFragment(), node, lastNode;
                    while ((node = el.firstChild)) {
                        lastNode = frag.appendChild(node);
                    }

                    this.range.insertNode(frag);

                    this.range.collapse(true);
                    this.caret.setAfter(lastNode);

                },
                node: function(node, deleteContents) {
                    node = node[0] || node;

                    var html = this.utils.getOuterHtml(node);
                    html = this.clean.setVerified(html);

                    if (html.match(/</g) !== null) {
                        node = $(html)[0];
                    }

                    this.selection.get();

                    if (deleteContents !== false) {
                        this.range.deleteContents();
                    }

                    this.range.insertNode(node);
                    this.range.collapse(false);
                    this.selection.addRange();

                    return node;
                },
                nodeToPoint: function(node, x, y) {
                    node = node[0] || node;

                    this.selection.get();

                    var range;
                    if (document.caretPositionFromPoint) {
                        var pos = document.caretPositionFromPoint(x, y);

                        this.range.setStart(pos.offsetNode, pos.offset);
                        this.range.collapse(true);
                        this.range.insertNode(node);
                    } else if (document.caretRangeFromPoint) {
                        range = document.caretRangeFromPoint(x, y);
                        range.insertNode(node);
                    } else if (typeof document.body.createTextRange != "undefined") {
                        range = document.body.createTextRange();
                        range.moveToPoint(x, y);
                        var endRange = range.duplicate();
                        endRange.moveToPoint(x, y);
                        range.setEndPoint("EndToEnd", endRange);
                        range.select();
                    }
                },
                nodeToCaretPositionFromPoint: function(e, node) {
                    node = node[0] || node;

                    var range;
                    var x = e.clientX
                      , y = e.clientY;
                    if (document.caretPositionFromPoint) {
                        var pos = document.caretPositionFromPoint(x, y);
                        var sel = document.getSelection();
                        range = sel.getRangeAt(0);
                        range.setStart(pos.offsetNode, pos.offset);
                        range.collapse(true);
                        range.insertNode(node);
                    } else if (document.caretRangeFromPoint) {
                        range = document.caretRangeFromPoint(x, y);
                        range.insertNode(node);
                    } else if (typeof document.body.createTextRange != "undefined") {
                        range = document.body.createTextRange();
                        range.moveToPoint(x, y);
                        var endRange = range.duplicate();
                        endRange.moveToPoint(x, y);
                        range.setEndPoint("EndToEnd", endRange);
                        range.select();
                    }

                },
                ie11FixInserting: function(parent, html) {
                    var node = document.createElement('span');
                    node.className = 'redactor-ie-paste';
                    this.insert.node(node);

                    var parHtml = $(parent).html();

                    parHtml = '<p>' + parHtml.replace(/<span class="redactor-ie-paste"><\/span>/gi, '</p>' + html + '<p>') + '</p>';
                    parHtml = parHtml.replace(/<p><\/p>/gi, '');
                    $(parent).replaceWith(parHtml);
                },
                ie11PasteFrag: function(html) {
                    this.selection.get();
                    this.range.deleteContents();

                    var el = document.createElement("div");
                    el.innerHTML = html;

                    var frag = document.createDocumentFragment(), node, lastNode;
                    while ((node = el.firstChild)) {
                        lastNode = frag.appendChild(node);
                    }

                    this.range.insertNode(frag);
                    this.range.collapse(false);
                    this.selection.addRange();
                }
            };
        },
        keydown: function() {
            return {
                init: function(e) {
                    if (this.rtePaste)
                        return;

                    var key = e.which;
                    var arrow = (key >= 37 && key <= 40);

                    this.keydown.ctrl = e.ctrlKey || e.metaKey;
                    this.keydown.current = this.selection.getCurrent();
                    this.keydown.parent = this.selection.getParent();
                    this.keydown.block = this.selection.getBlock();

                    // detect tags
                    this.keydown.pre = this.utils.isTag(this.keydown.current, 'pre');
                    this.keydown.blockquote = this.utils.isTag(this.keydown.current, 'blockquote');
                    this.keydown.figcaption = this.utils.isTag(this.keydown.current, 'figcaption');

                    // shortcuts setup
                    this.shortcuts.init(e, key);

                    if (this.utils.isDesktop()) {
                        this.keydown.checkEvents(arrow, key);
                        this.keydown.setupBuffer(e, key);
                    }

                    this.keydown.addArrowsEvent(arrow);
                    this.keydown.setupSelectAll(e, key);

                    // callback
                    var keydownStop = this.core.setCallback('keydown', e);
                    if (keydownStop === false) {
                        e.preventDefault();
                        return false;
                    }

                    // ie and ff exit from table
                    if (this.opts.enterKey && (this.utils.browser('msie') || this.utils.browser('mozilla')) && (key === this.keyCode.DOWN || key === this.keyCode.RIGHT)) {
                        var isEndOfTable = false;
                        var $table = false;
                        if (this.keydown.block && this.keydown.block.tagName === 'TD') {
                            $table = $(this.keydown.block).closest('table', this.$editor[0]);
                        }

                        if ($table && $table.find('td').last()[0] === this.keydown.block) {
                            isEndOfTable = true;
                        }

                        if (this.utils.isEndOfElement() && isEndOfTable) {
                            var node = $(this.opts.emptyHtml);
                            $table.after(node);
                            this.caret.setStart(node);
                        }
                    }

                    // down
                    if (this.opts.enterKey && key === this.keyCode.DOWN) {
                        this.keydown.onArrowDown();
                    }

                    // turn off enter key
                    if (!this.opts.enterKey && key === this.keyCode.ENTER) {
                        e.preventDefault();
                        // remove selected
                        if (!this.range.collapsed)
                            this.range.deleteContents();
                        return;
                    }

                    // on enter
                    if (key == this.keyCode.ENTER && !e.shiftKey && !e.ctrlKey && !e.metaKey) {
                        var stop = this.core.setCallback('enter', e);
                        if (stop === false) {
                            e.preventDefault();
                            return false;
                        }

                        if (this.keydown.blockquote && this.keydown.exitFromBlockquote(e) === true) {
                            return false;
                        }

                        var current, $next;
                        if (this.keydown.pre) {
                            return this.keydown.insertNewLine(e);
                        } else if (this.keydown.blockquote || this.keydown.figcaption) {
                            current = this.selection.getCurrent();
                            $next = $(current).next();

                            if ($next.length !== 0 && $next[0].tagName == 'BR') {
                                return this.keydown.insertBreakLine(e);
                            } else if (this.utils.isEndOfElement() && (current && current != 'SPAN')) {
                                return this.keydown.insertDblBreakLine(e);
                            } else {
                                return this.keydown.insertBreakLine(e);
                            }
                        } else if (this.opts.linebreaks && !this.keydown.block) {
                            current = this.selection.getCurrent();
                            $next = $(this.keydown.current).next();

                            if ($next.length !== 0 && $next[0].tagName == 'BR') {
                                return this.keydown.insertBreakLine(e);
                            } else if (current !== false && $(current).hasClass('redactor-invisible-space')) {
                                this.caret.setAfter(current);
                                $(current).contents().unwrap();

                                return this.keydown.insertDblBreakLine(e);
                            } else {
                                if (this.utils.isEndOfEditor()) {
                                    return this.keydown.insertDblBreakLine(e);
                                } else if ($next.length === 0 && current === false && typeof $next.context != 'undefined') {
                                    return this.keydown.insertBreakLine(e);
                                }

                                return this.keydown.insertBreakLine(e);
                            }

                        } else if (this.opts.linebreaks && this.keydown.block) {
                            setTimeout($.proxy(this.keydown.replaceDivToBreakLine, this), 1);
                        }// paragraphs
                        else if (!this.opts.linebreaks && this.keydown.block) {
                            setTimeout($.proxy(this.keydown.replaceDivToParagraph, this), 1);

                            if (this.keydown.block.tagName === 'LI') {
                                current = this.selection.getCurrent();
                                var $parent = $(current).closest('li', this.$editor[0]);
                                var $list = $parent.closest('ul,ol', this.$editor[0]);

                                if ($parent.length !== 0 && this.utils.isEmpty($parent.html()) && $list.next().length === 0 && this.utils.isEmpty($list.find("li").last().html())) {
                                    $list.find("li").last().remove();

                                    var node = $(this.opts.emptyHtml);
                                    $list.after(node);
                                    this.caret.setStart(node);

                                    return false;
                                }
                            }
                        } else if (!this.opts.linebreaks && !this.keydown.block) {
                            return this.keydown.insertParagraph(e);
                        }
                    }

                    // Shift+Enter or Ctrl+Enter
                    if (key === this.keyCode.ENTER && (e.ctrlKey || e.shiftKey)) {
                        return this.keydown.onShiftEnter(e);
                    }

                    // tab or cmd + [
                    if (key === this.keyCode.TAB || e.metaKey && key === 221 || e.metaKey && key === 219) {
                        return this.keydown.onTab(e, key);
                    }

                    // image delete and backspace
                    if (key === this.keyCode.BACKSPACE || key === this.keyCode.DELETE) {
                        var nodes = this.selection.getNodes();

                        if (nodes) {
                            var len = nodes.length;
                            var last;
                            for (var i = 0; i < len; i++) {
                                var children = $(nodes[i]).children('img');
                                if (children.length !== 0) {
                                    var self = this;
                                    $.each(children, function(z, s) {
                                        var $s = $(s);
                                        if ($s.css('float') != 'none')
                                            return;

                                        // image delete callback
                                        self.core.setCallback('imageDelete', s.src, $s);
                                        last = s;
                                    });
                                } else if (nodes[i].tagName == 'IMG') {
                                    if (last != nodes[i]) {
                                        // image delete callback
                                        this.core.setCallback('imageDelete', nodes[i].src, $(nodes[i]));
                                        last = nodes[i];
                                    }
                                }
                            }
                        }
                    }

                    // backspace
                    if (key === this.keyCode.BACKSPACE) {
                        // backspace as outdent
                        var block = this.selection.getBlock();
                        var indented = ($(block).css('margin-left') !== '0px');
                        if (block && indented && this.range.collapsed && this.utils.isStartOfElement()) {
                            this.indent.decrease();
                            e.preventDefault();
                            return;
                        }

                        // remove hr in FF
                        if (this.utils.browser('mozilla')) {
                            var prev = this.selection.getPrev();
                            var prev2 = $(prev).prev()[0];
                            if (prev && prev.tagName === 'HR')
                                $(prev).remove();
                            if (prev2 && prev2.tagName === 'HR')
                                $(prev2).remove();
                        }

                        this.keydown.removeInvisibleSpace();
                        this.keydown.removeEmptyListInTable(e);
                    }

                    this.code.sync();
                },
                checkEvents: function(arrow, key) {
                    if (!arrow && (this.core.getEvent() == 'click' || this.core.getEvent() == 'arrow')) {
                        this.core.addEvent(false);

                        if (this.keydown.checkKeyEvents(key)) {
                            this.buffer.set();
                        }
                    }
                },
                checkKeyEvents: function(key) {
                    var k = this.keyCode;
                    var keys = [k.BACKSPACE, k.DELETE, k.ENTER, k.ESC, k.TAB, k.CTRL, k.META, k.ALT, k.SHIFT];

                    return ($.inArray(key, keys) == -1) ? true : false;

                },
                addArrowsEvent: function(arrow) {
                    if (!arrow)
                        return;

                    if ((this.core.getEvent() == 'click' || this.core.getEvent() == 'arrow')) {
                        this.core.addEvent(false);
                        return;
                    }

                    this.core.addEvent('arrow');
                },
                setupBuffer: function(e, key) {
                    // VWO Updates, prevent ctrl + z capturing by redactor
                    if (this.keydown.ctrl && key === 90 && !e.shiftKey && !e.altKey && this.opts.buffer.length) // z key
                    {
                        return;
                        e.preventDefault();
                        this.buffer.undo();
                    }// undo
                    else if (this.keydown.ctrl && key === 90 && e.shiftKey && !e.altKey && this.opts.rebuffer.length !== 0) {
                        return;
                        e.preventDefault();
                        this.buffer.redo();
                    } else if (!this.keydown.ctrl) {
                        if (key == this.keyCode.BACKSPACE || key == this.keyCode.DELETE || (key == this.keyCode.ENTER && !e.ctrlKey && !e.shiftKey)) {
                            this.buffer.set();
                        }
                    }
                },
                setupSelectAll: function(e, key) {
                    if (this.keydown.ctrl && key === 65) {
                        this.utils.enableSelectAll();
                    } else if (key != this.keyCode.LEFT_WIN && !this.keydown.ctrl) {
                        this.utils.disableSelectAll();
                    }
                },
                onArrowDown: function() {
                    var tags = [this.keydown.blockquote, this.keydown.pre, this.keydown.figcaption];

                    for (var i = 0; i < tags.length; i++) {
                        if (tags[i]) {
                            this.keydown.insertAfterLastElement(tags[i]);
                            return false;
                        }
                    }
                },
                onShiftEnter: function(e) {
                    this.buffer.set();

                    if (this.utils.isEndOfElement()) {
                        return this.keydown.insertDblBreakLine(e);
                    }

                    return this.keydown.insertBreakLine(e);
                },
                onTab: function(e, key) {
                    if (!this.opts.tabKey)
                        return true;
                    if (this.utils.isEmpty(this.code.get()) && this.opts.tabAsSpaces === false)
                        return true;

                    e.preventDefault();

                    var node;
                    if (this.keydown.pre && !e.shiftKey) {
                        node = (this.opts.preSpaces) ? document.createTextNode(Array(this.opts.preSpaces + 1).join('\u00a0')) : document.createTextNode('\t');
                        this.insert.node(node);
                        this.code.sync();
                    } else if (this.opts.tabAsSpaces !== false) {
                        node = document.createTextNode(Array(this.opts.tabAsSpaces + 1).join('\u00a0'));
                        this.insert.node(node);
                        this.code.sync();
                    } else {
                        if (e.metaKey && key === 219)
                            this.indent.decrease();
                        else if (e.metaKey && key === 221)
                            this.indent.increase();
                        else if (!e.shiftKey)
                            this.indent.increase();
                        else
                            this.indent.decrease();
                    }

                    return false;
                },
                replaceDivToBreakLine: function() {
                    var blockElem = this.selection.getBlock();
                    var blockHtml = blockElem.innerHTML.replace(/<br\s?\/?>/gi, '');
                    if ((blockElem.tagName === 'DIV' || blockElem.tagName === 'P') && blockHtml === '' && !$(blockElem).hasClass('redactor-editor')) {
                        var br = document.createElement('br');

                        $(blockElem).replaceWith(br);
                        this.caret.setBefore(br);

                        this.code.sync();

                        return false;
                    }
                },
                replaceDivToParagraph: function() {
                    var blockElem = this.selection.getBlock();
                    var blockHtml = blockElem.innerHTML.replace(/<br\s?\/?>/gi, '');
                    if (blockElem.tagName === 'DIV' && this.utils.isEmpty(blockHtml) && !$(blockElem).hasClass('redactor-editor')) {
                        var p = document.createElement('p');
                        p.innerHTML = this.opts.invisibleSpace;

                        $(blockElem).replaceWith(p);
                        this.caret.setStart(p);

                        this.code.sync();

                        return false;
                    } else if (this.opts.cleanStyleOnEnter && blockElem.tagName == 'P') {
                        $(blockElem).removeAttr('class').removeAttr('style');
                    }
                },
                insertParagraph: function(e) {
                    e.preventDefault();

                    this.selection.get();

                    var p = document.createElement('p');
                    p.innerHTML = this.opts.invisibleSpace;

                    this.range.deleteContents();
                    this.range.insertNode(p);

                    this.caret.setStart(p);

                    this.code.sync();

                    return false;
                },
                exitFromBlockquote: function(e) {
                    if (!this.utils.isEndOfElement())
                        return;

                    var tmp = $.trim($(this.keydown.block).html());
                    if (tmp.search(/(<br\s?\/?>){2}$/i) != -1) {
                        e.preventDefault();

                        if (this.opts.linebreaks) {
                            var br = document.createElement('br');
                            $(this.keydown.blockquote).after(br);

                            this.caret.setBefore(br);
                            $(this.keydown.block).html(tmp.replace(/<br\s?\/?>$/i, ''));
                        } else {
                            var node = $(this.opts.emptyHtml);
                            $(this.keydown.blockquote).after(node);
                            this.caret.setStart(node);
                        }

                        return true;

                    }

                    return;

                },
                insertAfterLastElement: function(element) {
                    if (!this.utils.isEndOfElement())
                        return;

                    this.buffer.set();

                    if (this.opts.linebreaks) {
                        var contents = $('<div>').append($.trim(this.$editor.html())).contents();
                        var last = contents.last()[0];
                        if (last.tagName == 'SPAN' && last.innerHTML === '') {
                            last = contents.prev()[0];
                        }

                        if (this.utils.getOuterHtml(last) != this.utils.getOuterHtml(element))
                            return;

                        var br = document.createElement('br');
                        $(element).after(br);
                        this.caret.setAfter(br);

                    } else {
                        if (this.$editor.contents().last()[0] !== element)
                            return;

                        var node = $(this.opts.emptyHtml);
                        $(element).after(node);
                        this.caret.setStart(node);
                    }
                },
                insertNewLine: function(e) {
                    e.preventDefault();

                    var node = document.createTextNode('\n');

                    this.selection.get();

                    this.range.deleteContents();
                    this.range.insertNode(node);

                    this.caret.setAfter(node);

                    this.code.sync();

                    return false;
                },
                insertBreakLine: function(e) {
                    return this.keydown.insertBreakLineProcessing(e);
                },
                insertDblBreakLine: function(e) {
                    return this.keydown.insertBreakLineProcessing(e, true);
                },
                insertBreakLineProcessing: function(e, dbl) {
                    e.stopPropagation();

                    this.selection.get();

                    var br1 = document.createElement('br');

                    if (this.utils.browser('msie')) {
                        this.range.collapse(false);
                        this.range.setEnd(this.range.endContainer, this.range.endOffset);
                    } else {
                        this.range.deleteContents();
                    }

                    this.range.insertNode(br1);

                    // move br outside A tag
                    var $parentA = $(br1).parent("a");

                    if ($parentA.length > 0) {
                        $parentA.find(br1).remove();
                        $parentA.after(br1);
                    }

                    if (dbl === true) {
                        var $next = $(br1).next();
                        if ($next.length !== 0 && $next[0].tagName === 'BR' && this.utils.isEndOfEditor()) {
                            this.caret.setAfter(br1);
                            this.code.sync();
                            return false;
                        }

                        var br2 = document.createElement('br');

                        this.range.insertNode(br2);
                        this.caret.setAfter(br2);
                    } else {
                        // caret does not move after the br visual
                        if (this.utils.browser('msie')) {
                            var space = document.createElement('span');
                            space.innerHTML = '&#x200b;';

                            $(br1).after(space);
                            this.caret.setAfter(space);
                            $(space).remove();
                        } else {
                            var range = document.createRange();
                            range.setStartAfter(br1);
                            range.collapse(true);
                            var selection = window.getSelection();
                            selection.removeAllRanges();
                            selection.addRange(range);

                        }
                    }

                    this.code.sync();
                    return false;
                },
                removeInvisibleSpace: function() {
                    var $current = $(this.keydown.current);
                    if ($current.text().search(/^\u200B$/g) === 0) {
                        $current.remove();
                    }
                },
                removeEmptyListInTable: function(e) {
                    var $current = $(this.keydown.current);
                    var $parent = $(this.keydown.parent);
                    var td = $current.closest('td', this.$editor[0]);

                    if (td.length !== 0 && $current.closest('li', this.$editor[0]) && $parent.children('li').length === 1) {
                        if (!this.utils.isEmpty($current.text()))
                            return;

                        e.preventDefault();

                        $current.remove();
                        $parent.remove();

                        this.caret.setStart(td);
                    }
                }
            };
        },
        keyup: function() {
            return {
                init: function(e) {

                    if (this.rtePaste)
                        return;

                    var key = e.which;

                    this.keyup.current = this.selection.getCurrent();
                    this.keyup.parent = this.selection.getParent();
                    var $parent = this.utils.isRedactorParent($(this.keyup.parent).parent());

                    // callback
                    var keyupStop = this.core.setCallback('keyup', e);
                    if (keyupStop === false) {
                        e.preventDefault();
                        return false;
                    }

                    // replace to p before / after the table or body
                    if (!this.opts.linebreaks && this.keyup.current.nodeType === 3 && this.keyup.current.length <= 1 && (this.keyup.parent === false || this.keyup.parent.tagName == 'BODY')) {
                        this.keyup.replaceToParagraph();
                    }

                    // replace div after lists
                    if (!this.opts.linebreaks && this.utils.isRedactorParent(this.keyup.current) && this.keyup.current.tagName === 'DIV') {
                        this.keyup.replaceToParagraph(false);
                    }

                    if (!this.opts.linebreaks && $(this.keyup.parent).hasClass('redactor-invisible-space') && ($parent === false || $parent[0].tagName == 'BODY')) {
                        $(this.keyup.parent).contents().unwrap();
                        this.keyup.replaceToParagraph();
                    }

                    // linkify
                    if (this.linkify.isEnabled() && this.linkify.isKey(key))
                        this.linkify.format();

                    if (key === this.keyCode.DELETE || key === this.keyCode.BACKSPACE) {
                        if (this.utils.browser('mozilla')) {
                            var td = $(this.keydown.current).closest('td', this.$editor[0]);
                            if (td.size() !== 0 && td.text() !== '') {
                                e.preventDefault();
                                return false;
                            }
                        }

                        // clear unverified
                        this.clean.clearUnverified();

                        if (this.observe.image) {
                            e.preventDefault();

                            this.image.hideResize();

                            this.buffer.set();
                            this.image.remove(this.observe.image);
                            this.observe.image = false;

                            return false;
                        }

                        // remove empty paragraphs
                        this.$editor.find('p').each($.proxy(function(i, s) {
                            this.utils.removeEmpty(i, $(s).html());
                        }, this));

                        // remove invisible space
                        if (this.opts.linebreaks && this.keyup.current && this.keyup.current.tagName == 'DIV' && this.utils.isEmpty(this.keyup.current.innerHTML)) {
                            $(this.keyup.current).after(this.selection.getMarkerAsHtml());
                            this.selection.restore();
                            $(this.keyup.current).remove();
                        }

                        // if empty
                        return this.keyup.formatEmpty(e);
                    }
                },
                replaceToParagraph: function(clone) {
                    var $current = $(this.keyup.current);

                    var node;
                    if (clone === false) {
                        node = $('<p>').append($current.html());
                    } else {
                        node = $('<p>').append($current.clone());
                    }

                    $current.replaceWith(node);
                    var next = $(node).next();
                    if (typeof (next[0]) !== 'undefined' && next[0].tagName == 'BR') {
                        next.remove();
                    }

                    this.caret.setEnd(node);
                },
                formatEmpty: function(e) {
                    var html = $.trim(this.$editor.html());

                    if (!this.utils.isEmpty(html))
                        return;

                    e.preventDefault();

                    if (this.opts.linebreaks) {
                        this.$editor.html(this.selection.getMarkerAsHtml());
                        this.selection.restore();
                    } else {
                        this.$editor.html(this.opts.emptyHtml);
                        this.focus.setStart();
                    }

                    this.code.sync();

                    return false;
                }
            };
        },
        lang: function() {
            return {
                load: function() {
                    this.opts.curLang = this.opts.langs[this.opts.lang];
                },
                get: function(name) {
                    return (typeof this.opts.curLang[name] != 'undefined') ? this.opts.curLang[name] : '';
                }
            };
        },
        line: function() {
            return {
                insert: function() {
                    this.buffer.set();

                    var blocks = this.selection.getBlocks();
                    if (blocks[0] !== false && this.line.isExceptLastOrFirst(blocks)) {
                        if (!this.utils.browser('msie'))
                            this.$editor.focus();
                        return;
                    }

                    if (this.utils.browser('msie')) {
                        this.line.insertInIe();
                    } else {
                        this.line.insertInOthersBrowsers();
                    }
                },
                isExceptLastOrFirst: function(blocks) {
                    var exceptTags = ['li', 'td', 'th', 'blockquote', 'figcaption', 'pre', 'dl', 'dt', 'dd'];

                    var first = blocks[0].tagName.toLowerCase();
                    var last = this.selection.getLastBlock();

                    last = (typeof last == 'undefined') ? first : last.tagName.toLowerCase();

                    var firstFound = $.inArray(first, exceptTags) != -1;
                    var lastFound = $.inArray(last, exceptTags) != -1;

                    if ((firstFound && lastFound) || firstFound) {
                        return true;
                    }
                },
                insertInIe: function() {
                    this.utils.saveScroll();
                    this.buffer.set();

                    this.insert.node(document.createElement('hr'));

                    this.utils.restoreScroll();
                    this.code.sync();
                },
                insertInOthersBrowsers: function() {
                    this.buffer.set();

                    var extra = '<p id="redactor-insert-line"><br /></p>';
                    if (this.opts.linebreaks)
                        extra = '<br id="redactor-insert-line">';

                    document.execCommand('insertHtml', false, '<hr>' + extra);

                    this.line.setFocus();
                    this.code.sync();
                },
                setFocus: function() {
                    var node = this.$editor.find('#redactor-insert-line');
                    var next = $(node).next()[0];
                    var target = next;
                    if (this.utils.browser('mozilla') && next && next.innerHTML === '') {
                        target = $(next).next()[0];
                        $(next).remove();
                    }

                    if (target) {
                        node.remove();

                        if (!this.opts.linebreaks) {
                            this.$editor.focus();
                            this.line.setStart(target);
                        }

                    } else {

                        node.removeAttr('id');
                        this.line.setStart(node[0]);
                    }
                },
                setStart: function(node) {
                    if (typeof node === 'undefined')
                        return;

                    var textNode = document.createTextNode('\u200B');

                    this.selection.get();
                    this.range.setStart(node, 0);
                    this.range.insertNode(textNode);
                    this.range.collapse(true);
                    this.selection.addRange();

                }
            };
        },
        link: function() {
            return {
                show: function(e) {
                    if (typeof e != 'undefined' && e.preventDefault)
                        e.preventDefault();

                    if (!this.observe.isCurrent('a')) {
                        this.modal.load('link', this.lang.get('link_insert'), 600);
                    } else {
                        this.modal.load('link', this.lang.get('link_edit'), 600);
                    }

                    this.modal.createCancelButton();

                    var buttonText = !this.observe.isCurrent('a') ? this.lang.get('insert') : this.lang.get('edit');

                    this.link.buttonInsert = this.modal.createActionButton(buttonText);

                    this.selection.get();

                    this.link.getData();
                    this.link.cleanUrl();

                    if (this.link.target == '_blank')
                        $('#redactor-link-blank').prop('checked', true);

                    this.link.$inputUrl = $('#redactor-link-url');
                    this.link.$inputText = $('#redactor-link-url-text');

                    this.link.$inputText.val(this.link.text);
                    this.link.$inputUrl.val(this.link.url);

                    this.link.buttonInsert.on('click', $.proxy(this.link.insert, this));

                    // hide link's tooltip
                    $('.redactor-link-tooltip').remove();

                    // show modal
                    this.selection.save();
                    this.modal.show();
                    this.link.$inputUrl.focus();
                },
                cleanUrl: function() {
                    var thref = self.location.href.replace(/\/$/i, '');

                    if (typeof this.link.url !== "undefined") {
                        this.link.url = this.link.url.replace(thref, '');
                        this.link.url = this.link.url.replace(/^\/#/, '#');
                        this.link.url = this.link.url.replace('mailto:', '');

                        // remove host from href
                        if (!this.opts.linkProtocol) {
                            var re = new RegExp('^(http|ftp|https)://' + self.location.host,'i');
                            this.link.url = this.link.url.replace(re, '');
                        }
                    }
                },
                getData: function() {
                    this.link.$node = false;

                    var $el = $(this.selection.getCurrent()).closest('a', this.$editor[0]);
                    if ($el.length !== 0 && $el[0].tagName === 'A') {
                        this.link.$node = $el;

                        this.link.url = $el.attr('href');
                        this.link.text = $el.text();
                        this.link.target = $el.attr('target');
                    } else {
                        this.link.text = this.sel.toString();
                        this.link.url = '';
                        this.link.target = '';
                    }

                },
                insert: function() {
                    this.placeholder.remove();

                    var target = '';
                    var link = this.link.$inputUrl.val();
                    var text = this.link.$inputText.val().replace(/(<([^>]+)>)/ig, "");

                    if ($.trim(link) === '') {
                        this.link.$inputUrl.addClass('redactor-input-error').on('keyup', function() {
                            $(this).removeClass('redactor-input-error');
                            $(this).off('keyup');

                        });

                        return;
                    }

                    // mailto
                    if (link.search('@') != -1 && /(http|ftp|https):\/\//i.test(link) === false) {
                        link = 'mailto:' + link;
                    }// url, not anchor
                    else if (link.search('#') !== 0) {
                        if ($('#redactor-link-blank').prop('checked')) {
                            target = '_blank';
                        }

                        // test url (add protocol)
                        var pattern = '((xn--)?[a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}';
                        var re = new RegExp('^(http|ftp|https)://' + pattern,'i');
                        var re2 = new RegExp('^' + pattern,'i');
                        var re3 = new RegExp('\.(html|php)$','i');
                        if (link.search(re) == -1 && link.search(re3) == -1 && link.search(re2) === 0 && this.opts.linkProtocol) {
                            link = this.opts.linkProtocol + '://' + link;
                        }
                    }

                    this.link.set(text, link, target);
                    this.modal.close();
                },
                set: function(text, link, target) {
                    text = $.trim(text.replace(/<|>/g, ''));

                    this.selection.restore();
                    var blocks = this.selection.getBlocks();

                    if (text === '' && link === '')
                        return;
                    if (text === '' && link !== '')
                        text = link;

                    if (this.link.$node) {
                        this.buffer.set();

                        var $link = this.link.$node
                          , $el = $link.children();

                        if ($el.length > 0) {
                            while ($el.length) {
                                $el = $el.children();
                            }

                            $el = $el.end();
                        } else {
                            $el = $link;
                        }

                        $link.attr('href', link);
                        $el.text(text);

                        if (target !== '') {
                            $link.attr('target', target);
                        } else {
                            $link.removeAttr('target');
                        }

                        this.selection.selectElement($link);

                        this.code.sync();
                    } else {
                        if (this.utils.browser('mozilla') && this.link.text === '') {
                            var $a = $('<a />').attr('href', link).text(text);
                            if (target !== '')
                                $a.attr('target', target);

                            $a = $(this.insert.node($a));

                            if (this.opts.linebreaks) {
                                $a.after('&nbsp;');
                            }

                            this.selection.selectElement($a);
                        } else {
                            var $a;
                            if (this.utils.browser('msie')) {
                                $a = $('<a href="' + link + '">').text(text);
                                if (target !== '')
                                    $a.attr('target', target);

                                $a = $(this.insert.node($a));

                                if (this.selection.getText().match(/\s$/)) {
                                    $a.after(" ");
                                }

                                this.selection.selectElement($a);
                            } else {
                                // vwo change
                                this.$editor.find('a').addClass('vwo-link');
                                document.execCommand('createLink', false, link);
                                var $anchors = this.$editor.find('a:not(.vwo-link)');
                                this.$editor.find('.vwo-link').removeClass('vwo-link').filter('[class=""]').removeAttr('class');
                                // end vwo change

                                $a = $(this.selection.getCurrent()).closest('a', this.$editor[0]);
                                if (this.utils.browser('mozilla')) {
                                    $a = $('a[_moz_dirty=""]');
                                }

                                if (target !== '')
                                    $a.attr('target', target);
                                $a.removeAttr('style').removeAttr('_moz_dirty');

                                if (this.selection.getText().match(/\s$/)) {
                                    $a.after(" ");
                                }

                                if (this.link.text !== '' || this.link.text != text) {
                                    // vwo change
                                    if ($anchors.length > 1) {} else // end vwo change

                                    if (!this.opts.linebreaks && blocks && blocks.length <= 1) {
                                        $a.text(text);
                                    } else if (this.opts.linebreaks) {
                                        $a.text(text);
                                    }

                                    this.selection.selectElement($a);
                                }
                            }
                        }

                        this.code.sync();
                        this.core.setCallback('insertedLink', $a);

                    }

                    // link tooltip
                    setTimeout($.proxy(function() {
                        this.observe.links();

                    }, this), 5);
                },
                unlink: function(e) {
                    if (typeof e != 'undefined' && e.preventDefault) {
                        e.preventDefault();
                    }

                    var nodes = this.selection.getNodes();
                    if (!nodes)
                        return;

                    this.buffer.set();

                    var len = nodes.length;
                    var links = [];
                    for (var i = 0; i < len; i++) {
                        if (nodes[i].tagName === 'A') {
                            links.push(nodes[i]);
                        }

                        var $node = $(nodes[i]).closest('a', this.$editor[0]);
                        $node.replaceWith($node.contents());
                    }

                    this.core.setCallback('deletedLink', links);

                    // hide link's tooltip
                    $('.redactor-link-tooltip').remove();

                    this.code.sync();

                },
                toggleClass: function(className) {
                    this.link.setClass(className, 'toggleClass');
                },
                addClass: function(className) {
                    this.link.setClass(className, 'addClass');
                },
                removeClass: function(className) {
                    this.link.setClass(className, 'removeClass');
                },
                setClass: function(className, func) {
                    var links = this.selection.getInlinesTags(['a']);
                    if (links === false)
                        return;

                    $.each(links, function() {
                        $(this)[func](className);
                    });
                }
            };
        },
        linkify: function() {
            return {
                isKey: function(key) {
                    return key == this.keyCode.ENTER || key == this.keyCode.SPACE;
                },
                isEnabled: function() {
                    return this.opts.convertLinks && (this.opts.convertUrlLinks || this.opts.convertImageLinks || this.opts.convertVideoLinks) && !this.utils.isCurrentOrParent('PRE');
                },
                format: function() {
                    var linkify = this.linkify
                      , opts = this.opts;

                    this.$editor.find(":not(iframe,img,a,pre)").addBack().contents().filter(function() {
                        return this.nodeType === 3 && $.trim(this.nodeValue) != "" && !$(this).parent().is("pre") && (this.nodeValue.match(opts.linkify.regexps.youtube) || this.nodeValue.match(opts.linkify.regexps.vimeo) || this.nodeValue.match(opts.linkify.regexps.image) || this.nodeValue.match(opts.linkify.regexps.url));
                    }).each(function() {
                        var text = $(this).text()
                          , html = text;

                        if (opts.convertVideoLinks && (html.match(opts.linkify.regexps.youtube) || html.match(opts.linkify.regexps.vimeo))) {
                            html = linkify.convertVideoLinks(html);
                        } else if (opts.convertImageLinks && html.match(opts.linkify.regexps.image)) {
                            html = linkify.convertImages(html);
                        } else if (opts.convertUrlLinks) {
                            html = linkify.convertLinks(html);
                        }

                        $(this).before(text.replace(text, html)).remove();
                    });

                    var objects = this.$editor.find('.redactor-linkify-object').each(function() {
                        var $el = $(this);
                        $el.removeClass('redactor-linkify-object');
                        if ($el.attr('class') === '')
                            $el.removeAttr('class');

                        return $el[0];

                    });

                    // callback
                    setTimeout($.proxy(function() {
                        this.observe.load();
                        this.core.setCallback('linkify', objects);
                    }, this), 100);

                    // sync
                    this.code.sync();
                },
                convertVideoLinks: function(html) {
                    var iframeStart = '<iframe class="redactor-linkify-object" width="500" height="281" src="'
                      , iframeEnd = '" frameborder="0" allowfullscreen></iframe>';

                    if (html.match(this.opts.linkify.regexps.youtube)) {
                        html = html.replace(this.opts.linkify.regexps.youtube, iframeStart + '//www.youtube.com/embed/$1' + iframeEnd);
                    }

                    if (html.match(this.opts.linkify.regexps.vimeo)) {
                        html = html.replace(this.opts.linkify.regexps.vimeo, iframeStart + '//player.vimeo.com/video/$2' + iframeEnd);
                    }

                    return html;
                },
                convertImages: function(html) {
                    var matches = html.match(this.opts.linkify.regexps.image);

                    if (matches) {
                        html = html.replace(html, '<img src="' + matches + '" class="redactor-linkify-object" />');

                        if (this.opts.linebreaks) {
                            if (!this.utils.isEmpty(this.code.get())) {
                                html = '<br>' + html;
                            }
                        }

                        html += '<br>';
                    }

                    return html;
                },
                convertLinks: function(html) {
                    var matches = html.match(this.opts.linkify.regexps.url);

                    if (matches) {
                        matches = $.grep(matches, function(v, k) {
                            return $.inArray(v, matches) === k;
                        });

                        var length = matches.length;

                        for (var i = 0; i < length; i++) {
                            var href = matches[i]
                              , text = href
                              , linkProtocol = this.opts.linkProtocol + '://';

                            if (href.match(/(https?|ftp):\/\//i) !== null) {
                                linkProtocol = "";
                            }

                            if (text.length > this.opts.linkSize) {
                                text = text.substring(0, this.opts.linkSize) + '...';
                            }

                            if (text.search('%') === -1) {
                                text = decodeURIComponent(text);
                            }

                            var regexB = "\\b";

                            if ($.inArray(href.slice(-1), ["/", "&", "="]) != -1) {
                                regexB = "";
                            }

                            // escaping url
                            var regexp = new RegExp('(' + href.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&") + regexB + ')','g');

                            html = html.replace(regexp, '<a href="' + linkProtocol + $.trim(href) + '" class="redactor-linkify-object">' + $.trim(text) + '</a>');
                        }
                    }

                    return html;
                }
            };
        },
        list: function() {
            return {
                toggle: function(cmd) {
                    this.placeholder.remove();
                    if (!this.utils.browser('msie'))
                        this.$editor.focus();

                    this.buffer.set();
                    this.selection.save();

                    var parent = this.selection.getParent();
                    var $list = $(parent).closest('ol, ul', this.$editor[0]);

                    if (!this.utils.isRedactorParent($list) && $list.length !== 0) {
                        $list = false;
                    }

                    var isUnorderedCmdOrdered, isOrderedCmdUnordered;
                    var remove = false;
                    if ($list && $list.length) {
                        remove = true;
                        var listTag = $list[0].tagName;

                        isUnorderedCmdOrdered = (cmd === 'orderedlist' && listTag === 'UL');
                        isOrderedCmdUnordered = (cmd === 'unorderedlist' && listTag === 'OL');
                    }

                    if (isUnorderedCmdOrdered) {
                        this.utils.replaceToTag($list, 'ol');
                    } else if (isOrderedCmdUnordered) {
                        this.utils.replaceToTag($list, 'ul');
                    } else {
                        if (remove) {
                            this.list.remove(cmd, $list);
                        } else {
                            this.list.insert(cmd);
                        }
                    }

                    this.selection.restore();
                    this.code.sync();

                },
                insert: function(cmd) {
                    var current = this.selection.getCurrent();
                    var $td = $(current).closest('td, th', this.$editor[0]);

                    if (this.utils.browser('msie') && this.opts.linebreaks) {
                        this.list.insertInIe(cmd);
                    } else {
                        document.execCommand('insert' + cmd);
                    }

                    var parent = this.selection.getParent();
                    var $list = $(parent).closest('ol, ul', this.$editor[0]);
                    if ($td.length !== 0) {
                        var newTd = $td.clone();
                        $td.after(newTd).remove('');
                    }

                    if (this.utils.isEmpty($list.find('li').text())) {
                        var $children = $list.children('li');
                        $children.find('br').remove();
                        $children.append(this.selection.getMarkerAsHtml());

                        if (this.opts.linebreaks && this.utils.browser('mozilla') && $children.size() == 2 && this.utils.isEmpty($children.eq(1).text())) {
                            $children.eq(1).remove();
                        }
                    }

                    if ($list.length) {
                        // remove block-element list wrapper
                        var $listParent = $list.parent();
                        if (this.utils.isRedactorParent($listParent) && $listParent[0].tagName != 'LI' && this.utils.isBlock($listParent[0])) {
                            $listParent.replaceWith($listParent.contents());
                        }
                    }

                    if (!this.utils.browser('msie')) {
                        this.$editor.focus();
                    }

                    this.clean.clearUnverified();
                },
                insertInIe: function(cmd) {
                    var wrapper = this.selection.wrap('div');
                    var wrapperHtml = $(wrapper).html();

                    var tmpList = (cmd == 'orderedlist') ? $('<ol>') : $('<ul>');
                    var tmpLi = $('<li>');

                    if ($.trim(wrapperHtml) === '') {
                        tmpLi.append(this.selection.getMarkerAsHtml());
                        tmpList.append(tmpLi);
                        this.$editor.find('#selection-marker-1').replaceWith(tmpList);
                    } else {
                        var items = wrapperHtml.split(/<br\s?\/?>/gi);
                        if (items) {
                            for (var i = 0; i < items.length; i++) {
                                if ($.trim(items[i]) !== '') {
                                    tmpList.append($('<li>').html(items[i]));
                                }
                            }
                        } else {
                            tmpLi.append(wrapperHtml);
                            tmpList.append(tmpLi);
                        }

                        $(wrapper).replaceWith(tmpList);
                    }
                },
                remove: function(cmd, $list) {
                    // vwo change (>= 0)
                    if ($.inArray('ul', this.selection.getBlocks()) >= 0)
                        cmd = 'unorderedlist';
                    // end vwo change

                    document.execCommand('insert' + cmd);

                    var $current = $(this.selection.getCurrent());
                    this.indent.fixEmptyIndent();

                    if (!this.opts.linebreaks && $current.closest('li, th, td', this.$editor[0]).length === 0) {
                        document.execCommand('formatblock', false, 'p');
                        this.$editor.find('ul, ol, blockquote').each($.proxy(this.utils.removeEmpty, this));
                    }

                    var $table = $(this.selection.getCurrent()).closest('table', this.$editor[0]);
                    var $prev = $table.prev();
                    if (!this.opts.linebreaks && $table.length !== 0 && $prev.length !== 0 && $prev[0].tagName == 'BR') {
                        $prev.remove();
                    }

                    this.clean.clearUnverified();

                }
            };
        },
        modal: function() {
            return {
                callbacks: {},
                loadTemplates: function() {
                    this.opts.modal = {
                        imageEdit: String() + '<section id="redactor-modal-image-edit">' + '<label>' + this.lang.get('title') + '</label>' + '<input type="text" id="redactor-image-title" />' + '<label class="redactor-image-link-option">' + this.lang.get('link') + '</label>' + '<input type="text" id="redactor-image-link" class="redactor-image-link-option" aria-label="' + this.lang.get('link') + '" />' + '<label class="redactor-image-link-option"><input type="checkbox" id="redactor-image-link-blank" aria-label="' + this.lang.get('link_new_tab') + '"> ' + this.lang.get('link_new_tab') + '</label>' + '<label class="redactor-image-position-option">' + this.lang.get('image_position') + '</label>' + '<select class="redactor-image-position-option" id="redactor-image-align" aria-label="' + this.lang.get('image_position') + '">' + '<option value="none">' + this.lang.get('none') + '</option>' + '<option value="left">' + this.lang.get('left') + '</option>' + '<option value="center">' + this.lang.get('center') + '</option>' + '<option value="right">' + this.lang.get('right') + '</option>' + '</select>' + '</section>',

                        image: String() + '<section id="redactor-modal-image-insert">' + '<div id="redactor-modal-image-droparea"></div>' + '</section>',

                        file: String() + '<section id="redactor-modal-file-insert">' + '<div id="redactor-modal-file-upload-box">' + '<label>' + this.lang.get('filename') + '</label>' + '<input type="text" id="redactor-filename" aria-label="' + this.lang.get('filename') + '" /><br><br>' + '<div id="redactor-modal-file-upload"></div>' + '</div>' + '</section>',

                        link: String() + '<section id="redactor-modal-link-insert">' + '<label>URL</label>' + '<input type="url" id="redactor-link-url" aria-label="URL" />' + '<label>' + this.lang.get('text') + '</label>' + '<input type="text" id="redactor-link-url-text" aria-label="' + this.lang.get('text') + '" />' + '<label><input type="checkbox" id="redactor-link-blank"> ' + this.lang.get('link_new_tab') + '</label>' + '</section>'
                    };

                    $.extend(this.opts, this.opts.modal);

                },
                addCallback: function(name, callback) {
                    this.modal.callbacks[name] = callback;
                },
                createTabber: function($modal) {
                    this.modal.$tabber = $('<div>').attr('id', 'redactor-modal-tabber');

                    $modal.prepend(this.modal.$tabber);
                },
                addTab: function(id, name, active) {
                    var $tab = $('<a href="#" rel="tab' + id + '">').text(name);
                    if (active) {
                        $tab.addClass('active');
                    }

                    var self = this;
                    $tab.on('click', function(e) {
                        e.preventDefault();
                        $('.redactor-tab').hide();
                        $('.redactor-' + $(this).attr('rel')).show();

                        self.modal.$tabber.find('a').removeClass('active');
                        $(this).addClass('active');

                    });

                    this.modal.$tabber.append($tab);
                },
                addTemplate: function(name, template) {
                    this.opts.modal[name] = template;
                },
                getTemplate: function(name) {
                    return this.opts.modal[name];
                },
                getModal: function() {
                    return this.$modalBody.find('section');
                },
                load: function(templateName, title, width) {
                    this.modal.templateName = templateName;
                    this.modal.width = width;

                    this.modal.build();
                    this.modal.enableEvents();
                    this.modal.setTitle(title);
                    this.modal.setDraggable();
                    this.modal.setContent();

                    // callbacks
                    if (typeof this.modal.callbacks[templateName] != 'undefined') {
                        this.modal.callbacks[templateName].call(this);
                    }

                },
                show: function() {
                    this.utils.disableBodyScroll();

                    if (this.utils.isMobile()) {
                        this.modal.showOnMobile();
                    } else {
                        this.modal.showOnDesktop();
                    }

                    if (this.opts.highContrast) {
                        this.$modalBox.addClass("redactor-modal-contrast");
                    }

                    this.$modalOverlay.show();
                    this.$modalBox.show();

                    this.$modal.attr('tabindex', '-1');
                    this.$modal.focus();

                    this.modal.setButtonsWidth();

                    this.utils.saveScroll();

                    // resize
                    if (!this.utils.isMobile()) {
                        setTimeout($.proxy(this.modal.showOnDesktop, this), 0);
                        $(window).on('resize.redactor-modal', $.proxy(this.modal.resize, this));
                    }

                    // modal shown callback
                    this.core.setCallback('modalOpened', this.modal.templateName, this.$modal);

                    // fix bootstrap modal focus
                    $(document).off('focusin.modal');

                    // enter
                    this.$modal.find('input[type=text],input[type=url],input[type=email]').on('keydown.redactor-modal', $.proxy(this.modal.setEnter, this));
                },
                showOnDesktop: function() {
                    var height = this.$modal.outerHeight();
                    var windowHeight = $(window).height();
                    var windowWidth = $(window).width();

                    if (this.modal.width > windowWidth) {
                        this.$modal.css({
                            width: '96%',
                            marginTop: (windowHeight / 2 - height / 2) + 'px'
                        });
                        return;
                    }

                    if (height > windowHeight) {
                        this.$modal.css({
                            width: this.modal.width + 'px',
                            marginTop: '20px'
                        });
                    } else {
                        this.$modal.css({
                            width: this.modal.width + 'px',
                            marginTop: (windowHeight / 2 - height / 2) + 'px'
                        });
                    }
                },
                showOnMobile: function() {
                    this.$modal.css({
                        width: '96%',
                        marginTop: '2%'
                    });

                },
                resize: function() {
                    if (this.utils.isMobile()) {
                        this.modal.showOnMobile();
                    } else {
                        this.modal.showOnDesktop();
                    }
                },
                setTitle: function(title) {
                    this.$modalHeader.html(title);
                },
                setContent: function() {
                    this.$modalBody.html(this.modal.getTemplate(this.modal.templateName));
                },
                setDraggable: function() {
                    if (typeof $.fn.draggable === 'undefined')
                        return;

                    this.$modal.draggable({
                        handle: this.$modalHeader
                    });
                    this.$modalHeader.css('cursor', 'move');
                },
                setEnter: function(e) {
                    if (e.which != 13)
                        return;

                    e.preventDefault();
                    this.$modal.find('button.redactor-modal-action-btn').click();
                },
                createCancelButton: function() {
                    var button = $('<button>').addClass('redactor-modal-btn redactor-modal-close-btn').html(this.lang.get('cancel'));
                    button.on('click', $.proxy(this.modal.close, this));

                    this.$modalFooter.append(button);
                },
                createDeleteButton: function(label) {
                    return this.modal.createButton(label, 'delete');
                },
                createActionButton: function(label) {
                    return this.modal.createButton(label, 'action');
                },
                createButton: function(label, className) {
                    var button = $('<button>').addClass('redactor-modal-btn').addClass('redactor-modal-' + className + '-btn').html(label);
                    this.$modalFooter.append(button);

                    return button;
                },
                setButtonsWidth: function() {
                    var buttons = this.$modalFooter.find('button');
                    var buttonsSize = buttons.length;
                    if (buttonsSize === 0)
                        return;

                    buttons.css('width', (100 / buttonsSize) + '%');
                },
                build: function() {
                    this.modal.buildOverlay();

                    this.$modalBox = $('<div id="redactor-modal-box"/>').hide();
                    this.$modal = $('<div id="redactor-modal" role="dialog" aria-labelledby="redactor-modal-header" />');
                    this.$modalHeader = $('<header id="redactor-modal-header"/>');
                    this.$modalClose = $('<button type="button" id="redactor-modal-close" tabindex="1" aria-label="Close" />').html('&times;');
                    this.$modalBody = $('<div id="redactor-modal-body" />');
                    this.$modalFooter = $('<footer />');

                    this.$modal.append(this.$modalHeader);
                    this.$modal.append(this.$modalClose);
                    this.$modal.append(this.$modalBody);
                    this.$modal.append(this.$modalFooter);
                    this.$modalBox.append(this.$modal);
                    this.$modalBox.appendTo(document.body);
                },
                buildOverlay: function() {
                    this.$modalOverlay = $('<div id="redactor-modal-overlay">').hide();
                    $('body').prepend(this.$modalOverlay);
                },
                enableEvents: function() {
                    this.$modalClose.on('click.redactor-modal', $.proxy(this.modal.close, this));
                    $(document).on('keyup.redactor-modal', $.proxy(this.modal.closeHandler, this));
                    this.$editor.on('keyup.redactor-modal', $.proxy(this.modal.closeHandler, this));
                    this.$modalBox.on('click.redactor-modal', $.proxy(this.modal.close, this));
                },
                disableEvents: function() {
                    this.$modalClose.off('click.redactor-modal');
                    $(document).off('keyup.redactor-modal');
                    this.$editor.off('keyup.redactor-modal');
                    this.$modalBox.off('click.redactor-modal');
                    $(window).off('resize.redactor-modal');
                },
                closeHandler: function(e) {
                    if (e.which != this.keyCode.ESC)
                        return;

                    this.modal.close(false);
                },
                close: function(e) {
                    if (e) {
                        if (!$(e.target).hasClass('redactor-modal-close-btn') && e.target != this.$modalClose[0] && e.target != this.$modalBox[0]) {
                            return;
                        }

                        e.preventDefault();
                    }

                    if (!this.$modalBox)
                        return;

                    this.modal.disableEvents();
                    this.utils.enableBodyScroll();

                    this.$modalOverlay.remove();

                    this.$modalBox.fadeOut('fast', $.proxy(function() {
                        this.$modalBox.remove();

                        setTimeout($.proxy(this.utils.restoreScroll, this), 0);

                        if (e !== undefined)
                            this.selection.restore();

                        $(document.body).css('overflow', this.modal.bodyOveflow);
                        this.core.setCallback('modalClosed', this.modal.templateName);

                    }, this));

                }
            };
        },
        observe: function() {
            return {
                load: function() {
                    if (typeof this.opts.destroyed != "undefined")
                        return;

                    if (this.utils.browser('msie')) {
                        var self = this;
                        this.$editor.find('pre, code').on('mouseover', function() {
                            self.$editor.attr('contenteditable', false);
                            $(this).attr('contenteditable', true);

                        }).on('mouseout', function() {
                            self.$editor.attr('contenteditable', true);
                            $(this).removeAttr('contenteditable');

                        });
                    }

                    this.observe.images();
                    this.observe.links();
                },
                toolbar: function(e, btnName) {
                    this.observe.buttons(e, btnName);
                    this.observe.dropdowns();
                },
                isCurrent: function($el, $current) {
                    if (typeof $current == 'undefined') {
                        var $current = $(this.selection.getCurrent());
                    }

                    return $current.is($el) || $current.parents($el).length > 0;
                },
                dropdowns: function() {
                    var $current = $(this.selection.getCurrent());

                    $.each(this.opts.observe.dropdowns, $.proxy(function(key, value) {
                        var observe = value.observe
                          , element = observe.element
                          , $item = value.item
                          , inValues = typeof observe['in'] != 'undefined' ? observe['in'] : false
                          , outValues = typeof observe['out'] != 'undefined' ? observe['out'] : false;

                        if ($current.closest(element).size() > 0) {
                            this.observe.setDropdownProperties($item, inValues, outValues);
                        } else {
                            this.observe.setDropdownProperties($item, outValues, inValues);
                        }
                    }, this));
                },
                setDropdownProperties: function($item, addProperties, deleteProperties) {
                    if (deleteProperties && typeof deleteProperties['attr'] != 'undefined') {
                        this.observe.setDropdownAttr($item, deleteProperties.attr, true);
                    }

                    if (typeof addProperties['attr'] != 'undefined') {
                        this.observe.setDropdownAttr($item, addProperties.attr);
                    }

                    if (typeof addProperties['title'] != 'undefined') {
                        $item.text(addProperties['title']);
                    }
                },
                setDropdownAttr: function($item, properties, isDelete) {
                    $.each(properties, function(key, value) {
                        if (key == 'class') {
                            if (!isDelete) {
                                $item.addClass(value);
                            } else {
                                $item.removeClass(value);
                            }
                        } else {
                            if (!isDelete) {
                                $item.attr(key, value);
                            } else {
                                $item.removeAttr(key);
                            }
                        }
                    });
                },
                addDropdown: function($item, btnName, btnObject) {
                    if (typeof btnObject.observe == "undefined")
                        return;

                    btnObject.item = $item;

                    this.opts.observe.dropdowns.push(btnObject);
                },
                buttons: function(e, btnName) {
                    var current = this.selection.getCurrent();
                    var parent = this.selection.getParent();

                    if (e !== false) {
                        this.button.setInactiveAll();
                    } else {
                        this.button.setInactiveAll(btnName);
                    }

                    if (e === false && btnName !== 'html') {
                        if ($.inArray(btnName, this.opts.activeButtons) != -1)
                            this.button.toggleActive(btnName);
                        return;
                    }

                    //var linkButtonName = (this.utils.isCurrentOrParent('A')) ? this.lang.get('link_edit') : this.lang.get('link_insert');
                    //$('body').find('a.redactor-dropdown-link').text(linkButtonName);

                    $.each(this.opts.activeButtonsStates, $.proxy(function(key, value) {
                        var parentEl = $(parent).closest(key, this.$editor[0]);
                        var currentEl = $(current).closest(key, this.$editor[0]);

                        if (parentEl.length !== 0 && !this.utils.isRedactorParent(parentEl))
                            return;
                        if (!this.utils.isRedactorParent(currentEl))
                            return;
                        if (parentEl.length !== 0 || currentEl.closest(key, this.$editor[0]).length !== 0) {
                            this.button.setActive(value);
                        }

                    }, this));

                    var $parent = $(parent).closest(this.opts.alignmentTags.toString().toLowerCase(), this.$editor[0]);
                    if (this.utils.isRedactorParent(parent) && $parent.length) {
                        var align = ($parent.css('text-align') === '') ? 'left' : $parent.css('text-align');
                        this.button.setActive('align' + align);
                    }
                },
                addButton: function(tag, btnName) {
                    this.opts.activeButtons.push(btnName);
                    this.opts.activeButtonsStates[tag] = btnName;
                },
                images: function() {
                    this.$editor.find('img').each($.proxy(function(i, img) {
                        var $img = $(img);

                        // IE fix (when we clicked on an image and then press backspace IE does goes to image's url)
                        $img.closest('a', this.$editor[0]).on('click', function(e) {
                            e.preventDefault();
                        });

                        if (this.utils.browser('msie'))
                            $img.attr('unselectable', 'on');

                        this.image.setEditable($img);

                    }, this));

                    $(document).on('click.redactor-image-delete.' + this.uuid, $.proxy(function(e) {
                        this.observe.image = false;
                        if (e.target.tagName == 'IMG' && this.utils.isRedactorParent(e.target)) {
                            this.observe.image = (this.observe.image && this.observe.image == e.target) ? false : e.target;
                        }

                    }, this));

                },
                links: function() {
                    if (!this.opts.linkTooltip)
                        return;

                    this.$editor.find('a').on('touchstart.redactor.' + this.uuid + ' click.redactor.' + this.uuid, $.proxy(this.observe.showTooltip, this));
                    this.$editor.on('touchstart.redactor.' + this.uuid + ' click.redactor.' + this.uuid, $.proxy(this.observe.closeTooltip, this));
                    $(document).on('touchstart.redactor.' + this.uuid + ' click.redactor.' + this.uuid, $.proxy(this.observe.closeTooltip, this));
                },
                getTooltipPosition: function($link) {
                    return $link.offset();
                },
                showTooltip: function(e) {
                    var $el = $(e.target);

                    if ($el[0].tagName == 'IMG')
                        return;

                    if ($el[0].tagName !== 'A')
                        $el = $el.closest('a', this.$editor[0]);

                    if ($el[0].tagName !== 'A')
                        return;

                    var $link = $el;

                    var pos = this.observe.getTooltipPosition($link);
                    var tooltip = $('<span class="redactor-link-tooltip"></span>');

                    var href = $link.attr('href');
                    if (href === undefined) {
                        href = '';
                    }

                    if (href.length > 24)
                        href = href.substring(0, 24) + '...';

                    var aLink = $('<a href="' + $link.attr('href') + '" target="_blank" />').html(href).addClass('redactor-link-tooltip-action');
                    var aEdit = $('<a href="#" />').html(this.lang.get('edit')).on('click', $.proxy(this.link.show, this)).addClass('redactor-link-tooltip-action');
                    var aUnlink = $('<a href="#" />').html(this.lang.get('unlink')).on('click', $.proxy(this.link.unlink, this)).addClass('redactor-link-tooltip-action');

                    tooltip.append(aLink).append(' | ').append(aEdit).append(' | ').append(aUnlink);
                    tooltip.css({
                        top: (pos.top + parseInt($link.css('line-height'), 10)) + 'px',
                        left: pos.left + 'px'
                    });

                    $('.redactor-link-tooltip').remove();
                    $('body').append(tooltip);
                },
                closeTooltip: function(e) {
                    e = e.originalEvent || e;

                    var target = e.target;
                    var $parent = $(target).closest('a', this.$editor[0]);
                    if ($parent.length !== 0 && $parent[0].tagName === 'A' && target.tagName !== 'A') {
                        return;
                    } else if ((target.tagName === 'A' && this.utils.isRedactorParent(target)) || $(target).hasClass('redactor-link-tooltip-action')) {
                        return;
                    }

                    $('.redactor-link-tooltip').remove();
                }

            };
        },
        paragraphize: function() {
            return {
                load: function(html) {
                    if (this.opts.linebreaks)
                        return html;
                    if (html === '' || html === '<p></p>')
                        return this.opts.emptyHtml;

                    html = html + "\n";

                    this.paragraphize.safes = [];
                    this.paragraphize.z = 0;

                    html = html.replace(/(<br\s?\/?>){1,}\n?<\/blockquote>/gi, '</blockquote>');

                    html = this.paragraphize.getSafes(html);
                    html = this.paragraphize.getSafesComments(html);
                    html = this.paragraphize.replaceBreaksToNewLines(html);
                    html = this.paragraphize.replaceBreaksToParagraphs(html);
                    html = this.paragraphize.clear(html);
                    html = this.paragraphize.restoreSafes(html);

                    html = html.replace(new RegExp('<br\\s?/?>\n?<(' + this.opts.paragraphizeBlocks.join('|') + ')(.*?[^>])>','gi'), '<p><br /></p>\n<$1$2>');

                    return $.trim(html);
                },
                getSafes: function(html) {
                    var $div = $('<div />').append(html);

                    // remove paragraphs in blockquotes
                    $div.find('blockquote p').replaceWith(function() {
                        return $(this).append('<br />').contents();
                    });

                    html = $div.html();

                    $div.find(this.opts.paragraphizeBlocks.join(', ')).each($.proxy(function(i, s) {
                        this.paragraphize.z++;
                        this.paragraphize.safes[this.paragraphize.z] = s.outerHTML;
                        html = html.replace(s.outerHTML, '\n{replace' + this.paragraphize.z + '}');

                    }, this));

                    return html;
                },
                getSafesComments: function(html) {
                    var commentsMatches = html.match(/<!--([\w\W]*?)-->/gi);

                    if (!commentsMatches)
                        return html;

                    $.each(commentsMatches, $.proxy(function(i, s) {
                        this.paragraphize.z++;
                        this.paragraphize.safes[this.paragraphize.z] = s;
                        html = html.replace(s, '\n{replace' + this.paragraphize.z + '}');
                    }, this));

                    return html;
                },
                restoreSafes: function(html) {
                    $.each(this.paragraphize.safes, function(i, s) {
                        s = (typeof s !== 'undefined') ? s.replace(/\$/g, '&#36;') : s;
                        html = html.replace('{replace' + i + '}', s);

                    });

                    return html;
                },
                replaceBreaksToParagraphs: function(html) {
                    var htmls = html.split(new RegExp('\n','g'), -1);

                    html = '';
                    if (htmls) {
                        var len = htmls.length;
                        for (var i = 0; i < len; i++) {
                            if (!htmls.hasOwnProperty(i))
                                return;

                            if (htmls[i].search('{replace') == -1) {
                                htmls[i] = htmls[i].replace(/<p>\n\t?<\/p>/gi, '');
                                htmls[i] = htmls[i].replace(/<p><\/p>/gi, '');

                                if (htmls[i] !== '') {
                                    html += '<p>' + htmls[i].replace(/^\n+|\n+$/g, "") + "</p>";
                                }
                            } else
                                html += htmls[i];
                        }
                    }

                    return html;
                },
                replaceBreaksToNewLines: function(html) {
                    html = html.replace(/<br \/>\s*<br \/>/gi, "\n\n");
                    html = html.replace(/<br\s?\/?>\n?<br\s?\/?>/gi, "\n<br /><br />");

                    html = html.replace(new RegExp("\r\n",'g'), "\n");
                    html = html.replace(new RegExp("\r",'g'), "\n");
                    html = html.replace(new RegExp("/\n\n+/"), 'g', "\n\n");

                    return html;
                },
                clear: function(html) {
                    html = html.replace(new RegExp('</blockquote></p>','gi'), '</blockquote>');
                    html = html.replace(new RegExp('<p></blockquote>','gi'), '</blockquote>');
                    html = html.replace(new RegExp('<p><blockquote>','gi'), '<blockquote>');
                    html = html.replace(new RegExp('<blockquote></p>','gi'), '<blockquote>');

                    html = html.replace(new RegExp('<p><p ','gi'), '<p ');
                    html = html.replace(new RegExp('<p><p>','gi'), '<p>');
                    html = html.replace(new RegExp('</p></p>','gi'), '</p>');
                    html = html.replace(new RegExp('<p>\\s?</p>','gi'), '');
                    html = html.replace(new RegExp("\n</p>",'gi'), '</p>');
                    html = html.replace(new RegExp('<p>\t?\t?\n?<p>','gi'), '<p>');
                    html = html.replace(new RegExp('<p>\t*</p>','gi'), '');

                    return html;
                }
            };
        },
        paste: function() {
            return {
                init: function(e) {
                    if (!this.opts.cleanOnPaste) {
                        setTimeout($.proxy(this.code.sync, this), 1);
                        return;
                    }

                    this.rtePaste = true;

                    this.buffer.set();
                    this.selection.save();
                    this.utils.saveScroll();

                    this.paste.createPasteBox();

                    $(window).on('scroll.redactor-freeze', $.proxy(function() {
                        $(window).scrollTop(this.saveBodyScroll);

                    }, this));

                    setTimeout($.proxy(function() {
                        var html = this.$pasteBox.html();

                        this.$pasteBox.remove();

                        this.selection.restore();
                        this.utils.restoreScroll();

                        this.paste.insert(html);

                        $(window).off('scroll.redactor-freeze');

                        if (this.linkify.isEnabled()) {
                            this.linkify.format();
                        }

                    }, this), 1);
                },
                createPasteBox: function() {
                    this.$pasteBox = $('<div>').html('').attr('contenteditable', 'true').css({
                        position: 'fixed',
                        width: 0,
                        top: 0,
                        left: '-9999px'
                    });

                    if (this.utils.browser('msie')) {
                        this.$box.append(this.$pasteBox);
                    } else {
                        // bootstrap modal
                        if ($('.modal-body').length > 0) {

                            $('.modal.in .modal-body').append(this.$pasteBox);
                        } else {
                            $('body').append(this.$pasteBox);
                        }

                    }

                    this.$pasteBox.focus();
                },
                insert: function(html) {
                    html = this.core.setCallback('pasteBefore', html);

                    // clean
                    html = (this.utils.isSelectAll()) ? this.clean.onPaste(html, false) : this.clean.onPaste(html);

                    html = this.core.setCallback('paste', html);

                    if (this.utils.isSelectAll()) {
                        this.insert.set(html, false);
                    } else {
                        this.insert.html(html, false);
                    }

                    this.utils.disableSelectAll();
                    this.rtePaste = false;

                    setTimeout($.proxy(this.clean.clearUnverified, this), 10);

                    // clean empty spans
                    setTimeout($.proxy(function() {
                        var spans = this.$editor.find('span');
                        $.each(spans, function(i, s) {
                            var html = s.innerHTML.replace(/\u200B/, '');
                            if (html === '' && s.attributes.length === 0)
                                $(s).remove();

                        });

                    }, this), 10);

                }
            };
        },
        placeholder: function() {
            return {
                enable: function() {
                    if (!this.placeholder.is())
                        return;

                    this.$editor.attr('placeholder', this.$element.attr('placeholder'));

                    this.placeholder.toggle();
                    this.$editor.on('keydown.redactor-placeholder', $.proxy(this.placeholder.toggle, this));
                },
                toggle: function() {
                    setTimeout($.proxy(function() {
                        var func = this.utils.isEmpty(this.$editor.html(), false) ? 'addClass' : 'removeClass';
                        this.$editor[func]('redactor-placeholder');

                    }, this), 5);
                },
                remove: function() {
                    this.$editor.removeClass('redactor-placeholder');
                },
                is: function() {
                    if (this.opts.placeholder) {
                        return this.$element.attr('placeholder', this.opts.placeholder);
                    } else {
                        return !(typeof this.$element.attr('placeholder') == 'undefined' || this.$element.attr('placeholder') === '');
                    }
                }
            };
        },
        progress: function() {
            return {
                show: function() {
                    $(document.body).append($('<div id="redactor-progress"><span></span></div>'));
                    $('#redactor-progress').fadeIn();
                },
                hide: function() {
                    $('#redactor-progress').fadeOut(1500, function() {
                        $(this).remove();
                    });
                }

            };
        },
        selection: function() {
            return {
                get: function() {
                    this.sel = document.getSelection();

                    if (document.getSelection && this.sel.getRangeAt && this.sel.rangeCount) {
                        this.range = this.sel.getRangeAt(0);
                    } else {
                        this.range = document.createRange();
                    }
                },
                addRange: function() {
                    try {
                        this.sel.removeAllRanges();
                    } catch (e) {}

                    this.sel.addRange(this.range);
                },
                getCurrent: function() {
                    var el = false;

                    this.selection.get();

                    if (this.sel && this.sel.rangeCount > 0) {
                        el = this.sel.getRangeAt(0).startContainer;
                    }

                    return this.utils.isRedactorParent(el);
                },
                getParent: function(elem) {
                    elem = elem || this.selection.getCurrent();
                    if (elem) {
                        return this.utils.isRedactorParent($(elem).parent()[0]);
                    }

                    return false;
                },
                getPrev: function() {
                    return window.getSelection().anchorNode.previousSibling;
                },
                getNext: function() {
                    return window.getSelection().anchorNode.nextSibling;
                },
                getBlock: function(node) {
                    node = node || this.selection.getCurrent();

                    while (node) {
                        if (this.utils.isBlockTag(node.tagName)) {
                            return ($(node).hasClass('redactor-editor')) ? false : node;
                        }

                        node = node.parentNode;
                    }

                    return false;
                },
                getInlines: function(nodes, tags) {
                    this.selection.get();

                    if (this.range && this.range.collapsed) {
                        return false;
                    }

                    var inlines = [];
                    nodes = (typeof nodes == 'undefined' || nodes === false) ? this.selection.getNodes() : nodes;
                    var inlineTags = this.opts.inlineTags;
                    inlineTags.push('span');

                    if (typeof tags !== 'undefined') {
                        for (var i = 0; i < tags.length; i++) {
                            inlineTags.push(tags[i]);
                        }
                    }

                    $.each(nodes, $.proxy(function(i, node) {
                        if ($.inArray(node.tagName.toLowerCase(), inlineTags) != -1) {
                            inlines.push(node);
                        }

                    }, this));

                    return (inlines.length === 0) ? false : inlines;
                },
                getInlinesTags: function(tags) {
                    this.selection.get();

                    if (this.range && this.range.collapsed) {
                        return false;
                    }

                    var inlines = [];
                    var nodes = this.selection.getNodes();
                    $.each(nodes, $.proxy(function(i, node) {
                        if ($.inArray(node.tagName.toLowerCase(), tags) != -1) {
                            inlines.push(node);
                        }

                    }, this));

                    return (inlines.length === 0) ? false : inlines;
                },
                getBlocks: function(nodes) {
                    this.selection.get();

                    if (this.range && this.range.collapsed) {
                        return [this.selection.getBlock()];
                    }

                    var blocks = [];
                    nodes = (typeof nodes == 'undefined') ? this.selection.getNodes() : nodes;
                    $.each(nodes, $.proxy(function(i, node) {
                        if (this.utils.isBlock(node)) {
                            this.selection.lastBlock = node;
                            blocks.push(node);
                        }

                    }, this));

                    return (blocks.length === 0) ? [this.selection.getBlock()] : blocks;
                },
                getLastBlock: function() {
                    return this.selection.lastBlock;
                },
                getNodes: function() {
                    this.selection.get();

                    var startNode = this.selection.getNodesMarker(1);
                    var endNode = this.selection.getNodesMarker(2);

                    if (this.range.collapsed === false) {
                        if (window.getSelection) {
                            var sel = window.getSelection();
                            if (sel.rangeCount > 0) {

                                var range = sel.getRangeAt(0);
                                var startPointNode = range.startContainer
                                  , startOffset = range.startOffset;

                                var boundaryRange = range.cloneRange();
                                boundaryRange.collapse(false);
                                boundaryRange.insertNode(endNode);
                                boundaryRange.setStart(startPointNode, startOffset);
                                boundaryRange.collapse(true);
                                boundaryRange.insertNode(startNode);

                                // Reselect the original text
                                range.setStartAfter(startNode);
                                range.setEndBefore(endNode);
                                sel.removeAllRanges();
                                sel.addRange(range);
                            }
                        }
                    } else {
                        this.selection.setNodesMarker(this.range, startNode, true);
                        endNode = startNode;
                    }

                    var nodes = [];
                    var counter = 0;

                    var self = this;
                    this.$editor.find('*').each(function() {
                        if (this == startNode) {
                            var parent = $(this).parent();
                            if (parent.length !== 0 && parent[0].tagName != 'BODY' && self.utils.isRedactorParent(parent[0])) {
                                nodes.push(parent[0]);
                            }

                            nodes.push(this);
                            counter = 1;
                        } else {
                            if (counter > 0) {
                                nodes.push(this);
                                counter = counter + 1;
                            }
                        }

                        if (this == endNode) {
                            return false;
                        }

                    });

                    var finalNodes = [];
                    var len = nodes.length;
                    for (var i = 0; i < len; i++) {
                        if (nodes[i].id != 'nodes-marker-1' && nodes[i].id != 'nodes-marker-2') {
                            finalNodes.push(nodes[i]);
                        }
                    }

                    this.selection.removeNodesMarkers();

                    return finalNodes;

                },
                getNodesMarker: function(num) {
                    return $('<span id="nodes-marker-' + num + '" class="redactor-nodes-marker" data-verified="redactor">' + this.opts.invisibleSpace + '</span>')[0];
                },
                setNodesMarker: function(range, node, type) {
                    var range = range.cloneRange();

                    try {
                        range.collapse(type);
                        range.insertNode(node);
                    } catch (e) {}
                },
                removeNodesMarkers: function() {
                    $(document).find('span.redactor-nodes-marker').remove();
                    this.$editor.find('span.redactor-nodes-marker').remove();
                },
                fromPoint: function(start, end) {
                    this.caret.setOffset(start, end);
                },
                wrap: function(tag) {
                    this.selection.get();

                    if (this.range.collapsed)
                        return false;

                    var wrapper = document.createElement(tag);
                    wrapper.appendChild(this.range.extractContents());
                    this.range.insertNode(wrapper);

                    return wrapper;
                },
                selectElement: function(node) {
                    if (this.utils.browser('mozilla')) {
                        node = node[0] || node;

                        var range = document.createRange();
                        range.selectNodeContents(node);
                    } else {
                        this.caret.set(node, 0, node, 1);
                    }
                },
                selectAll: function() {
                    this.selection.get();
                    this.range.selectNodeContents(this.$editor[0]);
                    this.selection.addRange();
                },
                remove: function() {
                    this.selection.get();
                    this.sel.removeAllRanges();
                },
                save: function() {
                    this.selection.createMarkers();
                },
                createMarkers: function() {
                    this.selection.get();

                    var node1 = this.selection.getMarker(1);

                    this.selection.setMarker(this.range, node1, true);
                    if (this.range.collapsed === false) {
                        var node2 = this.selection.getMarker(2);
                        this.selection.setMarker(this.range, node2, false);
                    }

                    this.savedSel = this.$editor.html();
                },
                getMarker: function(num) {
                    if (typeof num == 'undefined')
                        num = 1;

                    return $('<span id="selection-marker-' + num + '" class="redactor-selection-marker"  data-verified="redactor">' + this.opts.invisibleSpace + '</span>')[0];
                },
                getMarkerAsHtml: function(num) {
                    return this.utils.getOuterHtml(this.selection.getMarker(num));
                },
                setMarker: function(range, node, type) {
                    range = range.cloneRange();

                    try {
                        range.collapse(type);
                        range.insertNode(node);

                    } catch (e) {
                        this.focus.setStart();
                    }

                },
                restore: function() {
                    var node1 = this.$editor.find('span#selection-marker-1');
                    var node2 = this.$editor.find('span#selection-marker-2');

                    if (this.utils.browser('mozilla')) {
                        this.$editor.focus();
                    }

                    if (node1.length !== 0 && node2.length !== 0) {
                        this.caret.set(node1, 0, node2, 0);
                    } else if (node1.length !== 0) {
                        this.caret.set(node1, 0, node1, 0);
                    } else {
                        this.$editor.focus();
                    }

                    this.selection.removeMarkers();
                    this.savedSel = false;

                },
                removeMarkers: function() {
                    this.$editor.find('span.redactor-selection-marker').each(function(i, s) {
                        var text = $(s).text().replace(/\u200B/g, '');
                        if (text === '')
                            $(s).remove();
                        else
                            $(s).replaceWith(function() {
                                return $(this).contents();
                            });
                    });
                },
                getText: function() {
                    this.selection.get();

                    return this.sel.toString();
                },
                getHtml: function() {
                    var html = '';

                    this.selection.get();
                    if (this.sel.rangeCount) {
                        var container = document.createElement('div');
                        var len = this.sel.rangeCount;
                        for (var i = 0; i < len; ++i) {
                            container.appendChild(this.sel.getRangeAt(i).cloneContents());
                        }

                        html = container.innerHTML;
                    }

                    return this.clean.onSync(html);
                },
                replaceSelection: function(html) {
                    this.selection.get();
                    this.range.deleteContents();
                    var div = document.createElement("div");
                    div.innerHTML = html;
                    var frag = document.createDocumentFragment(), child;
                    while ((child = div.firstChild)) {
                        frag.appendChild(child);
                    }

                    this.range.insertNode(frag);
                },
                replaceWithHtml: function(html) {
                    html = this.selection.getMarkerAsHtml(1) + html + this.selection.getMarkerAsHtml(2);

                    this.selection.get();

                    if (window.getSelection && window.getSelection().getRangeAt) {
                        this.selection.replaceSelection(html);
                    } else if (document.selection && document.selection.createRange) {
                        this.range.pasteHTML(html);
                    }

                    this.selection.restore();
                    this.code.sync();
                }
            };
        },
        shortcuts: function() {
            return {
                init: function(e, key) {
                    // disable browser's hot keys for bold and italic
                    if (!this.opts.shortcuts) {
                        if ((e.ctrlKey || e.metaKey) && (key === 66 || key === 73))
                            e.preventDefault();
                        return false;
                    }

                    $.each(this.opts.shortcuts, $.proxy(function(str, command) {
                        var keys = str.split(',');
                        var len = keys.length;
                        for (var i = 0; i < len; i++) {
                            if (typeof keys[i] === 'string') {
                                this.shortcuts.handler(e, $.trim(keys[i]), $.proxy(function() {
                                    var func;
                                    if (command.func.search(/\./) != '-1') {
                                        func = command.func.split('.');
                                        if (typeof this[func[0]] != 'undefined') {
                                            this[func[0]][func[1]].apply(this, command.params);
                                        }
                                    } else {
                                        this[command.func].apply(this, command.params);
                                    }

                                }, this));
                            }

                        }

                    }, this));
                },
                handler: function(e, keys, origHandler) {
                    // based on https://github.com/jeresig/jquery.hotkeys
                    var hotkeysSpecialKeys = {
                        8: "backspace",
                        9: "tab",
                        10: "return",
                        13: "return",
                        16: "shift",
                        17: "ctrl",
                        18: "alt",
                        19: "pause",
                        20: "capslock",
                        27: "esc",
                        32: "space",
                        33: "pageup",
                        34: "pagedown",
                        35: "end",
                        36: "home",
                        37: "left",
                        38: "up",
                        39: "right",
                        40: "down",
                        45: "insert",
                        46: "del",
                        59: ";",
                        61: "=",
                        96: "0",
                        97: "1",
                        98: "2",
                        99: "3",
                        100: "4",
                        101: "5",
                        102: "6",
                        103: "7",
                        104: "8",
                        105: "9",
                        106: "*",
                        107: "+",
                        109: "-",
                        110: ".",
                        111: "/",
                        112: "f1",
                        113: "f2",
                        114: "f3",
                        115: "f4",
                        116: "f5",
                        117: "f6",
                        118: "f7",
                        119: "f8",
                        120: "f9",
                        121: "f10",
                        122: "f11",
                        123: "f12",
                        144: "numlock",
                        145: "scroll",
                        173: "-",
                        186: ";",
                        187: "=",
                        188: ",",
                        189: "-",
                        190: ".",
                        191: "/",
                        192: "`",
                        219: "[",
                        220: "\\",
                        221: "]",
                        222: "'"
                    };

                    var hotkeysShiftNums = {
                        "`": "~",
                        "1": "!",
                        "2": "@",
                        "3": "#",
                        "4": "$",
                        "5": "%",
                        "6": "^",
                        "7": "&",
                        "8": "*",
                        "9": "(",
                        "0": ")",
                        "-": "_",
                        "=": "+",
                        ";": ": ",
                        "'": "\"",
                        ",": "<",
                        ".": ">",
                        "/": "?",
                        "\\": "|"
                    };

                    keys = keys.toLowerCase().split(" ");
                    var special = hotkeysSpecialKeys[e.keyCode]
                      , character = String.fromCharCode(e.which).toLowerCase()
                      , modif = ""
                      , possible = {};

                    $.each(["alt", "ctrl", "meta", "shift"], function(index, specialKey) {
                        if (e[specialKey + 'Key'] && special !== specialKey) {
                            modif += specialKey + '+';
                        }
                    });

                    if (special)
                        possible[modif + special] = true;
                    if (character) {
                        possible[modif + character] = true;
                        possible[modif + hotkeysShiftNums[character]] = true;

                        // "$" can be triggered as "Shift+4" or "Shift+$" or just "$"
                        if (modif === "shift+") {
                            possible[hotkeysShiftNums[character]] = true;
                        }
                    }

                    for (var i = 0, len = keys.length; i < len; i++) {
                        if (possible[keys[i]]) {
                            e.preventDefault();
                            return origHandler.apply(this, arguments);
                        }
                    }
                }
            };
        },
        tabifier: function() {
            return {
                get: function(code) {
                    if (!this.opts.tabifier)
                        return code;

                    // clean setup
                    var ownLine = ['area', 'body', 'head', 'hr', 'i?frame', 'link', 'meta', 'noscript', 'style', 'script', 'table', 'tbody', 'thead', 'tfoot'];
                    var contOwnLine = ['li', 'dt', 'dt', 'h[1-6]', 'option', 'script'];
                    var newLevel = ['p', 'blockquote', 'div', 'dl', 'fieldset', 'form', 'frameset', 'map', 'ol', 'pre', 'select', 'td', 'th', 'tr', 'ul'];

                    this.tabifier.lineBefore = new RegExp('^<(/?' + ownLine.join('|/?') + '|' + contOwnLine.join('|') + ')[ >]');
                    this.tabifier.lineAfter = new RegExp('^<(br|/?' + ownLine.join('|/?') + '|/' + contOwnLine.join('|/') + ')[ >]');
                    this.tabifier.newLevel = new RegExp('^</?(' + newLevel.join('|') + ')[ >]');

                    var i = 0
                      , codeLength = code.length
                      , point = 0
                      , start = null
                      , end = null
                      , tag = ''
                      , out = ''
                      , cont = '';

                    this.tabifier.cleanlevel = 0;

                    for (; i < codeLength; i++) {
                        point = i;

                        // if no more tags, copy and exit
                        if (-1 == code.substr(i).indexOf('<')) {
                            out += code.substr(i);

                            return this.tabifier.finish(out);
                        }

                        // copy verbatim until a tag
                        while (point < codeLength && code.charAt(point) != '<') {
                            point++;
                        }

                        if (i != point) {
                            cont = code.substr(i, point - i);
                            if (!cont.match(/^\s{2,}$/g)) {
                                if ('\n' == out.charAt(out.length - 1))
                                    out += this.tabifier.getTabs();
                                else if ('\n' == cont.charAt(0)) {
                                    out += '\n' + this.tabifier.getTabs();
                                    cont = cont.replace(/^\s+/, '');
                                }

                                out += cont;
                            }

                            if (cont.match(/\n/))
                                out += '\n' + this.tabifier.getTabs();
                        }

                        start = point;

                        // find the end of the tag
                        while (point < codeLength && '>' != code.charAt(point)) {
                            point++;
                        }

                        tag = code.substr(start, point - start);
                        i = point;

                        var t;

                        if ('!--' == tag.substr(1, 3)) {
                            if (!tag.match(/--$/)) {
                                while ('-->' != code.substr(point, 3)) {
                                    point++;
                                }
                                point += 2;
                                tag = code.substr(start, point - start);
                                i = point;
                            }

                            if ('\n' != out.charAt(out.length - 1))
                                out += '\n';

                            out += this.tabifier.getTabs();
                            out += tag + '>\n';
                        } else if ('!' == tag[1]) {
                            out = this.tabifier.placeTag(tag + '>', out);
                        } else if ('?' == tag[1]) {
                            out += tag + '>\n';
                        } else if (t = tag.match(/^<(script|style|pre)/i)) {
                            t[1] = t[1].toLowerCase();
                            tag = this.tabifier.cleanTag(tag);
                            out = this.tabifier.placeTag(tag, out);
                            end = String(code.substr(i + 1)).toLowerCase().indexOf('</' + t[1]);

                            if (end) {
                                cont = code.substr(i + 1, end);
                                i += end;
                                out += cont;
                            }
                        } else {
                            tag = this.tabifier.cleanTag(tag);
                            out = this.tabifier.placeTag(tag, out);
                        }
                    }

                    return this.tabifier.finish(out);
                },
                getTabs: function() {
                    var s = '';
                    for (var j = 0; j < this.tabifier.cleanlevel; j++) {
                        s += '\t';
                    }

                    return s;
                },
                finish: function(code) {
                    code = code.replace(/\n\s*\n/g, '\n');
                    code = code.replace(/^[\s\n]*/, '');
                    code = code.replace(/[\s\n]*$/, '');
                    code = code.replace(/<script(.*?)>\n<\/script>/gi, '<script$1></script>');

                    this.tabifier.cleanlevel = 0;

                    return code;
                },
                cleanTag: function(tag) {
                    var tagout = '';
                    tag = tag.replace(/\n/g, ' ');
                    tag = tag.replace(/\s{2,}/g, ' ');
                    tag = tag.replace(/^\s+|\s+$/g, ' ');

                    var suffix = '';
                    if (tag.match(/\/$/)) {
                        suffix = '/';
                        tag = tag.replace(/\/+$/, '');
                    }

                    var m;
                    while (m = /\s*([^= ]+)(?:=((['"']).*?\3|[^ ]+))?/.exec(tag)) {
                        if (m[2])
                            tagout += m[1].toLowerCase() + '=' + m[2];
                        else if (m[1])
                            tagout += m[1].toLowerCase();

                        tagout += ' ';
                        tag = tag.substr(m[0].length);
                    }

                    return tagout.replace(/\s*$/, '') + suffix + '>';
                },
                placeTag: function(tag, out) {
                    var nl = tag.match(this.tabifier.newLevel);

                    if (tag.match(this.tabifier.lineBefore) || nl) {
                        out = out.replace(/\s*$/, '');
                        out += '\n';
                    }

                    if (nl && '/' == tag.charAt(1))
                        this.tabifier.cleanlevel--;
                    if ('\n' == out.charAt(out.length - 1))
                        out += this.tabifier.getTabs();
                    if (nl && '/' != tag.charAt(1))
                        this.tabifier.cleanlevel++;

                    out += tag;

                    if (tag.match(this.tabifier.lineAfter) || tag.match(this.tabifier.newLevel)) {
                        out = out.replace(/ *$/, '');
                        //out += '\n';
                    }

                    return out;
                }
            };
        },
        tidy: function() {
            return {
                setupAllowed: function() {
                    var index = $.inArray('span', this.opts.removeEmpty);
                    if (index !== -1) {
                        this.opts.removeEmpty.splice(index, 1);
                    }

                    if (this.opts.allowedTags)
                        this.opts.deniedTags = false;
                    if (this.opts.allowedAttr)
                        this.opts.removeAttr = false;

                    if (this.opts.linebreaks)
                        return;

                    var tags = ['p', 'section'];
                    if (this.opts.allowedTags)
                        this.tidy.addToAllowed(tags);
                    if (this.opts.deniedTags)
                        this.tidy.removeFromDenied(tags);

                },
                addToAllowed: function(tags) {
                    var len = tags.length;
                    for (var i = 0; i < len; i++) {
                        if ($.inArray(tags[i], this.opts.allowedTags) == -1) {
                            this.opts.allowedTags.push(tags[i]);
                        }
                    }
                },
                removeFromDenied: function(tags) {
                    var len = tags.length;
                    for (var i = 0; i < len; i++) {
                        var pos = $.inArray(tags[i], this.opts.deniedTags);
                        if (pos != -1) {
                            this.opts.deniedTags.splice(pos, 1);
                        }
                    }
                },
                load: function(html, options) {
                    this.tidy.settings = {
                        deniedTags: this.opts.deniedTags,
                        allowedTags: this.opts.allowedTags,
                        removeComments: this.opts.removeComments,
                        replaceTags: this.opts.replaceTags,
                        replaceStyles: this.opts.replaceStyles,
                        removeDataAttr: this.opts.removeDataAttr,
                        removeAttr: this.opts.removeAttr,
                        allowedAttr: this.opts.allowedAttr,
                        removeWithoutAttr: this.opts.removeWithoutAttr,
                        removeEmpty: this.opts.removeEmpty
                    };

                    $.extend(this.tidy.settings, options);

                    html = this.tidy.removeComments(html);

                    // create container
                    this.tidy.$div = $('<div />').append(html);

                    // clean
                    this.tidy.replaceTags();
                    this.tidy.replaceStyles();
                    this.tidy.removeTags();

                    this.tidy.removeAttr();
                    this.tidy.removeEmpty();
                    this.tidy.removeParagraphsInLists();
                    this.tidy.removeDataAttr();
                    // this.tidy.removeWithoutAttr();

                    html = this.tidy.$div.html();
                    this.tidy.$div.remove();

                    return html;
                },
                removeComments: function(html) {
                    if (!this.tidy.settings.removeComments)
                        return html;

                    return html.replace(/<!--[\s\S]*?-->/gi, '');
                },
                replaceTags: function(html) {
                    if (!this.tidy.settings.replaceTags)
                        return html;

                    var len = this.tidy.settings.replaceTags.length;
                    var replacement = []
                      , rTags = [];
                    for (var i = 0; i < len; i++) {
                        rTags.push(this.tidy.settings.replaceTags[i][1]);
                        replacement.push(this.tidy.settings.replaceTags[i][0]);
                    }

                    $.each(replacement, $.proxy(function(key, value) {
                        this.tidy.$div.find(value).replaceWith(function() {
                            return $("<" + rTags[key] + " />", {
                                html: $(this).html()
                            });
                        });
                    }, this));
                },
                replaceStyles: function() {
                    if (!this.tidy.settings.replaceStyles)
                        return;

                    var len = this.tidy.settings.replaceStyles.length;
                    this.tidy.$div.find('span').each($.proxy(function(n, s) {
                        var $el = $(s);
                        var style = $el.attr('style');
                        for (var i = 0; i < len; i++) {
                            if (style && style.match(new RegExp('^' + this.tidy.settings.replaceStyles[i][0],'i'))) {
                                var tagName = this.tidy.settings.replaceStyles[i][1];
                                $el.replaceWith(function() {
                                    var tag = document.createElement(tagName);
                                    return $(tag).append($(this).contents());
                                });
                            }
                        }

                    }, this));

                },
                removeTags: function() {
                    if (!this.tidy.settings.deniedTags && this.tidy.settings.allowedTags) {
                        this.tidy.$div.find('*').not(this.tidy.settings.allowedTags.join(',')).each(function(i, s) {
                            if (s.innerHTML === '')
                                $(s).remove();
                            else
                                $(s).contents().unwrap();
                        });
                    }

                    if (this.tidy.settings.deniedTags) {
                        this.tidy.$div.find(this.tidy.settings.deniedTags.join(',')).each(function(i, s) {
                            if ($(s).hasClass('redactor-script-tag') || $(s).hasClass('redactor-selection-marker'))
                                return;

                            if (s.innerHTML === '')
                                $(s).remove();
                            else
                                $(s).contents().unwrap();
                        });
                    }
                },
                removeAttr: function() {
                    var len;
                    if (!this.tidy.settings.removeAttr && this.tidy.settings.allowedAttr) {

                        var allowedAttrTags = []
                          , allowedAttrData = [];
                        len = this.tidy.settings.allowedAttr.length;
                        for (var i = 0; i < len; i++) {
                            allowedAttrTags.push(this.tidy.settings.allowedAttr[i][0]);
                            allowedAttrData.push(this.tidy.settings.allowedAttr[i][1]);
                        }

                        this.tidy.$div.find('*').each($.proxy(function(n, s) {
                            var $el = $(s);
                            var pos = $.inArray($el[0].tagName.toLowerCase(), allowedAttrTags);
                            var attributesRemove = this.tidy.removeAttrGetRemoves(pos, allowedAttrData, $el);

                            if (attributesRemove) {
                                $.each(attributesRemove, function(z, f) {
                                    $el.removeAttr(f);
                                });
                            }
                        }, this));
                    }

                    if (this.tidy.settings.removeAttr) {
                        len = this.tidy.settings.removeAttr.length;
                        for (var i = 0; i < len; i++) {
                            var attrs = this.tidy.settings.removeAttr[i][1];
                            if ($.isArray(attrs))
                                attrs = attrs.join(' ');

                            this.tidy.$div.find(this.tidy.settings.removeAttr[i][0]).removeAttr(attrs);
                        }
                    }

                },
                removeAttrGetRemoves: function(pos, allowed, $el) {
                    var attributesRemove = [];

                    // remove all attrs
                    if (pos == -1) {
                        $.each($el[0].attributes, function(i, item) {
                            attributesRemove.push(item.name);
                        });

                    }// allow all attrs
                    else if (allowed[pos] == '*') {
                        attributesRemove = [];
                    }// allow specific attrs
                    else {
                        $.each($el[0].attributes, function(i, item) {
                            if ($.isArray(allowed[pos])) {
                                if ($.inArray(item.name, allowed[pos]) == -1) {
                                    attributesRemove.push(item.name);
                                }
                            } else if (allowed[pos] != item.name) {
                                attributesRemove.push(item.name);
                            }

                        });
                    }

                    return attributesRemove;
                },
                removeAttrs: function(el, regex) {
                    regex = new RegExp(regex,"g");
                    return el.each(function() {
                        var self = $(this);
                        var len = this.attributes.length - 1;
                        for (var i = len; i >= 0; i--) {
                            var item = this.attributes[i];
                            if (item && item.specified && item.name.search(regex) >= 0) {
                                self.removeAttr(item.name);
                            }
                        }
                    });
                },
                removeEmpty: function() {
                    if (!this.tidy.settings.removeEmpty)
                        return;

                    this.tidy.$div.find(this.tidy.settings.removeEmpty.join(',')).each(function() {
                        var $el = $(this);
                        var text = $el.text();
                        text = text.replace(/\u200B/g, '');
                        text = text.replace(/&nbsp;/gi, '');
                        text = text.replace(/\s/g, '');

                        if (text === '' && $el.children().length === 0) {
                            $el.remove();
                        }
                    });
                },
                removeParagraphsInLists: function() {
                    this.tidy.$div.find('li p').contents().unwrap();
                },
                removeDataAttr: function() {
                    if (!this.tidy.settings.removeDataAttr)
                        return;

                    var tags = this.tidy.settings.removeDataAttr;
                    if ($.isArray(this.tidy.settings.removeDataAttr))
                        tags = this.tidy.settings.removeDataAttr.join(',');

                    this.tidy.removeAttrs(this.tidy.$div.find(tags), '^(data-)');

                },
                removeWithoutAttr: function() {
                    if (!this.tidy.settings.removeWithoutAttr)
                        return;

                    this.tidy.$div.find(this.tidy.settings.removeWithoutAttr.join(',')).each(function() {
                        if (this.attributes.length === 0) {
                            $(this).contents().unwrap();
                        }
                    });
                }
            };
        },
        toolbar: function() {
            return {
                init: function() {
                    return {
                        html: {
                            title: this.lang.get('html'),
                            func: 'code.toggle'
                        },
                        formatting: {
                            title: this.lang.get('formatting'),
                            dropdown: {
                                p: {
                                    title: this.lang.get('paragraph'),
                                    func: 'block.format'
                                },
                                blockquote: {
                                    title: this.lang.get('quote'),
                                    func: 'block.format'
                                },
                                pre: {
                                    title: this.lang.get('code'),
                                    func: 'block.format'
                                },
                                h1: {
                                    title: this.lang.get('header1'),
                                    func: 'block.format'
                                },
                                h2: {
                                    title: this.lang.get('header2'),
                                    func: 'block.format'
                                },
                                h3: {
                                    title: this.lang.get('header3'),
                                    func: 'block.format'
                                },
                                h4: {
                                    title: this.lang.get('header4'),
                                    func: 'block.format'
                                },
                                h5: {
                                    title: this.lang.get('header5'),
                                    func: 'block.format'
                                }
                            }
                        },
                        bold: {
                            title: this.lang.get('bold'),
                            func: 'inline.format'
                        },
                        italic: {
                            title: this.lang.get('italic'),
                            func: 'inline.format'
                        },
                        deleted: {
                            title: this.lang.get('deleted'),
                            func: 'inline.format'
                        },
                        underline: {
                            title: this.lang.get('underline'),
                            func: 'inline.format'
                        },
                        unorderedlist: {
                            title: '&bull; ' + this.lang.get('unorderedlist'),
                            func: 'list.toggle'
                        },
                        orderedlist: {
                            title: '1. ' + this.lang.get('orderedlist'),
                            func: 'list.toggle'
                        },
                        outdent: {
                            title: '< ' + this.lang.get('outdent'),
                            func: 'indent.decrease'
                        },
                        indent: {
                            title: '> ' + this.lang.get('indent'),
                            func: 'indent.increase'
                        },
                        image: {
                            title: this.lang.get('image'),
                            func: 'image.show'
                        },
                        file: {
                            title: this.lang.get('file'),
                            func: 'file.show'
                        },
                        link: {
                            title: this.lang.get('link'),
                            dropdown: {
                                link: {
                                    title: this.lang.get('link_insert'),
                                    func: 'link.show',
                                    observe: {
                                        element: 'a',
                                        in: {
                                            title: this.lang.get('link_edit'),
                                        },
                                        out: {
                                            title: this.lang.get('link_insert')
                                        }
                                    }
                                },
                                unlink: {
                                    title: this.lang.get('unlink'),
                                    func: 'link.unlink',
                                    observe: {
                                        element: 'a',
                                        out: {
                                            attr: {
                                                'class': 'redactor-dropdown-link-inactive',
                                                'aria-disabled': true
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        alignment: {
                            title: this.lang.get('alignment'),
                            dropdown: {
                                left: {
                                    title: this.lang.get('align_left'),
                                    func: 'alignment.left'
                                },
                                center: {
                                    title: this.lang.get('align_center'),
                                    func: 'alignment.center'
                                },
                                right: {
                                    title: this.lang.get('align_right'),
                                    func: 'alignment.right'
                                },
                                justify: {
                                    title: this.lang.get('align_justify'),
                                    func: 'alignment.justify'
                                }
                            }
                        },
                        horizontalrule: {
                            title: this.lang.get('horizontalrule'),
                            func: 'line.insert'
                        }
                    };
                },
                build: function() {
                    this.toolbar.hideButtons();
                    this.toolbar.hideButtonsOnMobile();
                    this.toolbar.isButtonSourceNeeded();

                    if (this.opts.buttons.length === 0)
                        return;

                    this.$toolbar = this.toolbar.createContainer();

                    this.toolbar.setOverflow();
                    this.toolbar.append();
                    this.toolbar.setFormattingTags();
                    this.toolbar.loadButtons();
                    this.toolbar.setFixed();

                    // buttons response
                    if (this.opts.activeButtons) {
                        this.$editor.on('mouseup.redactor keyup.redactor focus.redactor', $.proxy(this.observe.toolbar, this));
                    }

                },
                createContainer: function() {
                    return $('<ul>').addClass('redactor-toolbar').attr({
                        'id': 'redactor-toolbar-' + this.uuid,
                        'role': 'toolbar'
                    });
                },
                setFormattingTags: function() {
                    $.each(this.opts.toolbar.formatting.dropdown, $.proxy(function(i, s) {
                        if ($.inArray(i, this.opts.formatting) == -1)
                            delete this.opts.toolbar.formatting.dropdown[i];
                    }, this));

                },
                loadButtons: function() {
                    $.each(this.opts.buttons, $.proxy(function(i, btnName) {
                        if (!this.opts.toolbar[btnName])
                            return;

                        if (btnName === 'file') {
                            if (this.opts.fileUpload === false)
                                return;
                            else if (!this.opts.fileUpload && this.opts.s3 === false)
                                return;
                        }

                        if (btnName === 'image') {
                            if (this.opts.imageUpload === false)
                                return;
                            else if (!this.opts.imageUpload && this.opts.s3 === false)
                                return;
                        }

                        var btnObject = this.opts.toolbar[btnName];
                        this.$toolbar.append($('<li>').append(this.button.build(btnName, btnObject)));

                    }, this));
                },
                append: function() {
                    if (this.opts.toolbarExternal) {
                        this.$toolbar.addClass('redactor-toolbar-external');
                        $(this.opts.toolbarExternal).html(this.$toolbar);
                    } else {
                        this.$box.prepend(this.$toolbar);
                    }
                },
                setFixed: function() {
                    if (!this.utils.isDesktop())
                        return;
                    if (this.opts.toolbarExternal)
                        return;
                    if (!this.opts.toolbarFixed)
                        return;

                    this.toolbar.observeScroll();
                    $(this.opts.toolbarFixedTarget).on('scroll.redactor.' + this.uuid, $.proxy(this.toolbar.observeScroll, this));

                },
                setOverflow: function() {
                    if (this.utils.isMobile() && this.opts.toolbarOverflow) {
                        this.$toolbar.addClass('redactor-toolbar-overflow');
                    }
                },
                isButtonSourceNeeded: function() {
                    if (this.opts.source)
                        return;

                    var index = this.opts.buttons.indexOf('html');
                    if (index !== -1) {
                        this.opts.buttons.splice(index, 1);
                    }
                },
                hideButtons: function() {
                    if (this.opts.buttonsHide.length === 0)
                        return;

                    $.each(this.opts.buttonsHide, $.proxy(function(i, s) {
                        var index = this.opts.buttons.indexOf(s);
                        this.opts.buttons.splice(index, 1);

                    }, this));
                },
                hideButtonsOnMobile: function() {
                    if (!this.utils.isMobile() || this.opts.buttonsHideOnMobile.length === 0)
                        return;

                    $.each(this.opts.buttonsHideOnMobile, $.proxy(function(i, s) {
                        var index = this.opts.buttons.indexOf(s);
                        this.opts.buttons.splice(index, 1);

                    }, this));
                },
                observeScroll: function() {
                    var scrollTop = $(this.opts.toolbarFixedTarget).scrollTop();
                    var boxTop = 1;

                    if (this.opts.toolbarFixedTarget === document) {
                        boxTop = this.$box.offset().top;
                    }

                    if ((scrollTop + this.opts.toolbarFixedTopOffset) > boxTop) {
                        this.toolbar.observeScrollEnable(scrollTop, boxTop);
                    } else {
                        this.toolbar.observeScrollDisable();
                    }
                },
                observeScrollEnable: function(scrollTop, boxTop) {
                    var top = this.opts.toolbarFixedTopOffset + scrollTop - boxTop;
                    var left = 0;
                    var end = boxTop + this.$box.height() - 32;
                    var width = this.$box.innerWidth();

                    this.$toolbar.addClass('toolbar-fixed-box');
                    this.$toolbar.css({
                        position: 'absolute',
                        width: width,
                        top: top + 'px',
                        left: left
                    });

                    if (scrollTop > end)
                        $('.redactor-dropdown-' + this.uuid + ':visible').hide();

                    this.toolbar.setDropdownsFixed();
                    this.$toolbar.css('visibility', (scrollTop < end) ? 'visible' : 'hidden');
                },
                observeScrollDisable: function() {
                    this.$toolbar.css({
                        position: 'relative',
                        width: 'auto',
                        top: 0,
                        left: 0,
                        visibility: 'visible'
                    });

                    this.toolbar.unsetDropdownsFixed();
                    this.$toolbar.removeClass('toolbar-fixed-box');
                },
                setDropdownsFixed: function() {
                    var top = this.$toolbar.innerHeight() + this.opts.toolbarFixedTopOffset;
                    var position = 'fixed';
                    if (this.opts.toolbarFixedTarget !== document) {
                        top = (this.$toolbar.innerHeight() + this.$toolbar.offset().top) + this.opts.toolbarFixedTopOffset;
                        position = 'absolute';
                    }

                    $('.redactor-dropdown-' + this.uuid).each(function() {
                        $(this).css({
                            position: position,
                            top: top + 'px'
                        });
                    });
                },
                unsetDropdownsFixed: function() {
                    var top = (this.$toolbar.innerHeight() + this.$toolbar.offset().top);
                    $('.redactor-dropdown-' + this.uuid).each(function() {
                        $(this).css({
                            position: 'absolute',
                            top: top + 'px'
                        });
                    });
                }
            };
        },
        upload: function() {
            return {
                init: function(id, url, callback) {
                    this.upload.direct = false;
                    this.upload.callback = callback;
                    this.upload.url = url;
                    this.upload.$el = $(id);
                    this.upload.$droparea = $('<div id="redactor-droparea" />');

                    this.upload.$placeholdler = $('<div id="redactor-droparea-placeholder" />').text(this.lang.get('upload_label'));
                    this.upload.$input = $('<input type="file" name="file" />');

                    this.upload.$placeholdler.append(this.upload.$input);
                    this.upload.$droparea.append(this.upload.$placeholdler);
                    this.upload.$el.append(this.upload.$droparea);

                    this.upload.$droparea.off('redactor.upload');
                    this.upload.$input.off('redactor.upload');

                    this.upload.$droparea.on('dragover.redactor.upload', $.proxy(this.upload.onDrag, this));
                    this.upload.$droparea.on('dragleave.redactor.upload', $.proxy(this.upload.onDragLeave, this));

                    // change
                    this.upload.$input.on('change.redactor.upload', $.proxy(function(e) {
                        e = e.originalEvent || e;
                        this.upload.traverseFile(this.upload.$input[0].files[0], e);
                    }, this));

                    // drop
                    this.upload.$droparea.on('drop.redactor.upload', $.proxy(function(e) {
                        e.preventDefault();

                        this.upload.$droparea.removeClass('drag-hover').addClass('drag-drop');
                        this.upload.onDrop(e);

                    }, this));
                },
                directUpload: function(file, e) {
                    this.upload.direct = true;
                    this.upload.traverseFile(file, e);
                },
                onDrop: function(e) {
                    e = e.originalEvent || e;
                    var files = e.dataTransfer.files;

                    this.upload.traverseFile(files[0], e);
                },
                traverseFile: function(file, e) {
                    if (this.opts.s3) {
                        this.upload.setConfig(file);
                        this.upload.s3uploadFile(file);
                        return;
                    }

                    var formData = !!window.FormData ? new FormData() : null;
                    if (window.FormData) {
                        this.upload.setConfig(file);

                        var name = (this.upload.type == 'image') ? this.opts.imageUploadParam : this.opts.fileUploadParam;
                        formData.append(name, file);
                    }

                    this.progress.show();
                    this.core.setCallback('uploadStart', e, formData);
                    this.upload.sendData(formData, e);
                },
                setConfig: function(file) {
                    this.upload.getType(file);

                    if (this.upload.direct) {
                        this.upload.url = (this.upload.type == 'image') ? this.opts.imageUpload : this.opts.fileUpload;
                        this.upload.callback = (this.upload.type == 'image') ? this.image.insert : this.file.insert;
                    }
                },
                getType: function(file) {
                    this.upload.type = 'image';
                    if (this.opts.imageTypes.indexOf(file.type) == -1) {
                        this.upload.type = 'file';
                    }
                },
                getHiddenFields: function(obj, fd) {
                    if (obj === false || typeof obj !== 'object')
                        return fd;

                    $.each(obj, $.proxy(function(k, v) {
                        if (v !== null && v.toString().indexOf('#') === 0)
                            v = $(v).val();
                        fd.append(k, v);

                    }, this));

                    return fd;

                },
                sendData: function(formData, e) {
                    // append hidden fields
                    if (this.upload.type == 'image') {
                        formData = this.upload.getHiddenFields(this.opts.uploadImageFields, formData);
                        formData = this.upload.getHiddenFields(this.upload.imageFields, formData);
                    } else {
                        formData = this.upload.getHiddenFields(this.opts.uploadFileFields, formData);
                        formData = this.upload.getHiddenFields(this.upload.fileFields, formData);
                    }

                    var xhr = new XMLHttpRequest();
                    xhr.open('POST', this.upload.url);
                    xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");

                    // complete
                    xhr.onreadystatechange = $.proxy(function() {
                        if (xhr.readyState == 4) {
                            var data = xhr.responseText;

                            data = data.replace(/^\[/, '');
                            data = data.replace(/\]$/, '');

                            var json;
                            try {
                                json = (typeof data === 'string' ? $.parseJSON(data) : data);
                            } catch (err) {
                                json = {
                                    error: true
                                };
                            }

                            this.progress.hide();

                            if (!this.upload.direct) {
                                this.upload.$droparea.removeClass('drag-drop');
                            }

                            this.upload.callback(json, this.upload.direct, e);
                        }
                    }, this);

                    /*
					 xhr.upload.onprogress = $.proxy(function(e)
					 {
					 if (e.lengthComputable)
					 {
					 var complete = (e.loaded / e.total * 100 | 0);
					 //progress.value = progress.innerHTML = complete;
					 }

					 }, this);
					 */

                    xhr.send(formData);
                },
                onDrag: function(e) {
                    e.preventDefault();
                    this.upload.$droparea.addClass('drag-hover');
                },
                onDragLeave: function(e) {
                    e.preventDefault();
                    this.upload.$droparea.removeClass('drag-hover');
                },
                clearImageFields: function() {
                    this.upload.imageFields = {};
                },
                addImageFields: function(name, value) {
                    this.upload.imageFields[name] = value;
                },
                removeImageFields: function(name) {
                    delete this.upload.imageFields[name];
                },
                clearFileFields: function() {
                    this.upload.fileFields = {};
                },
                addFileFields: function(name, value) {
                    this.upload.fileFields[name] = value;
                },
                removeFileFields: function(name) {
                    delete this.upload.fileFields[name];
                },

                // S3
                s3uploadFile: function(file) {
                    this.upload.s3executeOnSignedUrl(file, $.proxy(function(signedURL) {
                        this.upload.s3uploadToS3(file, signedURL);
                    }, this));
                },
                s3executeOnSignedUrl: function(file, callback) {
                    var xhr = new XMLHttpRequest();
                    var mark = (this.opts.s3.search(/\?/) !== '-1') ? '?' : '&';

                    xhr.open('GET', this.opts.s3 + mark + 'name=' + file.name + '&type=' + file.type, true);

                    // Hack to pass bytes through unprocessed.
                    if (xhr.overrideMimeType)
                        xhr.overrideMimeType('text/plain; charset=x-user-defined');

                    var that = this;
                    xhr.onreadystatechange = function(e) {
                        if (this.readyState == 4 && this.status == 200) {
                            that.progress.show();
                            callback(decodeURIComponent(this.responseText));
                        } else if (this.readyState == 4 && this.status != 200) {//setProgress(0, 'Could not contact signing script. Status = ' + this.status);
                        }
                    }
                    ;

                    xhr.send();
                },
                s3createCORSRequest: function(method, url) {
                    var xhr = new XMLHttpRequest();
                    if ("withCredentials"in xhr) {
                        xhr.open(method, url, true);
                    } else if (typeof XDomainRequest != "undefined") {
                        xhr = new XDomainRequest();
                        xhr.open(method, url);
                    } else {
                        xhr = null;
                    }

                    return xhr;
                },
                s3uploadToS3: function(file, url) {
                    var xhr = this.upload.s3createCORSRequest('PUT', url);
                    if (!xhr) {//setProgress(0, 'CORS not supported');
                    } else {
                        xhr.onload = $.proxy(function() {
                            if (xhr.status == 200) {
                                //setProgress(100, 'Upload completed.');

                                this.progress.hide();

                                var s3file = url.split('?');

                                if (!s3file[0]) {
                                    // url parsing is fail
                                    return false;
                                }

                                if (!this.upload.direct) {
                                    this.upload.$droparea.removeClass('drag-drop');
                                }

                                var json = {
                                    filelink: s3file[0]
                                };
                                if (this.upload.type == 'file') {
                                    var arr = s3file[0].split('/');
                                    json.filename = arr[arr.length - 1];
                                }

                                this.upload.callback(json, this.upload.direct, false);

                            } else {//setProgress(0, 'Upload error: ' + xhr.status);
                            }
                        }, this);

                        xhr.onerror = function() {}
                        ;

                        xhr.upload.onprogress = function(e) {}
                        ;

                        xhr.setRequestHeader('Content-Type', file.type);
                        xhr.setRequestHeader('x-amz-acl', 'public-read');

                        xhr.send(file);
                    }
                }
            };
        },
        utils: function() {
            return {
                isMobile: function() {
                    return /(iPhone|iPod|BlackBerry|Android)/.test(navigator.userAgent);
                },
                isDesktop: function() {
                    return !/(iPhone|iPod|iPad|BlackBerry|Android)/.test(navigator.userAgent);
                },
                isString: function(obj) {
                    return Object.prototype.toString.call(obj) == '[object String]';
                },
                isEmpty: function(html, removeEmptyTags) {
                    html = html.replace(/[\u200B-\u200D\uFEFF]/g, '');
                    html = html.replace(/&nbsp;/gi, '');
                    html = html.replace(/<\/?br\s?\/?>/g, '');
                    html = html.replace(/\s/g, '');
                    html = html.replace(/^<p>[^\W\w\D\d]*?<\/p>$/i, '');
                    html = html.replace(/<iframe(.*?[^>])>$/i, 'iframe');
                    html = html.replace(/<source(.*?[^>])>$/i, 'source');

                    // remove empty tags
                    if (removeEmptyTags !== false) {
                        html = html.replace(/<[^\/>][^>]*><\/[^>]+>/gi, '');
                        html = html.replace(/<[^\/>][^>]*><\/[^>]+>/gi, '');
                    }

                    html = $.trim(html);

                    return html === '';
                },
                normalize: function(str) {
                    if (typeof (str) === 'undefined')
                        return 0;
                    return parseInt(str.replace('px', ''), 10);
                },
                hexToRgb: function(hex) {
                    if (typeof hex == 'undefined')
                        return;
                    if (hex.search(/^#/) == -1)
                        return hex;

                    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
                    hex = hex.replace(shorthandRegex, function(m, r, g, b) {
                        return r + r + g + g + b + b;
                    });

                    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                    return 'rgb(' + parseInt(result[1], 16) + ', ' + parseInt(result[2], 16) + ', ' + parseInt(result[3], 16) + ')';
                },
                getOuterHtml: function(el) {
                    return $('<div>').append($(el).eq(0).clone()).html();
                },
                getAlignmentElement: function(el) {
                    if ($.inArray(el.tagName, this.opts.alignmentTags) !== -1) {
                        return $(el);
                    } else {
                        return $(el).closest(this.opts.alignmentTags.toString().toLowerCase(), this.$editor[0]);
                    }
                },
                removeEmptyAttr: function(el, attr) {
                    var $el = $(el);
                    if (typeof $el.attr(attr) == 'undefined') {
                        return true;
                    }

                    if ($el.attr(attr) === '') {
                        $el.removeAttr(attr);
                        return true;
                    }

                    return false;
                },
                removeEmpty: function(i, s) {
                    var $s = $($.parseHTML(s));

                    $s.find('.redactor-invisible-space').removeAttr('style').removeAttr('class');

                    if ($s.find('hr, br, img, iframe, source').length !== 0)
                        return;
                    var text = $.trim($s.text());

                    if (this.utils.isEmpty(text, false)) {
                        $s.remove();
                    }
                },

                // save and restore scroll
                saveScroll: function() {
                    this.saveEditorScroll = this.$editor.scrollTop();
                    this.saveBodyScroll = $(window).scrollTop();

                    if (this.opts.scrollTarget)
                        this.saveTargetScroll = $(this.opts.scrollTarget).scrollTop();
                },
                restoreScroll: function() {
                    if (typeof this.saveScroll === 'undefined' && typeof this.saveBodyScroll === 'undefined')
                        return;

                    $(window).scrollTop(this.saveBodyScroll);
                    this.$editor.scrollTop(this.saveEditorScroll);

                    if (this.opts.scrollTarget)
                        $(this.opts.scrollTarget).scrollTop(this.saveTargetScroll);
                },

                // get invisible space element
                createSpaceElement: function() {
                    var space = document.createElement('span');
                    space.className = 'redactor-invisible-space';
                    space.innerHTML = this.opts.invisibleSpace;

                    return space;
                },

                // replace
                removeInlineTags: function(node) {
                    var tags = this.opts.inlineTags;
                    tags.push('span');

                    if (node.tagName == 'PRE')
                        tags.push('a');

                    $(node).find(tags.join(',')).not('span.redactor-selection-marker').contents().unwrap();
                },
                replaceWithContents: function(node, removeInlineTags) {
                    var self = this;
                    $(node).replaceWith(function() {
                        if (removeInlineTags === true)
                            self.utils.removeInlineTags(this);

                        return $(this).contents();
                    });

                    return $(node);
                },
                replaceToTag: function(node, tag, removeInlineTags) {
                    var replacement;
                    var self = this;
                    $(node).replaceWith(function() {
                        replacement = $('<' + tag + ' />').append($(this).contents());

                        for (var i = 0; i < this.attributes.length; i++) {
                            replacement.attr(this.attributes[i].name, this.attributes[i].value);
                        }

                        if (removeInlineTags === true)
                            self.utils.removeInlineTags(replacement);

                        return replacement;
                    });

                    return replacement;
                },

                // start and end of element
                isStartOfElement: function() {
                    var block = this.selection.getBlock();
                    if (!block)
                        return false;

                    var offset = this.caret.getOffsetOfElement(block);

                    return (offset === 0) ? true : false;
                },
                isEndOfElement: function(element) {
                    if (typeof element == 'undefined') {
                        var element = this.selection.getBlock();
                        if (!element)
                            return false;
                    }

                    var offset = this.caret.getOffsetOfElement(element);
                    var text = $.trim($(element).text()).replace(/\n\r\n/g, '');

                    return (offset == text.length) ? true : false;
                },
                isStartOfEditor: function() {
                    var offset = this.caret.getOffsetOfElement(this.$editor[0]);

                    return (offset === 0) ? true : false;
                },
                isEndOfEditor: function() {
                    var block = this.$editor[0];

                    var offset = this.caret.getOffsetOfElement(block);
                    var text = $.trim($(block).html().replace(/(<([^>]+)>)/gi, ''));

                    return (offset == text.length) ? true : false;
                },

                // test blocks
                isBlock: function(block) {
                    block = block[0] || block;

                    return block && this.utils.isBlockTag(block.tagName);
                },
                isBlockTag: function(tag) {
                    if (typeof tag == 'undefined')
                        return false;

                    return this.reIsBlock.test(tag);
                },

                // tag detection
                isTag: function(current, tag) {
                    var element = $(current).closest(tag, this.$editor[0]);
                    if (element.length == 1) {
                        return element[0];
                    }

                    return false;
                },

                // select all
                isSelectAll: function() {
                    return this.selectAll;
                },
                enableSelectAll: function() {
                    this.selectAll = true;
                },
                disableSelectAll: function() {
                    this.selectAll = false;
                },

                // parents detection
                isRedactorParent: function(el) {
                    if (!el) {
                        return false;
                    }

                    if ($(el).parents('.redactor-editor').length === 0 || $(el).hasClass('redactor-editor')) {
                        return false;
                    }

                    return el;
                },
                isCurrentOrParentHeader: function() {
                    // VWO Change - http://craftcms.stackexchange.com/questions/8601/redactor-wont-allow-simple-styling-in-heading-tags
                    return false;
                    // return this.utils.isCurrentOrParent(['H1', 'H2', 'H3', 'H4', 'H5', 'H6']);
                    // end vwo change
                },
                isCurrentOrParent: function(tagName) {
                    var parent = this.selection.getParent();
                    var current = this.selection.getCurrent();

                    if ($.isArray(tagName)) {
                        var matched = 0;
                        $.each(tagName, $.proxy(function(i, s) {
                            if (this.utils.isCurrentOrParentOne(current, parent, s)) {
                                matched++;
                            }
                        }, this));

                        return (matched === 0) ? false : true;
                    } else {
                        return this.utils.isCurrentOrParentOne(current, parent, tagName);
                    }
                },
                isCurrentOrParentOne: function(current, parent, tagName) {
                    tagName = tagName.toUpperCase();

                    return parent && parent.tagName === tagName ? parent : current && current.tagName === tagName ? current : false;
                },

                // browsers detection
                isOldIe: function() {
                    return (this.utils.browser('msie') && parseInt(this.utils.browser('version'), 10) < 9) ? true : false;
                },
                isLessIe10: function() {
                    return (this.utils.browser('msie') && parseInt(this.utils.browser('version'), 10) < 10) ? true : false;
                },
                isIe11: function() {
                    return !!navigator.userAgent.match(/Trident\/7\./);
                },
                browser: function(browser) {
                    var ua = navigator.userAgent.toLowerCase();
                    var match = /(opr)[\/]([\w.]+)/.exec(ua) || /(chrome)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];

                    if (browser == 'safari')
                        return (typeof match[3] != 'undefined') ? match[3] == 'safari' : false;
                    if (browser == 'version')
                        return match[2];
                    if (browser == 'webkit')
                        return (match[1] == 'chrome' || match[1] == 'opr' || match[1] == 'webkit');
                    if (match[1] == 'rv')
                        return browser == 'msie';
                    if (match[1] == 'opr')
                        return browser == 'webkit';

                    return browser == match[1];
                },
                strpos: function(haystack, needle, offset) {
                    var i = haystack.indexOf(needle, offset);
                    return i >= 0 ? i : false;
                },
                disableBodyScroll: function() {

                    var $body = $('html');
                    var windowWidth = window.innerWidth;
                    if (!windowWidth) {
                        var documentElementRect = document.documentElement.getBoundingClientRect();
                        windowWidth = documentElementRect.right - Math.abs(documentElementRect.left);
                    }

                    var isOverflowing = document.body.clientWidth < windowWidth;
                    var scrollbarWidth = this.utils.measureScrollbar();

                    $body.css('overflow', 'hidden');
                    if (isOverflowing)
                        $body.css('padding-right', scrollbarWidth);

                },
                measureScrollbar: function() {
                    var $body = $('body');
                    var scrollDiv = document.createElement('div');
                    scrollDiv.className = 'redactor-scrollbar-measure';

                    $body.append(scrollDiv);
                    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
                    $body[0].removeChild(scrollDiv);
                    return scrollbarWidth;
                },
                enableBodyScroll: function() {
                    $('html').css({
                        'overflow': '',
                        'padding-right': ''
                    });
                    $('body').remove('redactor-scrollbar-measure');
                }
            };
        }
    };

    $(window).on('load.tools.redactor', function() {
        $('[data-tools="redactor"]').redactor();
    });

    // constructor
    Redactor.prototype.init.prototype = Redactor.prototype;

    if (typeof define === "function" && define.amd) {
        define("redactor", [], function() {
            return $;
        });
    }

    return $;

}
)(jQuery.noConflict(true));
var vwoOriginalDefinitions;
(function() {
    'use strict';
    var pristineDocument = document.implementation && document.implementation.createHTMLDocument();

    //Don't do these overrides for non-supported browsers
    if (!pristineDocument) {
        return;
    }

    var nativeToString = pristineDocument.createElement.toString;

    function isNativeFunction(fn) {
        if (!fn) {
            return false;
        }
        return nativeToString.call(fn).indexOf('[native code]') !== -1;
    }
    //An array of correct definitions for various native methods
    vwoOriginalDefinitions = [{
        context: window,
        fullName: 'String.prototype.trim',
        definition: (function() {
            var originalTrim = String.prototype.trim;
            String.prototype.trim = function() {
                var str = this;
                return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
            }
            ;
            return originalTrim;
        }
        )()
    }, {
        context: [window, document],
        fullName: 'addEventListener',
        definition: (function() {
            var originalAddListener = window.addEventListener;
            if (isNativeFunction(originalAddListener)) {
                return -1;
            }
            window.addEventListener = pristineDocument.addEventListener.bind(window);
            document.addEventListener = pristineDocument.addEventListener.bind(document);
            return originalAddListener;
        }
        )()
    }, {
        context: [window, document],
        fullName: 'removeEventListener',
        definition: (function() {
            var originalRemoveListener = window.removeEventListener;
            if (isNativeFunction(originalRemoveListener)) {
                return -1;
            }
            window.removeEventListener = pristineDocument.removeEventListener.bind(window);
            document.removeEventListener = pristineDocument.removeEventListener.bind(document);
            return originalRemoveListener;
        }
        )()
    }];
}
)();

define("designer/inject/native-definitions", function() {});

var JSON;
JSON || (JSON = {});
(function() {
    function k(a) {
        return 10 > a ? "0" + a : a
    }
    function o(a) {
        p.lastIndex = 0;
        return p.test(a) ? '"' + a.replace(p, function(a) {
            var c = r[a];
            return "string" === typeof c ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
        }) + '"' : '"' + a + '"'
    }
    function m(a, j) {
        var c, d, h, n, g = e, f, b = j[a];
        b && "object" === typeof b && "function" === typeof b.toJSON && (b = b.toJSON(a));
        "function" === typeof i && (b = i.call(j, a, b));
        switch (typeof b) {
        case "string":
            return o(b);
        case "number":
            return isFinite(b) ? "" + b : "null";
        case "boolean":
        case "null":
            return "" + b;
        case "object":
            if (!b)
                return "null";
            e += l;
            f = [];
            if ("[object Array]" === Object.prototype.toString.apply(b)) {
                n = b.length;
                for (c = 0; c < n; c += 1)
                    f[c] = m(c, b) || "null";
                h = 0 === f.length ? "[]" : e ? "[\n" + e + f.join(",\n" + e) + "\n" + g + "]" : "[" + f.join(",") + "]";
                e = g;
                return h
            }
            if (i && "object" === typeof i) {
                n = i.length;
                for (c = 0; c < n; c += 1)
                    "string" === typeof i[c] && (d = i[c],
                    (h = m(d, b)) && f.push(o(d) + (e ? ": " : ":") + h))
            } else
                for (d in b)
                    Object.prototype.hasOwnProperty.call(b, d) && (h = m(d, b)) && f.push(o(d) + (e ? ": " : ":") + h);
            h = 0 === f.length ? "{}" : e ? "{\n" + e + f.join(",\n" + e) + "\n" + g + "}" : "{" + f.join(",") + "}";
            e = g;
            return h
        }
    }
    "function" !== typeof Date.prototype.toJSON && (Date.prototype.toJSON = function() {
        return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + k(this.getUTCMonth() + 1) + "-" + k(this.getUTCDate()) + "T" + k(this.getUTCHours()) + ":" + k(this.getUTCMinutes()) + ":" + k(this.getUTCSeconds()) + "Z" : null
    }
    ,
    String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function() {
        return this.valueOf()
    }
    );
    var q = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, p = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, e, l, r = {
        "\u0008": "\\b",
        "\t": "\\t",
        "\n": "\\n",
        "\u000c": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\"
    }, i;
    "function" !== typeof JSON.stringify && (JSON.stringify = function(a, j, c) {
        var d;
        l = e = "";
        if ("number" === typeof c)
            for (d = 0; d < c; d += 1)
                l += " ";
        else
            "string" === typeof c && (l = c);
        if ((i = j) && "function" !== typeof j && ("object" !== typeof j || "number" !== typeof j.length))
            throw Error("JSON.stringify");
        return m("", {
            "": a
        })
    }
    );
    "function" !== typeof JSON.parse && (JSON.parse = function(a, e) {
        function c(a, d) {
            var g, f, b = a[d];
            if (b && "object" === typeof b)
                for (g in b)
                    Object.prototype.hasOwnProperty.call(b, g) && (f = c(b, g),
                    void 0 !== f ? b[g] = f : delete b[g]);
            return e.call(a, d, b)
        }
        var d, a = "" + a;
        q.lastIndex = 0;
        q.test(a) && (a = a.replace(q, function(a) {
            return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
        }));
        if (/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, "")))
            return d = eval("(" + a + ")"),
            "function" === typeof e ? c({
                "": d
            }, "") : d;
        throw new SyntaxError("JSON.parse");
    }
    )
}
)();

define("json2", function() {});

// Domain Public by Eric Wendelin http://eriwen.com/ (2008)
//                  Luke Smith http://lucassmith.name/ (2008)
//                  Loic Dachary <loic@dachary.org> (2008)
//                  Johan Euphrosine <proppy@aminche.com> (2008)
//                  Oyvind Sean Kinsey http://kinsey.no/blog (2010)
//                  Victor Homyakov <victor-homyakov@users.sourceforge.net> (2010)

/**
 * Main function giving a function stack trace with a forced or passed in Error
 *
 * @cfg {Error} e The error to create a stacktrace from (optional)
 * @cfg {Boolean} guess If we should try to resolve the names of anonymous functions
 * @return {Array} of Strings with functions, lines, files, and arguments where possible
 */
function printStackTrace(options) {
    options = options || {
        guess: true
    };
    var ex = options.e || null
      , guess = !!options.guess;
    var p = new printStackTrace.implementation()
      , result = p.run(ex);
    return (guess) ? p.guessAnonymousFunctions(result) : result;
}

printStackTrace.implementation = function() {}
;

printStackTrace.implementation.prototype = {
    /**
     * @param {Error} ex The error to create a stacktrace from (optional)
     * @param {String} mode Forced mode (optional, mostly for unit tests)
     */
    run: function(ex, mode) {
        ex = ex || this.createException();
        // examine exception properties w/o debugger
        //for (var prop in ex) {alert("Ex['" + prop + "']=" + ex[prop]);}
        mode = mode || this.mode(ex);
        if (mode === 'other') {
            return this.other(arguments.callee);
        } else {
            return this[mode](ex);
        }
    },

    createException: function() {
        try {
            this.undef();
        } catch (e) {
            return e;
        }
    },

    /**
     * Mode could differ for different exception, e.g.
     * exceptions in Chrome may or may not have arguments or stack.
     *
     * @return {String} mode of operation for the exception
     */
    mode: function(e) {
        if (e['arguments'] && e.stack) {
            return 'chrome';
        } else if (typeof e.message === 'string' && typeof window !== 'undefined' && window.opera) {
            // e.message.indexOf("Backtrace:") > -1 -> opera
            // !e.stacktrace -> opera
            if (!e.stacktrace) {
                return 'opera9';
                // use e.message
            }
            // 'opera#sourceloc' in e -> opera9, opera10a
            if (e.message.indexOf('\n') > -1 && e.message.split('\n').length > e.stacktrace.split('\n').length) {
                return 'opera9';
                // use e.message
            }
            // e.stacktrace && !e.stack -> opera10a
            if (!e.stack) {
                return 'opera10a';
                // use e.stacktrace
            }
            // e.stacktrace && e.stack -> opera10b
            if (e.stacktrace.indexOf("called from line") < 0) {
                return 'opera10b';
                // use e.stacktrace, format differs from 'opera10a'
            }
            // e.stacktrace && e.stack -> opera11
            return 'opera11';
            // use e.stacktrace, format differs from 'opera10a', 'opera10b'
        } else if (e.stack) {
            return 'firefox';
        }
        return 'other';
    },

    /**
     * Given a context, function name, and callback function, overwrite it so that it calls
     * printStackTrace() first with a callback and then runs the rest of the body.
     *
     * @param {Object} context of execution (e.g. window)
     * @param {String} functionName to instrument
     * @param {Function} function to call with a stack trace on invocation
     */
    instrumentFunction: function(context, functionName, callback) {
        context = context || window;
        var original = context[functionName];
        context[functionName] = function instrumented() {
            callback.call(this, printStackTrace().slice(4));
            return context[functionName]._instrumented.apply(this, arguments);
        }
        ;
        context[functionName]._instrumented = original;
    },

    /**
     * Given a context and function name of a function that has been
     * instrumented, revert the function to it's original (non-instrumented)
     * state.
     *
     * @param {Object} context of execution (e.g. window)
     * @param {String} functionName to de-instrument
     */
    deinstrumentFunction: function(context, functionName) {
        if (context[functionName].constructor === Function && context[functionName]._instrumented && context[functionName]._instrumented.constructor === Function) {
            context[functionName] = context[functionName]._instrumented;
        }
    },

    /**
     * Given an Error object, return a formatted Array based on Chrome's stack string.
     *
     * @param e - Error object to inspect
     * @return Array<String> of function calls, files and line numbers
     */
    chrome: function(e) {
        var stack = (e.stack + '\n').replace(/^\S[^\(]+?[\n$]/gm, '').replace(/^\s+(at eval )?at\s+/gm, '').replace(/^([^\(]+?)([\n$])/gm, '{anonymous}()@$1$2').replace(/^Object.<anonymous>\s*\(([^\)]+)\)/gm, '{anonymous}()@$1').split('\n');
        stack.pop();
        return stack;
    },

    /**
     * Given an Error object, return a formatted Array based on Firefox's stack string.
     *
     * @param e - Error object to inspect
     * @return Array<String> of function calls, files and line numbers
     */
    firefox: function(e) {
        return e.stack.replace(/(?:\n@:0)?\s+$/m, '').replace(/^\(/gm, '{anonymous}(').split('\n');
    },

    opera11: function(e) {
        // "Error thrown at line 42, column 12 in <anonymous function>() in file://localhost/G:/js/stacktrace.js:\n"
        // "Error thrown at line 42, column 12 in <anonymous function: createException>() in file://localhost/G:/js/stacktrace.js:\n"
        // "called from line 7, column 4 in bar(n) in file://localhost/G:/js/test/functional/testcase1.html:\n"
        // "called from line 15, column 3 in file://localhost/G:/js/test/functional/testcase1.html:\n"
        var ANON = '{anonymous}'
          , lineRE = /^.*line (\d+), column (\d+)(?: in (.+))? in (\S+):$/;
        var lines = e.stacktrace.split('\n')
          , result = [];

        for (var i = 0, len = lines.length; i < len; i += 2) {
            var match = lineRE.exec(lines[i]);
            if (match) {
                var location = match[4] + ':' + match[1] + ':' + match[2];
                var fnName = match[3] || "global code";
                fnName = fnName.replace(/<anonymous function: (\S+)>/, "$1").replace(/<anonymous function>/, ANON);
                result.push(fnName + '@' + location + ' -- ' + lines[i + 1].replace(/^\s+/, ''));
            }
        }

        return result;
    },

    opera10b: function(e) {
        // "<anonymous function: run>([arguments not available])@file://localhost/G:/js/stacktrace.js:27\n" +
        // "printStackTrace([arguments not available])@file://localhost/G:/js/stacktrace.js:18\n" +
        // "@file://localhost/G:/js/test/functional/testcase1.html:15"
        var ANON = '{anonymous}'
          , lineRE = /^(.*)@(.+):(\d+)$/;
        var lines = e.stacktrace.split('\n')
          , result = [];

        for (var i = 0, len = lines.length; i < len; i++) {
            var match = lineRE.exec(lines[i]);
            if (match) {
                var fnName = match[1] ? (match[1] + '()') : "global code";
                result.push(fnName + '@' + match[2] + ':' + match[3]);
            }
        }

        return result;
    },

    /**
     * Given an Error object, return a formatted Array based on Opera 10's stacktrace string.
     *
     * @param e - Error object to inspect
     * @return Array<String> of function calls, files and line numbers
     */
    opera10a: function(e) {
        // "  Line 27 of linked script file://localhost/G:/js/stacktrace.js\n"
        // "  Line 11 of inline#1 script in file://localhost/G:/js/test/functional/testcase1.html: In function foo\n"
        var ANON = '{anonymous}'
          , lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
        var lines = e.stacktrace.split('\n')
          , result = [];

        for (var i = 0, len = lines.length; i < len; i += 2) {
            var match = lineRE.exec(lines[i]);
            if (match) {
                var fnName = match[3] || ANON;
                result.push(fnName + '()@' + match[2] + ':' + match[1] + ' -- ' + lines[i + 1].replace(/^\s+/, ''));
            }
        }

        return result;
    },

    // Opera 7.x-9.2x only!
    opera9: function(e) {
        // "  Line 43 of linked script file://localhost/G:/js/stacktrace.js\n"
        // "  Line 7 of inline#1 script in file://localhost/G:/js/test/functional/testcase1.html\n"
        var ANON = '{anonymous}'
          , lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
        var lines = e.message.split('\n')
          , result = [];

        for (var i = 2, len = lines.length; i < len; i += 2) {
            var match = lineRE.exec(lines[i]);
            if (match) {
                result.push(ANON + '()@' + match[2] + ':' + match[1] + ' -- ' + lines[i + 1].replace(/^\s+/, ''));
            }
        }

        return result;
    },

    // Safari, IE, and others
    other: function(curr) {
        var ANON = '{anonymous}', fnRE = /function\s*([\w\-$]+)?\s*\(/i, stack = [], fn, args, maxStackSize = 10;
        while (curr && curr['arguments'] && stack.length < maxStackSize) {
            fn = fnRE.test(curr.toString()) ? RegExp.$1 || ANON : ANON;
            args = Array.prototype.slice.call(curr['arguments'] || []);
            stack[stack.length] = fn + '(' + this.stringifyArguments(args) + ')';
            curr = curr.caller;
        }
        return stack;
    },

    /**
     * Given arguments array as a String, subsituting type names for non-string types.
     *
     * @param {Arguments} object
     * @return {Array} of Strings with stringified arguments
     */
    stringifyArguments: function(args) {
        var result = [];
        var slice = Array.prototype.slice;
        for (var i = 0; i < args.length; ++i) {
            var arg = args[i];
            if (arg === undefined) {
                result[i] = 'undefined';
            } else if (arg === null) {
                result[i] = 'null';
            } else if (arg.constructor) {
                if (arg.constructor === Array) {
                    if (arg.length < 3) {
                        result[i] = '[' + this.stringifyArguments(arg) + ']';
                    } else {
                        result[i] = '[' + this.stringifyArguments(slice.call(arg, 0, 1)) + '...' + this.stringifyArguments(slice.call(arg, -1)) + ']';
                    }
                } else if (arg.constructor === Object) {
                    result[i] = '#object';
                } else if (arg.constructor === Function) {
                    result[i] = '#function';
                } else if (arg.constructor === String) {
                    result[i] = '"' + arg + '"';
                } else if (arg.constructor === Number) {
                    result[i] = arg;
                }
            }
        }
        return result.join(',');
    },

    sourceCache: {},

    /**
     * @return the text from a given URL
     */
    ajax: function(url) {
        var req = this.createXMLHTTPObject();
        if (req) {
            try {
                req.open('GET', url, false);
                req.send(null);
                return req.responseText;
            } catch (e) {}
        }
        return '';
    },

    /**
     * Try XHR methods in order and store XHR factory.
     *
     * @return <Function> XHR function or equivalent
     */
    createXMLHTTPObject: function() {
        var xmlhttp, XMLHttpFactories = [function() {
            return new XMLHttpRequest();
        }
        , function() {
            return new ActiveXObject('Msxml2.XMLHTTP');
        }
        , function() {
            return new ActiveXObject('Msxml3.XMLHTTP');
        }
        , function() {
            return new ActiveXObject('Microsoft.XMLHTTP');
        }
        ];
        for (var i = 0; i < XMLHttpFactories.length; i++) {
            try {
                xmlhttp = XMLHttpFactories[i]();
                // Use memoization to cache the factory
                this.createXMLHTTPObject = XMLHttpFactories[i];
                return xmlhttp;
            } catch (e) {}
        }
    },

    /**
     * Given a URL, check if it is in the same domain (so we can get the source
     * via Ajax).
     *
     * @param url <String> source url
     * @return False if we need a cross-domain request
     */
    isSameDomain: function(url) {
        return url.indexOf(location.hostname) !== -1;
    },

    /**
     * Get source code from given URL if in the same domain.
     *
     * @param url <String> JS source URL
     * @return <Array> Array of source code lines
     */
    getSource: function(url) {
        // TODO reuse source from script tags?
        if (!(url in this.sourceCache)) {
            this.sourceCache[url] = this.ajax(url).split('\n');
        }
        return this.sourceCache[url];
    },

    guessAnonymousFunctions: function(stack) {
        for (var i = 0; i < stack.length; ++i) {
            var reStack = /\{anonymous\}\(.*\)@(.*)/
              , reRef = /^(.*?)(?::(\d+))(?::(\d+))?(?: -- .+)?$/
              , frame = stack[i]
              , ref = reStack.exec(frame);

            if (ref) {
                var m = reRef.exec(ref[1]);
                if (m) {
                    // If falsey, we did not get any file/line information
                    var file = m[1]
                      , lineno = m[2]
                      , charno = m[3] || 0;
                    if (file && this.isSameDomain(file) && lineno) {
                        var functionName = this.guessAnonymousFunction(file, lineno, charno);
                        stack[i] = frame.replace('{anonymous}', functionName);
                    }
                }
            }
        }
        return stack;
    },

    guessAnonymousFunction: function(url, lineNo, charNo) {
        var ret;
        try {
            //Commented by wingify           
            //ret = this.findFunctionName(this.getSource(url), lineNo);
            ret = 'getSource failed with url: ' + url + ', exception: ' + e.toString();
        } catch (e) {
            ret = 'getSource failed with url: ' + url + ', exception: ' + e.toString();
        }
        return ret;
    },

    findFunctionName: function(source, lineNo) {
        // FIXME findFunctionName fails for compressed source
        // (more than one function on the same line)
        // TODO use captured args
        // function {name}({args}) m[1]=name m[2]=args
        var reFunctionDeclaration = /function\s+([^(]*?)\s*\(([^)]*)\)/;
        // {name} = function ({args}) TODO args capture
        // /['"]?([0-9A-Za-z_]+)['"]?\s*[:=]\s*function(?:[^(]*)/
        var reFunctionExpression = /['"]?([0-9A-Za-z_]+)['"]?\s*[:=]\s*function\b/;
        // {name} = eval()
        var reFunctionEvaluation = /['"]?([0-9A-Za-z_]+)['"]?\s*[:=]\s*(?:eval|new Function)\b/;
        // Walk backwards in the source lines until we find
        // the line which matches one of the patterns above
        var code = "", line, maxLines = Math.min(lineNo, 20), m, commentPos;
        for (var i = 0; i < maxLines; ++i) {
            // lineNo is 1-based, source[] is 0-based
            line = source[lineNo - i - 1];
            commentPos = line.indexOf('//');
            if (commentPos >= 0) {
                line = line.substr(0, commentPos);
            }
            // TODO check other types of comments? Commented code may lead to false positive
            if (line) {
                code = line + code;
                m = reFunctionExpression.exec(code);
                if (m && m[1]) {
                    return m[1];
                }
                m = reFunctionDeclaration.exec(code);
                if (m && m[1]) {
                    //return m[1] + "(" + (m[2] || "") + ")";
                    return m[1];
                }
                m = reFunctionEvaluation.exec(code);
                if (m && m[1]) {
                    return m[1];
                }
            }
        }
        return '(?)';
    }
};
define("stacktrace", function() {});

// JavaScript Document
/**
 * Base64 encode / decode
 * http://www.webtoolkit.info/
 *
 * This project is licensed under the Creative Commons Attribution 2.0 UK: England & Wales (CC BY 2.0) license.
 * http://creativecommons.org/licenses/by/2.0/uk/
 */

/**
 * Modified by Wingify Team
 * It has been converted into function format so that it can be stringified and injected into child frames.
 */
var Base64Fun = function() {

    // private property
    var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

    // public method for encoding
    function encode(input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        input = _utf8_encode(input);

        while (i < input.length) {

            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);

        }

        return output;
    }

    // public method for decoding
    function decode(input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        while (i < input.length) {

            enc1 = _keyStr.indexOf(input.charAt(i++));
            enc2 = _keyStr.indexOf(input.charAt(i++));
            enc3 = _keyStr.indexOf(input.charAt(i++));
            enc4 = _keyStr.indexOf(input.charAt(i++));

            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;

            output = output + String.fromCharCode(chr1);

            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }

        }

        output = _utf8_decode(output);

        return output;

    }

    // private method for UTF-8 encoding
    function _utf8_encode(string) {
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            } else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            } else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    }

    // private method for UTF-8 decoding
    function _utf8_decode(utftext) {
        var string = "";
        var i = 0;
        var c = c1 = c2 = 0;

        while (i < utftext.length) {

            c = utftext.charCodeAt(i);

            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            } else if ((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i + 1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            } else {
                c2 = utftext.charCodeAt(i + 1);
                c3 = utftext.charCodeAt(i + 2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }

        }

        return string;
    }

    return {
        encode: encode,
        decode: decode
    }
}
var Base64 = Base64Fun();
define("base64", function() {});

/**
 * jQuery JSON plugin 2.4.0
 *
 * @author Brantley Harris, 2009-2011
 * @author Timo Tijhof, 2011-2012
 * @source This plugin is heavily influenced by MochiKit's serializeJSON, which is
 *         copyrighted 2005 by Bob Ippolito.
 * @source Brantley Harris wrote this plugin. It is based somewhat on the JSON.org
 *         website's http://www.json.org/json2.js, which proclaims:
 *         "NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.", a sentiment that
 *         I uphold.
 * @license MIT License <http://www.opensource.org/licenses/mit-license.php>
 */
(function($) {
    'use strict';

    var escape = /["\\\x00-\x1f\x7f-\x9f]/g
      , meta = {
        '\b': '\\b',
        '\t': '\\t',
        '\n': '\\n',
        '\f': '\\f',
        '\r': '\\r',
        '"': '\\"',
        '\\': '\\\\'
    }
      , hasOwn = Object.prototype.hasOwnProperty;

    /**
	 * jQuery.toJSON
	 * Converts the given argument into a JSON representation.
	 *
	 * @param o {Mixed} The json-serializable *thing* to be converted
	 *
	 * If an object has a toJSON prototype, that will be used to get the representation.
	 * Non-integer/string keys are skipped in the object, as are keys that point to a
	 * function.
	 *
	 */

    // Line changed by Wingify
    /*
		Original code:
		$.toJSON = typeof JSON === 'object' && JSON.stringify ? JSON.stringify : function (o) {
	 */

    /*
		Changed code:

		Added an extra check to verify if the JSON is a native one or not.
		Native JSON's stringify has '[native code]'
	 */
    $.toJSON = (typeof JSON === 'object' && JSON.stringify && JSON.stringify.toString().indexOf('[native code]') !== -1) ? JSON.stringify : function(o) {
        if (o === null) {
            return 'null';
        }

        var pairs, k, name, val, type = $.type(o);

        if (type === 'undefined') {
            return undefined;
        }

        // Also covers instantiated Number and Boolean objects,
        // which are typeof 'object' but thanks to $.type, we
        // catch them here. I don't know whether it is right
        // or wrong that instantiated primitives are not
        // exported to JSON as an {"object":..}.
        // We choose this path because that's what the browsers did.
        if (type === 'number' || type === 'boolean') {
            return String(o);
        }
        if (type === 'string') {
            return $.quoteString(o);
        }
        if (typeof o.toJSON === 'function') {
            return $.toJSON(o.toJSON());
        }
        if (type === 'date') {
            var month = o.getUTCMonth() + 1
              , day = o.getUTCDate()
              , year = o.getUTCFullYear()
              , hours = o.getUTCHours()
              , minutes = o.getUTCMinutes()
              , seconds = o.getUTCSeconds()
              , milli = o.getUTCMilliseconds();

            if (month < 10) {
                month = '0' + month;
            }
            if (day < 10) {
                day = '0' + day;
            }
            if (hours < 10) {
                hours = '0' + hours;
            }
            if (minutes < 10) {
                minutes = '0' + minutes;
            }
            if (seconds < 10) {
                seconds = '0' + seconds;
            }
            if (milli < 100) {
                milli = '0' + milli;
            }
            if (milli < 10) {
                milli = '0' + milli;
            }
            return '"' + year + '-' + month + '-' + day + 'T' + hours + ':' + minutes + ':' + seconds + '.' + milli + 'Z"';
        }

        pairs = [];

        if ($.isArray(o)) {
            for (k = 0; k < o.length; k++) {
                pairs.push($.toJSON(o[k]) || 'null');
            }
            return '[' + pairs.join(',') + ']';
        }

        // Any other object (plain object, RegExp, ..)
        // Need to do typeof instead of $.type, because we also
        // want to catch non-plain objects.
        if (typeof o === 'object') {
            for (k in o) {
                // Only include own properties,
                // Filter out inherited prototypes
                if (hasOwn.call(o, k)) {
                    // Keys must be numerical or string. Skip others
                    type = typeof k;
                    if (type === 'number') {
                        name = '"' + k + '"';
                    } else if (type === 'string') {
                        name = $.quoteString(k);
                    } else {
                        continue;
                    }
                    type = typeof o[k];

                    // Invalid values like these return undefined
                    // from toJSON, however those object members
                    // shouldn't be included in the JSON string at all.
                    if (type !== 'function' && type !== 'undefined') {
                        val = $.toJSON(o[k]);
                        pairs.push(name + ':' + val);
                    }
                }
            }
            return '{' + pairs.join(',') + '}';
        }
    }
    ;

    /**
	 * jQuery.evalJSON
	 * Evaluates a given json string.
	 *
	 * @param str {String}
	 */
    // Line changed by Wingify
    $.evalJSON = (typeof JSON === 'object' && JSON.parse && JSON.parse.toString().indexOf('[native code]') !== -1) ? JSON.parse : function(str) {
        /*jshint evil: true */
        return eval('(' + str + ')');
    }
    ;

    /**
	 * jQuery.secureEvalJSON
	 * Evals JSON in a way that is *more* secure.
	 *
	 * @param str {String}
	 */

    // Line changed by Wingify
    $.secureEvalJSON = (typeof JSON === 'object' && JSON.parse && JSON.parse.toString().indexOf('[native code]') !== -1) ? JSON.parse : function(str) {
        var filtered = str.replace(/\\["\\\/bfnrtu]/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, '');

        if (/^[\],:{}\s]*$/.test(filtered)) {
            /*jshint evil: true */
            return eval('(' + str + ')');
        }
        throw new SyntaxError('Error parsing JSON, source is not valid.');
    }
    ;

    /**
	 * jQuery.quoteString
	 * Returns a string-repr of a string, escaping quotes intelligently.
	 * Mostly a support function for toJSON.
	 * Examples:
	 * >>> jQuery.quoteString('apple')
	 * "apple"
	 *
	 * >>> jQuery.quoteString('"Where are we going?", she asked.')
	 * "\"Where are we going?\", she asked."
	 */
    $.quoteString = function(str) {
        if (str.match(escape)) {
            return '"' + str.replace(escape, function(a) {
                var c = meta[a];
                if (typeof c === 'string') {
                    return c;
                }
                c = a.charCodeAt();
                return '\\u00' + Math.floor(c / 16).toString(16) + (c % 16).toString(16);
            }) + '"';
        }
        return '"' + str + '"';
    }
    ;

}(jQuery));

define("jquery-json", ["jquery"], function() {});

/*!
 * jQuery UI 1.8.16
 *
 * Copyright (c) 2012 Paul Bakaus, http://jqueryui.com/
 *
 * This software consists of voluntary contributions made by many individuals (AUTHORS.txt, http://jqueryui.com/about)
 * For exact contribution history, see the revision history and logs, available at http://jquery-ui.googlecode.com/svn/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
(function(c, j) {
    function k(a, b) {
        var d = a.nodeName.toLowerCase();
        if ("area" === d) {
            b = a.parentNode;
            d = b.name;
            if (!a.href || !d || b.nodeName.toLowerCase() !== "map")
                return false;
            a = c("img[usemap=#" + d + "]")[0];
            return !!a && l(a)
        }
        return (/input|select|textarea|button|object/.test(d) ? !a.disabled : "a" == d ? a.href || b : b) && l(a)
    }
    function l(a) {
        return !c(a).parents().andSelf().filter(function() {
            return c.curCSS(this, "visibility") === "hidden" || c.expr.filters.hidden(this)
        }).length
    }
    c.ui = c.ui || {};
    if (!c.ui.version) {
        c.extend(c.ui, {
            version: "1.8.16",
            keyCode: {
                ALT: 18,
                BACKSPACE: 8,
                CAPS_LOCK: 20,
                COMMA: 188,
                COMMAND: 91,
                COMMAND_LEFT: 91,
                COMMAND_RIGHT: 93,
                CONTROL: 17,
                DELETE: 46,
                DOWN: 40,
                END: 35,
                ENTER: 13,
                ESCAPE: 27,
                HOME: 36,
                INSERT: 45,
                LEFT: 37,
                MENU: 93,
                NUMPAD_ADD: 107,
                NUMPAD_DECIMAL: 110,
                NUMPAD_DIVIDE: 111,
                NUMPAD_ENTER: 108,
                NUMPAD_MULTIPLY: 106,
                NUMPAD_SUBTRACT: 109,
                PAGE_DOWN: 34,
                PAGE_UP: 33,
                PERIOD: 190,
                RIGHT: 39,
                SHIFT: 16,
                SPACE: 32,
                TAB: 9,
                UP: 38,
                WINDOWS: 91
            }
        });
        c.fn.extend({
            propAttr: c.fn.prop || c.fn.attr,
            _focus: c.fn.focus,
            focus: function(a, b) {
                return typeof a === "number" ? this.each(function() {
                    var d = this;
                    setTimeout(function() {
                        c(d).focus();
                        b && b.call(d)
                    }, a)
                }) : this._focus.apply(this, arguments)
            },
            scrollParent: function() {
                var a;
                a = c.browser.msie && /(static|relative)/.test(this.css("position")) || /absolute/.test(this.css("position")) ? this.parents().filter(function() {
                    return /(relative|absolute|fixed)/.test(c.curCSS(this, "position", 1)) && /(auto|scroll)/.test(c.curCSS(this, "overflow", 1) + c.curCSS(this, "overflow-y", 1) + c.curCSS(this, "overflow-x", 1))
                }).eq(0) : this.parents().filter(function() {
                    return /(auto|scroll)/.test(c.curCSS(this, "overflow", 1) + c.curCSS(this, "overflow-y", 1) + c.curCSS(this, "overflow-x", 1))
                }).eq(0);
                return /fixed/.test(this.css("position")) || !a.length ? c(document) : a
            },
            zIndex: function(a) {
                if (a !== j)
                    return this.css("zIndex", a);
                if (this.length) {
                    a = c(this[0]);
                    for (var b; a.length && a[0] !== document; ) {
                        b = a.css("position");
                        if (b === "absolute" || b === "relative" || b === "fixed") {
                            b = parseInt(a.css("zIndex"), 10);
                            if (!isNaN(b) && b !== 0)
                                return b
                        }
                        a = a.parent()
                    }
                }
                return 0
            },
            disableSelection: function() {
                return this.bind((c.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function(a) {
                    a.preventDefault()
                })
            },
            enableSelection: function() {
                return this.unbind(".ui-disableSelection")
            }
        });
        c.each(["Width", "Height"], function(a, b) {
            function d(f, g, m, n) {
                c.each(e, function() {
                    g -= parseFloat(c.curCSS(f, "padding" + this, true)) || 0;
                    if (m)
                        g -= parseFloat(c.curCSS(f, "border" + this + "Width", true)) || 0;
                    if (n)
                        g -= parseFloat(c.curCSS(f, "margin" + this, true)) || 0
                });
                return g
            }
            var e = b === "Width" ? ["Left", "Right"] : ["Top", "Bottom"]
              , h = b.toLowerCase()
              , i = {
                innerWidth: c.fn.innerWidth,
                innerHeight: c.fn.innerHeight,
                outerWidth: c.fn.outerWidth,
                outerHeight: c.fn.outerHeight
            };
            c.fn["inner" + b] = function(f) {
                if (f === j)
                    return i["inner" + b].call(this);
                return this.each(function() {
                    c(this).css(h, d(this, f) + "px")
                })
            }
            ;
            c.fn["outer" + b] = function(f, g) {
                if (typeof f !== "number")
                    return i["outer" + b].call(this, f);
                return this.each(function() {
                    c(this).css(h, d(this, f, true, g) + "px")
                })
            }
        });
        c.extend(c.expr[":"], {
            data: function(a, b, d) {
                return !!c.data(a, d[3])
            },
            focusable: function(a) {
                return k(a, !isNaN(c.attr(a, "tabindex")))
            },
            tabbable: function(a) {
                var b = c.attr(a, "tabindex")
                  , d = isNaN(b);
                return (d || b >= 0) && k(a, !d)
            }
        });
        c(function() {
            var a = document.body
              , b = a.appendChild(b = document.createElement("div"));
            c.extend(b.style, {
                minHeight: "100px",
                height: "auto",
                padding: 0,
                borderWidth: 0
            });
            c.support.minHeight = b.offsetHeight === 100;
            c.support.selectstart = "onselectstart"in b;
            a.removeChild(b).style.display = "none"
        });
        c.extend(c.ui, {
            plugin: {
                add: function(a, b, d) {
                    a = c.ui[a].prototype;
                    for (var e in d) {
                        a.plugins[e] = a.plugins[e] || [];
                        a.plugins[e].push([b, d[e]])
                    }
                },
                call: function(a, b, d) {
                    if ((b = a.plugins[b]) && a.element[0].parentNode)
                        for (var e = 0; e < b.length; e++)
                            a.options[b[e][0]] && b[e][1].apply(a.element, d)
                }
            },
            contains: function(a, b) {
                return document.compareDocumentPosition ? a.compareDocumentPosition(b) & 16 : a !== b && a.contains(b)
            },
            hasScroll: function(a, b) {
                if (c(a).css("overflow") === "hidden")
                    return false;
                b = b && b === "left" ? "scrollLeft" : "scrollTop";
                var d = false;
                if (a[b] > 0)
                    return true;
                a[b] = 1;
                d = a[b] > 0;
                a[b] = 0;
                return d
            },
            isOverAxis: function(a, b, d) {
                return a > b && a < b + d
            },
            isOver: function(a, b, d, e, h, i) {
                return c.ui.isOverAxis(a, d, h) && c.ui.isOverAxis(b, e, i)
            }
        })
    }
}
)(jQuery);
;/*!
 * jQuery UI Widget 1.8.16
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Widget
 */
(function(b, j) {
    if (b.cleanData) {
        var k = b.cleanData;
        b.cleanData = function(a) {
            for (var c = 0, d; (d = a[c]) != null; c++)
                try {
                    b(d).triggerHandler("remove")
                } catch (e) {}
            k(a)
        }
    } else {
        var l = b.fn.remove;
        b.fn.remove = function(a, c) {
            return this.each(function() {
                if (!c)
                    if (!a || b.filter(a, [this]).length)
                        b("*", this).add([this]).each(function() {
                            try {
                                b(this).triggerHandler("remove")
                            } catch (d) {}
                        });
                return l.call(b(this), a, c)
            })
        }
    }
    b.widget = function(a, c, d) {
        var e = a.split(".")[0], f;
        a = a.split(".")[1];
        f = e + "-" + a;
        if (!d) {
            d = c;
            c = b.Widget
        }
        b.expr[":"][f] = function(h) {
            return !!b.data(h, a)
        }
        ;
        b[e] = b[e] || {};
        b[e][a] = function(h, g) {
            arguments.length && this._createWidget(h, g)
        }
        ;
        c = new c;
        c.options = b.extend(true, {}, c.options);
        b[e][a].prototype = b.extend(true, c, {
            namespace: e,
            widgetName: a,
            widgetEventPrefix: b[e][a].prototype.widgetEventPrefix || a,
            widgetBaseClass: f
        }, d);
        b.widget.bridge(a, b[e][a])
    }
    ;
    b.widget.bridge = function(a, c) {
        b.fn[a] = function(d) {
            var e = typeof d === "string"
              , f = Array.prototype.slice.call(arguments, 1)
              , h = this;
            d = !e && f.length ? b.extend.apply(null, [true, d].concat(f)) : d;
            if (e && d.charAt(0) === "_")
                return h;
            e ? this.each(function() {
                var g = b.data(this, a)
                  , i = g && b.isFunction(g[d]) ? g[d].apply(g, f) : g;
                if (i !== g && i !== j) {
                    h = i;
                    return false
                }
            }) : this.each(function() {
                var g = b.data(this, a);
                g ? g.option(d || {})._init() : b.data(this, a, new c(d,this))
            });
            return h
        }
    }
    ;
    b.Widget = function(a, c) {
        arguments.length && this._createWidget(a, c)
    }
    ;
    b.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        options: {
            disabled: false
        },
        _createWidget: function(a, c) {
            b.data(c, this.widgetName, this);
            this.element = b(c);
            this.options = b.extend(true, {}, this.options, this._getCreateOptions(), a);
            var d = this;
            this.element.bind("remove." + this.widgetName, function() {
                d.destroy()
            });
            this._create();
            this._trigger("create");
            this._init()
        },
        _getCreateOptions: function() {
            return b.metadata && b.metadata.get(this.element[0])[this.widgetName]
        },
        _create: function() {},
        _init: function() {},
        destroy: function() {
            this.element.unbind("." + this.widgetName).removeData(this.widgetName);
            this.widget().unbind("." + this.widgetName).removeAttr("aria-disabled").removeClass(this.widgetBaseClass + "-disabled ui-state-disabled")
        },
        widget: function() {
            return this.element
        },
        option: function(a, c) {
            var d = a;
            if (arguments.length === 0)
                return b.extend({}, this.options);
            if (typeof a === "string") {
                if (c === j)
                    return this.options[a];
                d = {};
                d[a] = c
            }
            this._setOptions(d);
            return this
        },
        _setOptions: function(a) {
            var c = this;
            b.each(a, function(d, e) {
                c._setOption(d, e)
            });
            return this
        },
        _setOption: function(a, c) {
            this.options[a] = c;
            if (a === "disabled")
                this.widget()[c ? "addClass" : "removeClass"](this.widgetBaseClass + "-disabled ui-state-disabled").attr("aria-disabled", c);
            return this
        },
        enable: function() {
            return this._setOption("disabled", false)
        },
        disable: function() {
            return this._setOption("disabled", true)
        },
        _trigger: function(a, c, d) {
            var e = this.options[a];
            c = b.Event(c);
            c.type = (a === this.widgetEventPrefix ? a : this.widgetEventPrefix + a).toLowerCase();
            d = d || {};
            if (c.originalEvent) {
                a = b.event.props.length;
                for (var f; a; ) {
                    f = b.event.props[--a];
                    c[f] = c.originalEvent[f]
                }
            }
            this.element.trigger(c, d);
            return !(b.isFunction(e) && e.call(this.element[0], c, d) === false || c.isDefaultPrevented())
        }
    }
}
)(jQuery);
;/*!
 * jQuery UI Mouse 1.8.16
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Mouse
 *
 * Depends:
 *	jquery.ui.widget.js
 */
(function(b) {
    var d = false;
    b(document).mouseup(function() {
        d = false
    });
    b.widget("ui.mouse", {
        options: {
            cancel: ":input,option",
            distance: 1,
            delay: 0
        },
        _mouseInit: function() {
            var a = this;
            this.element.bind("mousedown." + this.widgetName, function(c) {
                return a._mouseDown(c)
            }).bind("click." + this.widgetName, function(c) {
                if (true === b.data(c.target, a.widgetName + ".preventClickEvent")) {
                    b.removeData(c.target, a.widgetName + ".preventClickEvent");
                    c.stopImmediatePropagation();
                    return false
                }
            });
            this.started = false
        },
        _mouseDestroy: function() {
            this.element.unbind("." + this.widgetName)
        },
        _mouseDown: function(a) {
            if (!d) {
                this._mouseStarted && this._mouseUp(a);
                this._mouseDownEvent = a;
                var c = this
                  , f = a.which == 1
                  , g = typeof this.options.cancel == "string" && a.target.nodeName ? b(a.target).closest(this.options.cancel).length : false;
                if (!f || g || !this._mouseCapture(a))
                    return true;
                this.mouseDelayMet = !this.options.delay;
                if (!this.mouseDelayMet)
                    this._mouseDelayTimer = setTimeout(function() {
                        c.mouseDelayMet = true
                    }, this.options.delay);
                if (this._mouseDistanceMet(a) && this._mouseDelayMet(a)) {
                    this._mouseStarted = this._mouseStart(a) !== false;
                    if (!this._mouseStarted) {
                        a.preventDefault();
                        return true
                    }
                }
                true === b.data(a.target, this.widgetName + ".preventClickEvent") && b.removeData(a.target, this.widgetName + ".preventClickEvent");
                this._mouseMoveDelegate = function(e) {
                    return c._mouseMove(e)
                }
                ;
                this._mouseUpDelegate = function(e) {
                    return c._mouseUp(e)
                }
                ;
                b(document).bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate);
                a.preventDefault();
                return d = true
            }
        },
        _mouseMove: function(a) {
            if (b.browser.msie && !(document.documentMode >= 9) && !a.button)
                return this._mouseUp(a);
            if (this._mouseStarted) {
                this._mouseDrag(a);
                return a.preventDefault()
            }
            if (this._mouseDistanceMet(a) && this._mouseDelayMet(a))
                (this._mouseStarted = this._mouseStart(this._mouseDownEvent, a) !== false) ? this._mouseDrag(a) : this._mouseUp(a);
            return !this._mouseStarted
        },
        _mouseUp: function(a) {
            b(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
            if (this._mouseStarted) {
                this._mouseStarted = false;
                a.target == this._mouseDownEvent.target && b.data(a.target, this.widgetName + ".preventClickEvent", true);
                this._mouseStop(a)
            }
            return false
        },
        _mouseDistanceMet: function(a) {
            return Math.max(Math.abs(this._mouseDownEvent.pageX - a.pageX), Math.abs(this._mouseDownEvent.pageY - a.pageY)) >= this.options.distance
        },
        _mouseDelayMet: function() {
            return this.mouseDelayMet
        },
        _mouseStart: function() {},
        _mouseDrag: function() {},
        _mouseStop: function() {},
        _mouseCapture: function() {
            return true
        }
    })
}
)(jQuery);
;/*
 * jQuery UI Sortable 1.8.16
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Sortables
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.widget.js
 */
(function(d) {
    d.widget("ui.sortable", d.ui.mouse, {
        widgetEventPrefix: "sort",
        options: {
            appendTo: "parent",
            axis: false,
            connectWith: false,
            containment: false,
            cursor: "auto",
            cursorAt: false,
            dropOnEmpty: true,
            forcePlaceholderSize: false,
            forceHelperSize: false,
            grid: false,
            handle: false,
            helper: "original",
            items: "> *",
            opacity: false,
            placeholder: false,
            revert: false,
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            scope: "default",
            tolerance: "intersect",
            zIndex: 1E3
        },
        _create: function() {
            var a = this.options;
            this.containerCache = {};
            this.element.addClass("ui-sortable");
            this.refresh();
            this.floating = this.items.length ? a.axis === "x" || /left|right/.test(this.items[0].item.css("float")) || /inline|table-cell/.test(this.items[0].item.css("display")) : false;
            this.offset = this.element.offset();
            this._mouseInit()
        },
        destroy: function() {
            this.element.removeClass("ui-sortable ui-sortable-disabled").removeData("sortable").unbind(".sortable");
            this._mouseDestroy();
            for (var a = this.items.length - 1; a >= 0; a--)
                this.items[a].item.removeData("sortable-item");
            return this
        },
        _setOption: function(a, b) {
            if (a === "disabled") {
                this.options[a] = b;
                this.widget()[b ? "addClass" : "removeClass"]("ui-sortable-disabled")
            } else
                d.Widget.prototype._setOption.apply(this, arguments)
        },
        _mouseCapture: function(a, b) {
            if (this.reverting)
                return false;
            if (this.options.disabled || this.options.type == "static")
                return false;
            this._refreshItems(a);
            var c = null
              , e = this;
            d(a.target).parents().each(function() {
                if (d.data(this, "sortable-item") == e) {
                    c = d(this);
                    return false
                }
            });
            if (d.data(a.target, "sortable-item") == e)
                c = d(a.target);
            if (!c)
                return false;
            if (this.options.handle && !b) {
                var f = false;
                d(this.options.handle, c).find("*").andSelf().each(function() {
                    if (this == a.target)
                        f = true
                });
                if (!f)
                    return false
            }
            this.currentItem = c;
            this._removeCurrentsFromItems();
            return true
        },
        _mouseStart: function(a, b, c) {
            b = this.options;
            var e = this;
            this.currentContainer = this;
            this.refreshPositions();
            this.helper = this._createHelper(a);
            this._cacheHelperProportions();
            this._cacheMargins();
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.currentItem.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
            this.helper.css("position", "absolute");
            this.cssPosition = this.helper.css("position");
            d.extend(this.offset, {
                click: {
                    left: a.pageX - this.offset.left,
                    top: a.pageY - this.offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            });
            this.originalPosition = this._generatePosition(a);
            this.originalPageX = a.pageX;
            this.originalPageY = a.pageY;
            b.cursorAt && this._adjustOffsetFromHelper(b.cursorAt);
            this.domPosition = {
                prev: this.currentItem.prev()[0],
                parent: this.currentItem.parent()[0]
            };
            this.helper[0] != this.currentItem[0] && this.currentItem.hide();
            this._createPlaceholder();
            b.containment && this._setContainment();
            if (b.cursor) {
                if (d("body").css("cursor"))
                    this._storedCursor = d("body").css("cursor");
                d("body").css("cursor", b.cursor)
            }
            if (b.opacity) {
                if (this.helper.css("opacity"))
                    this._storedOpacity = this.helper.css("opacity");
                this.helper.css("opacity", b.opacity)
            }
            if (b.zIndex) {
                if (this.helper.css("zIndex"))
                    this._storedZIndex = this.helper.css("zIndex");
                this.helper.css("zIndex", b.zIndex)
            }
            if (this.scrollParent[0] != document && this.scrollParent[0].tagName != "HTML")
                this.overflowOffset = this.scrollParent.offset();
            this._trigger("start", a, this._uiHash());
            this._preserveHelperProportions || this._cacheHelperProportions();
            if (!c)
                for (c = this.containers.length - 1; c >= 0; c--)
                    this.containers[c]._trigger("activate", a, e._uiHash(this));
            if (d.ui.ddmanager)
                d.ui.ddmanager.current = this;
            d.ui.ddmanager && !b.dropBehaviour && d.ui.ddmanager.prepareOffsets(this, a);
            this.dragging = true;
            this.helper.addClass("ui-sortable-helper");
            this._mouseDrag(a);
            return true
        },
        _mouseDrag: function(a) {
            this.position = this._generatePosition(a);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.lastPositionAbs)
                this.lastPositionAbs = this.positionAbs;
            if (this.options.scroll) {
                var b = this.options
                  , c = false;
                if (this.scrollParent[0] != document && this.scrollParent[0].tagName != "HTML") {
                    if (this.overflowOffset.top + this.scrollParent[0].offsetHeight - a.pageY < b.scrollSensitivity)
                        this.scrollParent[0].scrollTop = c = this.scrollParent[0].scrollTop + b.scrollSpeed;
                    else if (a.pageY - this.overflowOffset.top < b.scrollSensitivity)
                        this.scrollParent[0].scrollTop = c = this.scrollParent[0].scrollTop - b.scrollSpeed;
                    if (this.overflowOffset.left + this.scrollParent[0].offsetWidth - a.pageX < b.scrollSensitivity)
                        this.scrollParent[0].scrollLeft = c = this.scrollParent[0].scrollLeft + b.scrollSpeed;
                    else if (a.pageX - this.overflowOffset.left < b.scrollSensitivity)
                        this.scrollParent[0].scrollLeft = c = this.scrollParent[0].scrollLeft - b.scrollSpeed
                } else {
                    if (a.pageY - d(document).scrollTop() < b.scrollSensitivity)
                        c = d(document).scrollTop(d(document).scrollTop() - b.scrollSpeed);
                    else if (d(window).height() - (a.pageY - d(document).scrollTop()) < b.scrollSensitivity)
                        c = d(document).scrollTop(d(document).scrollTop() + b.scrollSpeed);
                    if (a.pageX - d(document).scrollLeft() < b.scrollSensitivity)
                        c = d(document).scrollLeft(d(document).scrollLeft() - b.scrollSpeed);
                    else if (d(window).width() - (a.pageX - d(document).scrollLeft()) < b.scrollSensitivity)
                        c = d(document).scrollLeft(d(document).scrollLeft() + b.scrollSpeed)
                }
                c !== false && d.ui.ddmanager && !b.dropBehaviour && d.ui.ddmanager.prepareOffsets(this, a)
            }
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.options.axis || this.options.axis != "y")
                this.helper[0].style.left = this.position.left + "px";
            if (!this.options.axis || this.options.axis != "x")
                this.helper[0].style.top = this.position.top + "px";
            for (b = this.items.length - 1; b >= 0; b--) {
                c = this.items[b];
                var e = c.item[0]
                  , f = this._intersectsWithPointer(c);
                if (f)
                    if (e != this.currentItem[0] && this.placeholder[f == 1 ? "next" : "prev"]()[0] != e && !d.ui.contains(this.placeholder[0], e) && (this.options.type == "semi-dynamic" ? !d.ui.contains(this.element[0], e) : true)) {
                        this.direction = f == 1 ? "down" : "up";
                        if (this.options.tolerance == "pointer" || this._intersectsWithSides(c))
                            this._rearrange(a, c);
                        else
                            break;
                        this._trigger("change", a, this._uiHash());
                        break
                    }
            }
            this._contactContainers(a);
            d.ui.ddmanager && d.ui.ddmanager.drag(this, a);
            this._trigger("sort", a, this._uiHash());
            this.lastPositionAbs = this.positionAbs;
            return false
        },
        _mouseStop: function(a, b) {
            if (a) {
                d.ui.ddmanager && !this.options.dropBehaviour && d.ui.ddmanager.drop(this, a);
                if (this.options.revert) {
                    var c = this;
                    b = c.placeholder.offset();
                    c.reverting = true;
                    d(this.helper).animate({
                        left: b.left - this.offset.parent.left - c.margins.left + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollLeft),
                        top: b.top - this.offset.parent.top - c.margins.top + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollTop)
                    }, parseInt(this.options.revert, 10) || 500, function() {
                        c._clear(a)
                    })
                } else
                    this._clear(a, b);
                return false
            }
        },
        cancel: function() {
            var a = this;
            if (this.dragging) {
                this._mouseUp({
                    target: null
                });
                this.options.helper == "original" ? this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper") : this.currentItem.show();
                for (var b = this.containers.length - 1; b >= 0; b--) {
                    this.containers[b]._trigger("deactivate", null, a._uiHash(this));
                    if (this.containers[b].containerCache.over) {
                        this.containers[b]._trigger("out", null, a._uiHash(this));
                        this.containers[b].containerCache.over = 0
                    }
                }
            }
            if (this.placeholder) {
                this.placeholder[0].parentNode && this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
                this.options.helper != "original" && this.helper && this.helper[0].parentNode && this.helper.remove();
                d.extend(this, {
                    helper: null,
                    dragging: false,
                    reverting: false,
                    _noFinalSort: null
                });
                this.domPosition.prev ? d(this.domPosition.prev).after(this.currentItem) : d(this.domPosition.parent).prepend(this.currentItem)
            }
            return this
        },
        serialize: function(a) {
            var b = this._getItemsAsjQuery(a && a.connected)
              , c = [];
            a = a || {};
            d(b).each(function() {
                var e = (d(a.item || this).attr(a.attribute || "id") || "").match(a.expression || /(.+)[-=_](.+)/);
                if (e)
                    c.push((a.key || e[1] + "[]") + "=" + (a.key && a.expression ? e[1] : e[2]))
            });
            !c.length && a.key && c.push(a.key + "=");
            return c.join("&")
        },
        toArray: function(a) {
            var b = this._getItemsAsjQuery(a && a.connected)
              , c = [];
            a = a || {};
            b.each(function() {
                c.push(d(a.item || this).attr(a.attribute || "id") || "")
            });
            return c
        },
        _intersectsWith: function(a) {
            var b = this.positionAbs.left
              , c = b + this.helperProportions.width
              , e = this.positionAbs.top
              , f = e + this.helperProportions.height
              , g = a.left
              , h = g + a.width
              , i = a.top
              , k = i + a.height
              , j = this.offset.click.top
              , l = this.offset.click.left;
            j = e + j > i && e + j < k && b + l > g && b + l < h;
            return this.options.tolerance == "pointer" || this.options.forcePointerForContainers || this.options.tolerance != "pointer" && this.helperProportions[this.floating ? "width" : "height"] > a[this.floating ? "width" : "height"] ? j : g < b + this.helperProportions.width / 2 && c - this.helperProportions.width / 2 < h && i < e + this.helperProportions.height / 2 && f - this.helperProportions.height / 2 < k
        },
        _intersectsWithPointer: function(a) {
            var b = d.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, a.top, a.height);
            a = d.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, a.left, a.width);
            b = b && a;
            a = this._getDragVerticalDirection();
            var c = this._getDragHorizontalDirection();
            if (!b)
                return false;
            return this.floating ? c && c == "right" || a == "down" ? 2 : 1 : a && (a == "down" ? 2 : 1)
        },
        _intersectsWithSides: function(a) {
            var b = d.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, a.top + a.height / 2, a.height);
            a = d.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, a.left + a.width / 2, a.width);
            var c = this._getDragVerticalDirection()
              , e = this._getDragHorizontalDirection();
            return this.floating && e ? e == "right" && a || e == "left" && !a : c && (c == "down" && b || c == "up" && !b)
        },
        _getDragVerticalDirection: function() {
            var a = this.positionAbs.top - this.lastPositionAbs.top;
            return a != 0 && (a > 0 ? "down" : "up")
        },
        _getDragHorizontalDirection: function() {
            var a = this.positionAbs.left - this.lastPositionAbs.left;
            return a != 0 && (a > 0 ? "right" : "left")
        },
        refresh: function(a) {
            this._refreshItems(a);
            this.refreshPositions();
            return this
        },
        _connectWith: function() {
            var a = this.options;
            return a.connectWith.constructor == String ? [a.connectWith] : a.connectWith
        },
        _getItemsAsjQuery: function(a) {
            var b = []
              , c = []
              , e = this._connectWith();
            if (e && a)
                for (a = e.length - 1; a >= 0; a--)
                    for (var f = d(e[a]), g = f.length - 1; g >= 0; g--) {
                        var h = d.data(f[g], "sortable");
                        if (h && h != this && !h.options.disabled)
                            c.push([d.isFunction(h.options.items) ? h.options.items.call(h.element) : d(h.options.items, h.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), h])
                    }
            c.push([d.isFunction(this.options.items) ? this.options.items.call(this.element, null, {
                options: this.options,
                item: this.currentItem
            }) : d(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);
            for (a = c.length - 1; a >= 0; a--)
                c[a][0].each(function() {
                    b.push(this)
                });
            return d(b)
        },
        _removeCurrentsFromItems: function() {
            for (var a = this.currentItem.find(":data(sortable-item)"), b = 0; b < this.items.length; b++)
                for (var c = 0; c < a.length; c++)
                    a[c] == this.items[b].item[0] && this.items.splice(b, 1)
        },
        _refreshItems: function(a) {
            this.items = [];
            this.containers = [this];
            var b = this.items
              , c = [[d.isFunction(this.options.items) ? this.options.items.call(this.element[0], a, {
                item: this.currentItem
            }) : d(this.options.items, this.element), this]]
              , e = this._connectWith();
            if (e)
                for (var f = e.length - 1; f >= 0; f--)
                    for (var g = d(e[f]), h = g.length - 1; h >= 0; h--) {
                        var i = d.data(g[h], "sortable");
                        if (i && i != this && !i.options.disabled) {
                            c.push([d.isFunction(i.options.items) ? i.options.items.call(i.element[0], a, {
                                item: this.currentItem
                            }) : d(i.options.items, i.element), i]);
                            this.containers.push(i)
                        }
                    }
            for (f = c.length - 1; f >= 0; f--) {
                a = c[f][1];
                e = c[f][0];
                h = 0;
                for (g = e.length; h < g; h++) {
                    i = d(e[h]);
                    i.data("sortable-item", a);
                    b.push({
                        item: i,
                        instance: a,
                        width: 0,
                        height: 0,
                        left: 0,
                        top: 0
                    })
                }
            }
        },
        refreshPositions: function(a) {
            if (this.offsetParent && this.helper)
                this.offset.parent = this._getParentOffset();
            for (var b = this.items.length - 1; b >= 0; b--) {
                var c = this.items[b];
                if (!(c.instance != this.currentContainer && this.currentContainer && c.item[0] != this.currentItem[0])) {
                    var e = this.options.toleranceElement ? d(this.options.toleranceElement, c.item) : c.item;
                    if (!a) {
                        c.width = e.outerWidth();
                        c.height = e.outerHeight()
                    }
                    e = e.offset();
                    c.left = e.left;
                    c.top = e.top
                }
            }
            if (this.options.custom && this.options.custom.refreshContainers)
                this.options.custom.refreshContainers.call(this);
            else
                for (b = this.containers.length - 1; b >= 0; b--) {
                    e = this.containers[b].element.offset();
                    this.containers[b].containerCache.left = e.left;
                    this.containers[b].containerCache.top = e.top;
                    this.containers[b].containerCache.width = this.containers[b].element.outerWidth();
                    this.containers[b].containerCache.height = this.containers[b].element.outerHeight()
                }
            return this
        },
        _createPlaceholder: function(a) {
            var b = a || this
              , c = b.options;
            if (!c.placeholder || c.placeholder.constructor == String) {
                var e = c.placeholder;
                c.placeholder = {
                    element: function() {
                        var f = d(document.createElement(b.currentItem[0].nodeName)).addClass(e || b.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper")[0];
                        if (!e)
                            f.style.visibility = "hidden";
                        return f
                    },
                    update: function(f, g) {
                        if (!(e && !c.forcePlaceholderSize)) {
                            g.height() || g.height(b.currentItem.innerHeight() - parseInt(b.currentItem.css("paddingTop") || 0, 10) - parseInt(b.currentItem.css("paddingBottom") || 0, 10));
                            g.width() || g.width(b.currentItem.innerWidth() - parseInt(b.currentItem.css("paddingLeft") || 0, 10) - parseInt(b.currentItem.css("paddingRight") || 0, 10))
                        }
                    }
                }
            }
            b.placeholder = d(c.placeholder.element.call(b.element, b.currentItem));
            b.currentItem.after(b.placeholder);
            c.placeholder.update(b, b.placeholder)
        },
        _contactContainers: function(a) {
            for (var b = null, c = null, e = this.containers.length - 1; e >= 0; e--)
                if (!d.ui.contains(this.currentItem[0], this.containers[e].element[0]))
                    if (this._intersectsWith(this.containers[e].containerCache)) {
                        if (!(b && d.ui.contains(this.containers[e].element[0], b.element[0]))) {
                            b = this.containers[e];
                            c = e
                        }
                    } else if (this.containers[e].containerCache.over) {
                        this.containers[e]._trigger("out", a, this._uiHash(this));
                        this.containers[e].containerCache.over = 0
                    }
            if (b)
                if (this.containers.length === 1) {
                    this.containers[c]._trigger("over", a, this._uiHash(this));
                    this.containers[c].containerCache.over = 1
                } else if (this.currentContainer != this.containers[c]) {
                    b = 1E4;
                    e = null;
                    for (var f = this.positionAbs[this.containers[c].floating ? "left" : "top"], g = this.items.length - 1; g >= 0; g--)
                        if (d.ui.contains(this.containers[c].element[0], this.items[g].item[0])) {
                            var h = this.items[g][this.containers[c].floating ? "left" : "top"];
                            if (Math.abs(h - f) < b) {
                                b = Math.abs(h - f);
                                e = this.items[g]
                            }
                        }
                    if (e || this.options.dropOnEmpty) {
                        this.currentContainer = this.containers[c];
                        e ? this._rearrange(a, e, null, true) : this._rearrange(a, null, this.containers[c].element, true);
                        this._trigger("change", a, this._uiHash());
                        this.containers[c]._trigger("change", a, this._uiHash(this));
                        this.options.placeholder.update(this.currentContainer, this.placeholder);
                        this.containers[c]._trigger("over", a, this._uiHash(this));
                        this.containers[c].containerCache.over = 1
                    }
                }
        },
        _createHelper: function(a) {
            var b = this.options;
            a = d.isFunction(b.helper) ? d(b.helper.apply(this.element[0], [a, this.currentItem])) : b.helper == "clone" ? this.currentItem.clone() : this.currentItem;
            a.parents("body").length || d(b.appendTo != "parent" ? b.appendTo : this.currentItem[0].parentNode)[0].appendChild(a[0]);
            if (a[0] == this.currentItem[0])
                this._storedCSS = {
                    width: this.currentItem[0].style.width,
                    height: this.currentItem[0].style.height,
                    position: this.currentItem.css("position"),
                    top: this.currentItem.css("top"),
                    left: this.currentItem.css("left")
                };
            if (a[0].style.width == "" || b.forceHelperSize)
                a.width(this.currentItem.width());
            if (a[0].style.height == "" || b.forceHelperSize)
                a.height(this.currentItem.height());
            return a
        },
        _adjustOffsetFromHelper: function(a) {
            if (typeof a == "string")
                a = a.split(" ");
            if (d.isArray(a))
                a = {
                    left: +a[0],
                    top: +a[1] || 0
                };
            if ("left"in a)
                this.offset.click.left = a.left + this.margins.left;
            if ("right"in a)
                this.offset.click.left = this.helperProportions.width - a.right + this.margins.left;
            if ("top"in a)
                this.offset.click.top = a.top + this.margins.top;
            if ("bottom"in a)
                this.offset.click.top = this.helperProportions.height - a.bottom + this.margins.top
        },
        _getParentOffset: function() {
            this.offsetParent = this.helper.offsetParent();
            var a = this.offsetParent.offset();
            if (this.cssPosition == "absolute" && this.scrollParent[0] != document && d.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
                a.left += this.scrollParent.scrollLeft();
                a.top += this.scrollParent.scrollTop()
            }
            if (this.offsetParent[0] == document.body || this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == "html" && d.browser.msie)
                a = {
                    top: 0,
                    left: 0
                };
            return {
                top: a.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: a.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            }
        },
        _getRelativeOffset: function() {
            if (this.cssPosition == "relative") {
                var a = this.currentItem.position();
                return {
                    top: a.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    left: a.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                }
            } else
                return {
                    top: 0,
                    left: 0
                }
        },
        _cacheMargins: function() {
            this.margins = {
                left: parseInt(this.currentItem.css("marginLeft"), 10) || 0,
                top: parseInt(this.currentItem.css("marginTop"), 10) || 0
            }
        },
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            }
        },
        _setContainment: function() {
            var a = this.options;
            if (a.containment == "parent")
                a.containment = this.helper[0].parentNode;
            if (a.containment == "document" || a.containment == "window")
                this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, d(a.containment == "document" ? document : window).width() - this.helperProportions.width - this.margins.left, (d(a.containment == "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
            if (!/^(document|window|parent)$/.test(a.containment)) {
                var b = d(a.containment)[0];
                a = d(a.containment).offset();
                var c = d(b).css("overflow") != "hidden";
                this.containment = [a.left + (parseInt(d(b).css("borderLeftWidth"), 10) || 0) + (parseInt(d(b).css("paddingLeft"), 10) || 0) - this.margins.left, a.top + (parseInt(d(b).css("borderTopWidth"), 10) || 0) + (parseInt(d(b).css("paddingTop"), 10) || 0) - this.margins.top, a.left + (c ? Math.max(b.scrollWidth, b.offsetWidth) : b.offsetWidth) - (parseInt(d(b).css("borderLeftWidth"), 10) || 0) - (parseInt(d(b).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, a.top + (c ? Math.max(b.scrollHeight, b.offsetHeight) : b.offsetHeight) - (parseInt(d(b).css("borderTopWidth"), 10) || 0) - (parseInt(d(b).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]
            }
        },
        _convertPositionTo: function(a, b) {
            if (!b)
                b = this.position;
            a = a == "absolute" ? 1 : -1;
            var c = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && d.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent
              , e = /(html|body)/i.test(c[0].tagName);
            return {
                top: b.top + this.offset.relative.top * a + this.offset.parent.top * a - (d.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : e ? 0 : c.scrollTop()) * a),
                left: b.left + this.offset.relative.left * a + this.offset.parent.left * a - (d.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : e ? 0 : c.scrollLeft()) * a)
            }
        },
        _generatePosition: function(a) {
            var b = this.options
              , c = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && d.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent
              , e = /(html|body)/i.test(c[0].tagName);
            if (this.cssPosition == "relative" && !(this.scrollParent[0] != document && this.scrollParent[0] != this.offsetParent[0]))
                this.offset.relative = this._getRelativeOffset();
            var f = a.pageX
              , g = a.pageY;
            if (this.originalPosition) {
                if (this.containment) {
                    if (a.pageX - this.offset.click.left < this.containment[0])
                        f = this.containment[0] + this.offset.click.left;
                    if (a.pageY - this.offset.click.top < this.containment[1])
                        g = this.containment[1] + this.offset.click.top;
                    if (a.pageX - this.offset.click.left > this.containment[2])
                        f = this.containment[2] + this.offset.click.left;
                    if (a.pageY - this.offset.click.top > this.containment[3])
                        g = this.containment[3] + this.offset.click.top
                }
                if (b.grid) {
                    g = this.originalPageY + Math.round((g - this.originalPageY) / b.grid[1]) * b.grid[1];
                    g = this.containment ? !(g - this.offset.click.top < this.containment[1] || g - this.offset.click.top > this.containment[3]) ? g : !(g - this.offset.click.top < this.containment[1]) ? g - b.grid[1] : g + b.grid[1] : g;
                    f = this.originalPageX + Math.round((f - this.originalPageX) / b.grid[0]) * b.grid[0];
                    f = this.containment ? !(f - this.offset.click.left < this.containment[0] || f - this.offset.click.left > this.containment[2]) ? f : !(f - this.offset.click.left < this.containment[0]) ? f - b.grid[0] : f + b.grid[0] : f
                }
            }
            return {
                top: g - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (d.browser.safari && this.cssPosition == "fixed" ? 0 : this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : e ? 0 : c.scrollTop()),
                left: f - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (d.browser.safari && this.cssPosition == "fixed" ? 0 : this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : e ? 0 : c.scrollLeft())
            }
        },
        _rearrange: function(a, b, c, e) {
            c ? c[0].appendChild(this.placeholder[0]) : b.item[0].parentNode.insertBefore(this.placeholder[0], this.direction == "down" ? b.item[0] : b.item[0].nextSibling);
            this.counter = this.counter ? ++this.counter : 1;
            var f = this
              , g = this.counter;
            window.setTimeout(function() {
                g == f.counter && f.refreshPositions(!e)
            }, 0)
        },
        _clear: function(a, b) {
            this.reverting = false;
            var c = [];
            !this._noFinalSort && this.currentItem.parent().length && this.placeholder.before(this.currentItem);
            this._noFinalSort = null;
            if (this.helper[0] == this.currentItem[0]) {
                for (var e in this._storedCSS)
                    if (this._storedCSS[e] == "auto" || this._storedCSS[e] == "static")
                        this._storedCSS[e] = "";
                this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")
            } else
                this.currentItem.show();
            this.fromOutside && !b && c.push(function(f) {
                this._trigger("receive", f, this._uiHash(this.fromOutside))
            });
            if ((this.fromOutside || this.domPosition.prev != this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent != this.currentItem.parent()[0]) && !b)
                c.push(function(f) {
                    this._trigger("update", f, this._uiHash())
                });
            if (!d.ui.contains(this.element[0], this.currentItem[0])) {
                b || c.push(function(f) {
                    this._trigger("remove", f, this._uiHash())
                });
                for (e = this.containers.length - 1; e >= 0; e--)
                    if (d.ui.contains(this.containers[e].element[0], this.currentItem[0]) && !b) {
                        c.push(function(f) {
                            return function(g) {
                                f._trigger("receive", g, this._uiHash(this))
                            }
                        }
                        .call(this, this.containers[e]));
                        c.push(function(f) {
                            return function(g) {
                                f._trigger("update", g, this._uiHash(this))
                            }
                        }
                        .call(this, this.containers[e]))
                    }
            }
            for (e = this.containers.length - 1; e >= 0; e--) {
                b || c.push(function(f) {
                    return function(g) {
                        f._trigger("deactivate", g, this._uiHash(this))
                    }
                }
                .call(this, this.containers[e]));
                if (this.containers[e].containerCache.over) {
                    c.push(function(f) {
                        return function(g) {
                            f._trigger("out", g, this._uiHash(this))
                        }
                    }
                    .call(this, this.containers[e]));
                    this.containers[e].containerCache.over = 0
                }
            }
            this._storedCursor && d("body").css("cursor", this._storedCursor);
            this._storedOpacity && this.helper.css("opacity", this._storedOpacity);
            if (this._storedZIndex)
                this.helper.css("zIndex", this._storedZIndex == "auto" ? "" : this._storedZIndex);
            this.dragging = false;
            if (this.cancelHelperRemoval) {
                if (!b) {
                    this._trigger("beforeStop", a, this._uiHash());
                    for (e = 0; e < c.length; e++)
                        c[e].call(this, a);
                    this._trigger("stop", a, this._uiHash())
                }
                return false
            }
            b || this._trigger("beforeStop", a, this._uiHash());
            this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
            this.helper[0] != this.currentItem[0] && this.helper.remove();
            this.helper = null;
            if (!b) {
                for (e = 0; e < c.length; e++)
                    c[e].call(this, a);
                this._trigger("stop", a, this._uiHash())
            }
            this.fromOutside = false;
            return true
        },
        _trigger: function() {
            d.Widget.prototype._trigger.apply(this, arguments) === false && this.cancel()
        },
        _uiHash: function(a) {
            var b = a || this;
            return {
                helper: b.helper,
                placeholder: b.placeholder || d([]),
                position: b.position,
                originalPosition: b.originalPosition,
                offset: b.positionAbs,
                item: b.currentItem,
                sender: a ? a.element : null
            }
        }
    });
    d.extend(d.ui.sortable, {
        version: "1.8.16"
    })
}
)(jQuery);
;
define("jquery-ui", ["jquery"], function() {});

/*!
 * jquery.event.drag - v 2.0.0
 * Copyright (c) 2010 Three Dub Media - http://threedubmedia.com
 * Open Source MIT License - http://threedubmedia.com/code/license
 */
;(function(f, jQuery) {
    f.fn.drag = function(b, a, d) {
        var e = typeof b == "string" ? b : ""
          , k = f.isFunction(b) ? b : f.isFunction(a) ? a : null;
        if (e.indexOf("drag") !== 0)
            e = "drag" + e;
        d = (b == k ? a : d) || {};
        return k ? this.bind(e, d, k) : this.trigger(e)
    }
    ;
    var i = f.event
      , h = i.special
      , c = h.drag = {
        defaults: {
            which: 1,
            distance: 0,
            not: ":input",
            handle: null,
            relative: false,
            drop: true,
            click: false
        },
        datakey: "dragdata",
        livekey: "livedrag",
        add: function(b) {
            var a = f.data(this, c.datakey)
              , d = b.data || {};
            a.related += 1;
            if (!a.live && b.selector) {
                a.live = true;
                i.add(this, "draginit." + c.livekey, c.delegate)
            }
            f.each(c.defaults, function(e) {
                if (d[e] !== undefined)
                    a[e] = d[e]
            })
        },
        remove: function() {
            f.data(this, c.datakey).related -= 1
        },
        setup: function() {
            if (!f.data(this, c.datakey)) {
                var b = f.extend({
                    related: 0
                }, c.defaults);
                f.data(this, c.datakey, b);
                i.add(this, "mousedown", c.init, b);
                this.attachEvent && this.attachEvent("ondragstart", c.dontstart)
            }
        },
        teardown: function() {
            if (!f.data(this, c.datakey).related) {
                f.removeData(this, c.datakey);
                i.remove(this, "mousedown", c.init);
                i.remove(this, "draginit", c.delegate);
                c.textselect(true);
                this.detachEvent && this.detachEvent("ondragstart", c.dontstart)
            }
        },
        init: function(b) {
            var a = b.data, d;
            if (!(a.which > 0 && b.which != a.which))
                if (!f(b.target).is(a.not))
                    if (!(a.handle && !f(b.target).closest(a.handle, b.currentTarget).length)) {
                        a.propagates = 1;
                        a.interactions = [c.interaction(this, a)];
                        a.target = b.target;
                        a.pageX = b.pageX;
                        a.pageY = b.pageY;
                        a.dragging = null;
                        d = c.hijack(b, "draginit", a);
                        if (a.propagates) {
                            if ((d = c.flatten(d)) && d.length) {
                                a.interactions = [];
                                f.each(d, function() {
                                    a.interactions.push(c.interaction(this, a))
                                })
                            }
                            a.propagates = a.interactions.length;
                            a.drop !== false && h.drop && h.drop.handler(b, a);
                            c.textselect(false);
                            i.add(document, "mousemove mouseup", c.handler, a);
                            return false
                        }
                    }
        },
        interaction: function(b, a) {
            return {
                drag: b,
                callback: new c.callback,
                droppable: [],
                offset: f(b)[a.relative ? "position" : "offset"]() || {
                    top: 0,
                    left: 0
                }
            }
        },
        handler: function(b) {
            var a = b.data;
            switch (b.type) {
            case !a.dragging && "mousemove":
                if (Math.pow(b.pageX - a.pageX, 2) + Math.pow(b.pageY - a.pageY, 2) < Math.pow(a.distance, 2))
                    break;
                b.target = a.target;
                c.hijack(b, "dragstart", a);
                if (a.propagates)
                    a.dragging = true;
            case "mousemove":
                if (a.dragging) {
                    c.hijack(b, "drag", a);
                    if (a.propagates) {
                        a.drop !== false && h.drop && h.drop.handler(b, a);
                        break
                    }
                    b.type = "mouseup"
                }
            case "mouseup":
                i.remove(document, "mousemove mouseup", c.handler);
                if (a.dragging) {
                    a.drop !== false && h.drop && h.drop.handler(b, a);
                    c.hijack(b, "dragend", a)
                }
                c.textselect(true);
                if (a.click === false && a.dragging) {
                    jQuery.event.triggered = true;
                    setTimeout(function() {
                        jQuery.event.triggered = false
                    }, 20);
                    a.dragging = false
                }
                break
            }
        },
        delegate: function(b) {
            var a = [], d, e = f.data(this, "events") || {};
            f.each(e.live || [], function(k, j) {
                if (j.preType.indexOf("drag") === 0)
                    if (d = f(b.target).closest(j.selector, b.currentTarget)[0]) {
                        i.add(d, j.origType + "." + c.livekey, j.origHandler, j.data);
                        f.inArray(d, a) < 0 && a.push(d)
                    }
            });
            if (!a.length)
                return false;
            return f(a).bind("dragend." + c.livekey, function() {
                i.remove(this, "." + c.livekey)
            })
        },
        hijack: function(b, a, d, e, k) {
            if (d) {
                var j = {
                    event: b.originalEvent,
                    type: b.type
                }, n = a.indexOf("drop") ? "drag" : "drop", l, o = e || 0, g, m;
                e = !isNaN(e) ? e : d.interactions.length;
                b.type = a;
                b.originalEvent = null;
                d.results = [];
                do
                    if (g = d.interactions[o])
                        if (!(a !== "dragend" && g.cancelled)) {
                            m = c.properties(b, d, g);
                            g.results = [];
                            f(k || g[n] || d.droppable).each(function(q, p) {
                                l = (m.target = p) ? i.handle.call(p, b, m) : null;
                                if (l === false) {
                                    if (n == "drag") {
                                        g.cancelled = true;
                                        d.propagates -= 1
                                    }
                                    if (a == "drop")
                                        g[n][q] = null
                                } else if (a == "dropinit")
                                    g.droppable.push(c.element(l) || p);
                                if (a == "dragstart")
                                    g.proxy = f(c.element(l) || g.drag)[0];
                                g.results.push(l);
                                delete b.result;
                                if (a !== "dropinit")
                                    return l
                            });
                            d.results[o] = c.flatten(g.results);
                            if (a == "dropinit")
                                g.droppable = c.flatten(g.droppable);
                            a == "dragstart" && !g.cancelled && m.update()
                        }
                while (++o < e);b.type = j.type;
                b.originalEvent = j.event;
                return c.flatten(d.results)
            }
        },
        properties: function(b, a, d) {
            var e = d.callback;
            e.drag = d.drag;
            e.proxy = d.proxy || d.drag;
            e.startX = a.pageX;
            e.startY = a.pageY;
            e.deltaX = b.pageX - a.pageX;
            e.deltaY = b.pageY - a.pageY;
            e.originalX = d.offset.left;
            e.originalY = d.offset.top;
            e.offsetX = b.pageX - (a.pageX - e.originalX);
            e.offsetY = b.pageY - (a.pageY - e.originalY);
            e.drop = c.flatten((d.drop || []).slice());
            e.available = c.flatten((d.droppable || []).slice());
            return e
        },
        element: function(b) {
            if (b && (b.jquery || b.nodeType == 1))
                return b
        },
        flatten: function(b) {
            return f.map(b, function(a) {
                return a && a.jquery ? f.makeArray(a) : a && a.length ? c.flatten(a) : a
            })
        },
        textselect: function(b) {
            f(document)[b ? "unbind" : "bind"]("selectstart", c.dontstart).attr("unselectable", b ? "off" : "on").css("MozUserSelect", b ? "" : "none")
        },
        dontstart: function() {
            return false
        },
        callback: function() {}
    };
    c.callback.prototype = {
        update: function() {
            h.drop && this.available.length && f.each(this.available, function(b) {
                h.drop.locate(this, b)
            })
        }
    };
    h.draginit = h.dragstart = h.dragend = c
}
)(vwoe_$ || $, jQuery);

/*!
 * jquery.event.drop - v 2.0.0
 * Copyright (c) 2010 Three Dub Media - http://threedubmedia.com
 * Open Source MIT License - http://threedubmedia.com/code/license
 */
;(function(f, jQuery) {
    f.fn.drop = function(c, a, d) {
        var g = typeof c == "string" ? c : ""
          , e = f.isFunction(c) ? c : f.isFunction(a) ? a : null;
        if (g.indexOf("drop") !== 0)
            g = "drop" + g;
        d = (c == e ? a : d) || {};
        return e ? this.bind(g, d, e) : this.trigger(g)
    }
    ;
    f.drop = function(c) {
        c = c || {};
        b.multi = c.multi === true ? Infinity : c.multi === false ? 1 : !isNaN(c.multi) ? c.multi : b.multi;
        b.delay = c.delay || b.delay;
        b.tolerance = f.isFunction(c.tolerance) ? c.tolerance : c.tolerance === null ? null : b.tolerance;
        b.mode = c.mode || b.mode || "intersect"
    }
    ;
    var l = f.event
      , i = l.special
      , b = f.event.special.drop = {
        multi: 1,
        delay: 20,
        mode: "overlap",
        targets: [],
        datakey: "dropdata",
        livekey: "livedrop",
        add: function(c) {
            var a = f.data(this, b.datakey);
            a.related += 1;
            if (!a.live && c.selector) {
                a.live = true;
                l.add(this, "dropinit." + b.livekey, b.delegate)
            }
        },
        remove: function() {
            f.data(this, b.datakey).related -= 1
        },
        setup: function() {
            if (!f.data(this, b.datakey)) {
                f.data(this, b.datakey, {
                    related: 0,
                    active: [],
                    anyactive: 0,
                    winner: 0,
                    location: {}
                });
                b.targets.push(this)
            }
        },
        teardown: function() {
            if (!f.data(this, b.datakey).related) {
                f.removeData(this, b.datakey);
                l.remove(this, "dropinit", b.delegate);
                var c = this;
                b.targets = f.grep(b.targets, function(a) {
                    return a !== c
                })
            }
        },
        handler: function(c, a) {
            var d;
            if (a)
                switch (c.type) {
                case "mousedown":
                    d = f(b.targets);
                    if (typeof a.drop == "string")
                        d = d.filter(a.drop);
                    d.each(function() {
                        var g = f.data(this, b.datakey);
                        g.active = [];
                        g.anyactive = 0;
                        g.winner = 0
                    });
                    a.droppable = d;
                    b.delegates = [];
                    i.drag.hijack(c, "dropinit", a);
                    b.delegates = f.unique(i.drag.flatten(b.delegates));
                    break;
                case "mousemove":
                    b.event = c;
                    b.timer || b.tolerate(a);
                    break;
                case "mouseup":
                    b.timer = clearTimeout(b.timer);
                    if (a.propagates) {
                        i.drag.hijack(c, "drop", a);
                        i.drag.hijack(c, "dropend", a);
                        f.each(b.delegates || [], function() {
                            l.remove(this, "." + b.livekey)
                        })
                    }
                    break
                }
        },
        delegate: function(c) {
            var a = [], d, g = f.data(this, "events") || {};
            f.each(g.live || [], function(e, h) {
                if (h.preType.indexOf("drop") === 0) {
                    d = f(c.currentTarget).find(h.selector);
                    d.length && d.each(function() {
                        l.add(this, h.origType + "." + b.livekey, h.origHandler, h.data);
                        f.inArray(this, a) < 0 && a.push(this)
                    })
                }
            });
            b.delegates.push(a);
            return a.length ? f(a) : false
        },
        locate: function(c, a) {
            var d = f.data(c, b.datakey)
              , g = f(c)
              , e = g.offset() || {}
              , h = g.outerHeight();
            g = g.outerWidth();
            e = {
                elem: c,
                width: g,
                height: h,
                top: e.top,
                left: e.left,
                right: e.left + g,
                bottom: e.top + h
            };
            if (d) {
                d.location = e;
                d.index = a;
                d.elem = c
            }
            return e
        },
        contains: function(c, a) {
            return (a[0] || a.left) >= c.left && (a[0] || a.right) <= c.right && (a[1] || a.top) >= c.top && (a[1] || a.bottom) <= c.bottom
        },
        modes: {
            intersect: function(c, a, d) {
                return this.contains(d, [c.pageX, c.pageY]) ? 1E9 : this.modes.overlap.apply(this, arguments)
            },
            overlap: function(c, a, d) {
                return Math.max(0, Math.min(d.bottom, a.bottom) - Math.max(d.top, a.top)) * Math.max(0, Math.min(d.right, a.right) - Math.max(d.left, a.left))
            },
            fit: function(c, a, d) {
                return this.contains(d, a) ? 1 : 0
            },
            middle: function(c, a, d) {
                return this.contains(d, [a.left + a.width * 0.5, a.top + a.height * 0.5]) ? 1 : 0
            }
        },
        sort: function(c, a) {
            return a.winner - c.winner || c.index - a.index
        },
        tolerate: function(c) {
            var a, d, g, e, h, m, j = 0, k, p = c.interactions.length, n = [b.event.pageX, b.event.pageY], o = b.tolerance || b.modes[b.mode];
            do
                if (k = c.interactions[j]) {
                    if (!k)
                        return;
                    k.drop = [];
                    h = [];
                    m = k.droppable.length;
                    if (o)
                        g = b.locate(k.proxy);
                    a = 0;
                    do
                        if (d = k.droppable[a]) {
                            e = f.data(d, b.datakey);
                            if (d = e.location) {
                                e.winner = o ? o.call(b, b.event, g, d) : b.contains(d, n) ? 1 : 0;
                                h.push(e)
                            }
                        }
                    while (++a < m);h.sort(b.sort);
                    a = 0;
                    do
                        if (e = h[a])
                            if (e.winner && k.drop.length < b.multi) {
                                if (!e.active[j] && !e.anyactive)
                                    if (i.drag.hijack(b.event, "dropstart", c, j, e.elem)[0] !== false) {
                                        e.active[j] = 1;
                                        e.anyactive += 1
                                    } else
                                        e.winner = 0;
                                e.winner && k.drop.push(e.elem)
                            } else if (e.active[j] && e.anyactive == 1) {
                                i.drag.hijack(b.event, "dropend", c, j, e.elem);
                                e.active[j] = 0;
                                e.anyactive -= 1
                            }
                    while (++a < m)
                }
            while (++j < p);if (b.last && n[0] == b.last.pageX && n[1] == b.last.pageY)
                delete b.timer;
            else
                b.timer = setTimeout(function() {
                    b.tolerate(c)
                }, b.delay);
            b.last = b.event
        }
    };
    i.dropinit = i.dropstart = i.dropend = b
}
)(vwoe_$ || $, jQuery);
define("drag-drop", ["jquery"], function() {});

/**
 * Copyright (c) 2009 Gabriele Campi (http://www.madeinthecave.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

// Includes a fix to make this thing stop. Added by Amit
(function(a) {
    var b = {
        auto: true,
        area: 10,
        scroll: 200,
        speed: 600,
        play_key: 44,
        pause_key: 46
    };
    a.fn.magicScroll = function(e) {
        var d = a.extend({}, b, e);
        var h = a("html,body");
        var f = d.auto;
        if (d.stop) {
            h.unbind("mousemove");
            return;
        }
        if (d.auto) {
            h.bind("mousemove", function(i) {
                c(i)
            })
        }
        var g = false;
        a(document).keyup(function(i) {
            if (i.which == 17) {
                g = false
            }
        });
        a(document).keydown(function(i) {
            if (i.which == 17) {
                g = true
            }
        });
        if (d.play_key == d.pause_key) {
            h.keypress(function(i) {
                if (i.which == d.play_key && g == true) {
                    if (f) {
                        h.unbind("mousemove");
                        f = false
                    } else {
                        h.bind("mousemove", function(j) {
                            c(j);
                            f = true
                        })
                    }
                }
            })
        }
        if (d.play_key != d.pause_key) {
            h.keypress(function(i) {
                if (i.which == d.play_key && g == true) {
                    h.bind("mousemove", function(j) {
                        c(j);
                        f = true
                    })
                }
            });
            h.keypress(function(i) {
                if (i.which == d.pause_key && g == true) {
                    h.unbind("mousemove");
                    f = false
                }
            })
        }
        function c(l) {
            var i = a(window).scrollTop();
            var k;
            var m;
            var j;
            k = parseInt(l.pageY);
            win_heigh = parseInt(a(window).height());
            win_heigh_limit_down = parseInt(win_heigh - d.area + i);
            win_heigh_limit_top = parseInt(d.area + i);
            doc_heigh = parseInt(a(document).height());
            if (k > win_heigh_limit_down) {
                a("html,body").stop().animate({
                    scrollTop: i + d.scroll
                }, d.speed);
                a("html,body").unbind("mousemove");
                setTimeout(function() {
                    a("html,body").bind("mousemove", function(n) {
                        c(n);
                        f = true
                    })
                }, d.speed)
            }
            if (k < win_heigh_limit_top) {
                a("html,body").stop().animate({
                    scrollTop: i - d.scroll
                }, d.speed);
                a("html,body").unbind("mousemove");
                setTimeout(function() {
                    a("html,body").bind("mousemove", function(n) {
                        c(n);
                        f = true
                    })
                }, d.speed)
            }
        }
    }
}
)(vwoe_$);

define("magic-scroll", ["jquery"], function() {});

// This file contains code that is shared between designer and that on the injected website.

// ToDo Remove after refactoring
// list of supported operations
//0 - Name of operation as it appears in variations-box
//1 - Type of operation
//3 - Key for the operation in changes/variation objects in elements store.
var opNames = {
    move: ['Move', 'vwoCss', 'move'],
    moveResize: ['Move / Resize', 'vwoCss', 'move-resize'],
    rearrange: ['Rearrange', 'rearrange', 'sort'],

    // rearrange v2 supports full body rearrange
    rearrange2: ['Rearrange', 'rearrange2', 'sort2'],
    html: ['Change Text', 'html', 'edit-text'],
    resize: ['Resize', 'vwoCss', 'resize'],
    content: ['Edit HTML', 'content', 'edit'],
    contentHead: ['JavaScript/CSS', 'edit-html'],
    remove: ['Remove', 'vwoCss', 'remove'],
    changeURL: ['Change URL', 'attr', 'change-href'],
    changeSRC: ['Change Image', 'attr', 'change-image'],
    editImg: ['Edit Image', 'attr', 'edit-image'],
    changeCSS: ['Change Styling', 'vwoCss', 'change-css'],
    backgroundImg: ['Change Background Image', 'vwoCss', 'change-bkgImg'],
    visibility: ['Toggle Visibility', 'vwoCss', 'hide'],
    editBkgImg: ['Edit Background Image', 'vwoCss', 'edit-bkg-img'],
    cloneElement: ['Cloned Element', 'after', 'clone-element'],
    _clickElement: ['Click on Element', 'addClass', 'click-element'],

    insert: ['Insert Element', 'insert', 'insert'],
    paste: ['Paste Element', 'insert', 'paste'],
    format: ['Change Formatting', 'format', 'format']
};

/**
 * Processes an xpath using the following algo:
 * - If a _vwo_sec class is found, start the xpath from there
 * - Else if and ID is found, start from the last ID
 * - Always remove first-child from in front of IDs
 */
function processXpath(xpath) {
    try {
        if (!xpath)
            return xpath;
        var pos;
        if ((pos = xpath.search(/([^>+\s]*)\._vwo_sec_[\d]*.*/)) != -1) {
            return xpath.substr(pos).trim().replace(/(#(\w|_|-)+):first-child/g, "$1");
        } else if ((pos = xpath.search(/[^>+\s]*#[^#]*$/)) != -1) {
            return xpath.substr(pos).trim().replace(/(#(\w|_|-)+):first-child/g, "$1");
        }
        return xpath;
    } catch (e) {
        errorReport(e, printStackTrace(), 'designer-utils::processXpath', arguments);
    }
}

/**
 * Get a unique timestamp
 *
 * TODO: move to some utils file
 * @return {number} Current Timestamp
 */
function getTimeStamp() {
    var time = (new Date()).getTime();
    while (time == (new Date()).getTime())
        ;
    return (new Date()).getTime();
}

/**
 * Calculates coal timestamps from the given classes list
 * @param  {[type]} classNames [description]
 * @return {[type]}            [description]
 */
function getCoalTimestampsAndElIdsFromClasses(classNames) {
    var classesArray, regex = /_vwo_coal_(\d*)_(\d*)/, obj = {
        timestamps: [],
        elIds: []
    };
    if (!classNames) {
        return obj;
    }
    classesArray = classNames.split(' ');
    $.each(classesArray, function(index, className) {
        if (className.search(regex) !== -1) {
            obj.timestamps.push(className.replace(regex, "$1"));
            obj.elIds.push(className.replace(regex, "$2"));
        }
    });
    return obj;
}

/**
 * Removes undefined or null items
 * @param arr
 * @return {Array}
 */
function squashArray(arr) {
    return arr = $.map(arr, function(value) {
        return value;
    });
}

/***Following functions are taken from JsLib**/

/**
 * @param {string} s URL to convert to Absolute URL
 * @return {string} Absolute URL for the input.
 * Changes the URL to absolute path.
 * Modified logic for removing ../
 * Create an anchor with the value s and it will automatically convert the URL to absolute URL
 **/
function _toAbsURL(s) {
    function escapeHTML(x) {
        return x.split('&').join('&amp;').split('<').join('&lt;').split('"').join('&quot;');
    }

    var el = document.createElement('div');
    // some browsers dont absolutize urls unless the link is added to a div.
    el['innerHTML'] = '<a href="' + escapeHTML(s) + '">x</a>';
    return el.firstChild.href;
}

function isHashPresent(url) {
    var hashIndex = url.indexOf("#");
    return (hashIndex !== -1);
}

function isQueryParamPresent(url) {
    var hashIndex = url.indexOf("#")
      , questionIndex = url.indexOf("?")
      , //To support old patterns (in already running tests), = can independently decide if query param is present.
    equaltoIndex = url.indexOf('=');
    return hashIndex === -1 ? (questionIndex !== -1 || equaltoIndex !== -1) : (questionIndex !== -1 && hashIndex > questionIndex || equaltoIndex !== -1 && hashIndex > equaltoIndex);
}

/**
 * @param {string} url URL to compare.
 * @param {string} pattern Match url to this.
 * @param {boolean} [returnVal=false] returnVal Pass true to return matched values. (optional)
 * @return {boolean|Array.<string>} Matched values or true/false.
 * Matches the url with pattern and returns true/false or the match array.
 * The following processing is done in order.
 *1.If ? or = not present in pattern then all query parameters are stripped from url.
 *2.If either / or /? are the last part of pattern then / is stripped off. Same applies for url.
 *3.Try matching url with pattern now, if match fails go for further processing other wise report a match
 *4.Remove www from pattern and url(if present) and try matching again. If match found report otherwise go for further processing.
 *5.Clean the URL and pattern i.e. strip off /home.{3,4}, /default.{3,4} and /index.{3,4}(e.g. /index.php) from url(if custom url not present otherwise just use the custom url without stripping).For pattern stripping will always be done.
 *6.Try for a match now with cleaned URL and pattern, if match found record a match, otherwise go for further  processing
 *6.If the pattern has no wildcard then convert url to absolute and try for a match, if match found record a match, report no match
 */
function _matchWildcard(url, pattern, returnVal) {
    if (url == null || typeof url == "undefined") {
        return false;
    }
    var isQueryParamPresentInPattern = isQueryParamPresent(pattern)
      , isHashPresentInPattern = isHashPresent(pattern)
      , isQueryParamPresentInURL = isQueryParamPresent(url)
      , isHashPresentInURL = isHashPresent(url);

    /**
     * @param {string} text Regex to escape.
     * @return {string} Escaped regex.
     * Escapes the special characters in the regex. Original fn was deprecated as seen on Author's blog.
     * This fn is * now the recommended fn from the same blog
     */
    function _regexEscape(text) {
        // Changelog: Escape all special characters used in regex
        return text.replace(/[\-\[\]{}()*+?.,\/\\^$|#\s]/g, "\\$&");
    }

    /**
     * @param {string} url URL to clean.
     * @param {boolean} isPattern Pass true if url is a URL pattern (optional).
     * @return {string} Cleaned URL.
     * strip off /home.{3,4}, /default.{3,4} and /index.{3,4}(e.g. /index.php) from url(if custom url not present otherwise just use the custom url without stripping).For pattern, stripping will always be done.
     */
    function _cleanURL(url, isPattern) {
        // Changelog: undefined is equal to false in if
        if (window._vis_opt_url && !isPattern) {
            return window._vis_opt_url;
        }

        return url.replace(/^(.*[^\*])(\/(home|default|index)\..{3,4})((\?|#).*)*$/i, "$1$4");
        //hash can also be there.
    }

    /**
     * @param {string} url String from which www has to be removed.
     * @param {boolean} isPattern Pass true if url is a URL pattern (optional).
     * @return {string} URL without www.
     * Removes www from the patern and url
     */
    function _removeWWW(url, isPattern) {
        // Changelog: Replace and combine in same line. No need to check for length.
        url = url.replace(/^(https?:\/\/)(www\.)?(.*)$/i, "$1$3");

        // Changelog: undefined is equal to false in if
        if (isPattern) {
            url = url.replace(/(^\*?|\/\/)www\./i, "$1");
        }

        return url;
    }

    /**
   *
   * @param {string} url String from which extra slashes has to be removed
   * @param {boolean} isQueryParamPresent
   * @param {boolean} isHashPresent
   * @return {string}
   */
    function _stripSlashes(url, isQueryParamPresent, isHashPresent) {
        url = url.replace(/\/$/, '');
        if (isQueryParamPresent) {
            var firstSlashQuestionIndex = url.indexOf('/?');
            var firstQuestionIndex = url.indexOf('?');
            //Eliminate the case like example.com?#/?
            if (firstQuestionIndex - 1 === firstSlashQuestionIndex) {
                url = url.replace(/\/\?([^\?]*)(.*)/, "?$1$2");
            }
        }
        if (isHashPresent) {
            var firstSlashHashIndex = url.indexOf('/#');
            var firstHashIndex = url.indexOf('#');
            //Eliminate the case like example.com#/#
            if (firstHashIndex - 1 === firstSlashHashIndex) {
                url = url.replace(/\/#([^#]*)(.*)/, "#$1$2");
            }
        }
        return url;
    }

    //TODO: Assumption is that following the first # in URL is the actual hash. In some extreme cases, it may not be true
    //Check if Query parameter is present in pattern
    //Handle the case like example.com/#something?somethingelse. There is no query param in this URL.
    if (!isQueryParamPresentInPattern) {
        //if pattern does not have ?, remove all query parameters{
        if (isQueryParamPresentInURL && isHashPresentInURL) {
            url = url.replace(/^(.*?)(\?[^#]*)(#?.*)$/, "$1$3");
            // .com/?test=1#test1 should give .com/#test1
        } else if (isQueryParamPresentInURL && !isHashPresentInURL) {
            url = url.replace(/^(.*)(\?.*)$/, "$1");
        }
    }
    if (!isHashPresentInPattern) {
        //if pattern does not have #, remove the hash completely from URL{
        //Make the regex lazy to handle URL like example.com/#test#dsd.Cleaned URL should be example.com/ and not example.com/#test
        if (isHashPresentInURL) {
            //As query params are already removed. This is the only case
            url = url.replace(/^(.*?)(#.*)$/, "$1");
        }
    }

    if (url !== '/') {
        url = _stripSlashes(url, isQueryParamPresentInURL, isHashPresentInURL);
    }
    if (pattern !== '/') {
        pattern = _stripSlashes(pattern, isQueryParamPresentInPattern, isHashPresentInPattern);
    }

    var pattern_url = new RegExp("^" + _regexEscape(pattern).replace(/\\\*/g, "(.*)") + "$",'gi'), p, full_url;

    // Changelog: Everywhere below, !returnVal or pattern_url.exec does the same thing as if(returnVal) return returnVal else exec
    if (pattern_url.test(url)) {
        pattern_url = new RegExp("^" + _regexEscape(pattern).replace(/\\\*/g, "(.*)") + "$",'gi');
        //Changelog_13:regex needs to be calculated again cause test and exec remembers their position and thus will change values b/w each call.
        return !returnVal || pattern_url.exec(url);
    }
    url = _removeWWW(url);
    pattern = _removeWWW(pattern, 1);

    pattern_url = new RegExp("^" + _regexEscape(pattern).replace(/\\\*/g, "(.*)") + "$",'gi');

    if (pattern_url.test(url)) {
        //regex needs to be calculated again cause test and exec remembers their position and thus will change values b/w each call.
        pattern_url = new RegExp("^" + _regexEscape(pattern).replace(/\\\*/g, "(.*)") + "$",'gi');
        return !returnVal || pattern_url.exec(url);
    }
    p = _cleanURL(pattern, 1);
    if (-1 === pattern.indexOf('*')) {
        //if no * is contained, then maybe href is filename while pattern is full_url/href
        full_url = _removeWWW(_toAbsURL(url)).replace(/\/$/, '').replace(/\/\?/, "?");
        if (full_url === pattern || full_url === p) {
            return true;
        }
    }
    url = _cleanURL(url);
    pattern = p;
    pattern_url = new RegExp("^" + _regexEscape(pattern).replace(/\\\*/g, "(.*)") + "$",'gi');
    if (pattern_url.test(url)) {
        pattern_url = new RegExp("^" + _regexEscape(pattern).replace(/\\\*/g, "(.*)") + "$",'gi');
        //Changelog_13:regex needs to be calculated again cause test and exec remembers their position and thus will change values b/w each call.
        return !returnVal || pattern_url.exec(url);
    }
    return false;
}

if (window.VWOInjected) {
    vwoe_$.extend(VWOInjected, {
        processXpath: processXpath,
        getTimeStamp: getTimeStamp,
        getCoalTimestampsAndElIdsFromClasses: getCoalTimestampsAndElIdsFromClasses,
        isHashPresent: isHashPresent,
        isQueryParamPresent: isQueryParamPresent,
        toAbsURL: _toAbsURL,
        matchWildcard: _matchWildcard
    });
}

/**
 * Overriding $.Deferred with some additional methods.
 * Also the `resolveWith` function is put under try-catch-ed
 * wrapper method.a
 */
(function($) {
    var Deferred = $.Deferred;
    $.Deferred = function() {
        var d = Deferred.apply(this, [].slice.call(arguments))
          , d_resolveWith = d.resolveWith;

        d.thenResolve = function(def) {
            this.then(function() {
                def.resolve();
            }, function() {
                def.reject();
            });
        }
        ;

        d.resolveWith = function() {
            try {
                return d_resolveWith.apply(this, [].slice.call(arguments));
            } catch (e) {
                errorReport(e, printStackTrace(), 'Deferred::resolveWith', arguments);
            }
        }
        return d;
    }
    ;
}
)(window.vwoe_$ && window.vwoe_$.Deferred ? window.vwoe_$ : window.jQuery);

define("designer/designer-common", ["designer/inject/native-definitions", "json2", "stacktrace", "base64", "jquery", "jquery-json", "jquery-ui", "drag-drop", "magic-scroll"], function() {});

(function() {

    var $ = window.vwoe_$ && window.vwoe_$.Deferred ? window.vwoe_$ : window.jQuery;

    var errorReport = window.VWOInjected ? VWOInjected.errorReport : window.errorReport;
    var printStackTrace = (window.VWOInjected && VWOInjected.printStackTrace) ? VWOInjected.printStackTrace : window.printStackTrace;

    // Our own JSON stringify proxy
    function stringify(arg) {
        var array_toJSON, object_toJSON;

        // hack: some people override toJSON on Array and Object
        // in those cases, delete the overridden function and use
        // stringify and restore after stringification
        if (Array.prototype.toJSON) {
            array_toJSON = Array.prototype.toJSON;
            delete Array.prototype.toJSON;
        }
        if (Object.prototype.toJSON) {
            object_toJSON = Object.prototype.toJSON;
            delete Object.prototype.toJSON;
        }

        if (typeof arg === 'object' && typeof arg.toJSON === 'function') {
            arg = arg.toJSON();
        }
        var retval = $.toJSON(arg);

        if (array_toJSON) {
            Array.prototype.toJSON = array_toJSON;
        }
        if (object_toJSON) {
            Object.prototype.toJSON = object_toJSON;
        }

        return retval;
    }

    function getProperty(key) {
        var arr = key.split('.')
          , retVal = window;
        arr.forEach(function(item) {
            retVal = retVal[item];
        });
        return retVal;
    }

    String.prototype.eval = function() {
        // HACK: required for rearrange which send 'this.el.jq' from child
        return {
            eval: this.toString()
        };
    }
    ;

    function setProperty(key, value) {
        var arr = key.split('.');
        var retVal = window;
        arr.forEach(function(item, i) {
            if (i === arr.length - 1) {
                if (typeof value.eval === 'string') {
                    try {
                        var val;
                        eval('val = ' + value.eval);
                        retVal[item] = val;
                    } catch (e) {}
                } else {
                    retVal[item] = value;
                }
            } else {
                retVal = retVal[item];
            }
        });
    }

    var requests = {}
      , DEBUG = !1;

    window.__responses = {};
    window.__responsesInterval = 1;

    function tryHandShake() {
        if (!(window.VWOEditor && window.areDesignerFilesLoaded)) {
            setTimeout(tryHandShake, 100);
            return;
        }
        initiateHandShake();
    }

    function onMessage(message) {

        // TODO: check for origin
        var data;
        // check for handShake initiate message
        if (message.data === 'initiateHandShake') {
            //console.log("Trying handhake");
            clearInterval(window.retryHandshakeInterval);
            tryHandShake();
            return;
        }

        if (message.data === 'initiateMobileFrameHandShake') {
            tryMobileFrameHandshake();
            return;
        }

        try {
            data = $.parseJSON(message.data);
        } catch (e) {
            return;
        }

        if (!data) {
            return;
        }

        if (data.type === 'request') {
            var response = new Response(data);
            __responses[response.id] = response.data;
            response.send();
            clearTimeout(__responsesInterval);
            __responsesInterval = setTimeout(function() {//__responses = {};n
            }, 1000);
        } else if (data.type === 'response') {
            if (DEBUG) {
                var msg;
                msg = 'request: ' + requests[data.id].name;
                if (requests[data.id].name === 'VWOInjected.jQueryPostMessagePromiseId' || requests[data.id].name === 'VWOInjected.jQueryPostMessagePromiseFunction') {
                    msg = 'vwoe_$';
                    if (typeof requests[data.id].data[0] === 'number') {
                        logId = function() {
                            request('logId', requests[data.id].data[0]);
                        }
                        ;
                    }
                }
                if (requests[data.id].data instanceof Array) {
                    msg += '::' + requests[data.id].data.map(function(i) {
                        return stringify(i);
                    }).join(':');
                } else if (requests[data.id].data) {
                    msg += '::' + stringify(requests[data.id].data);
                }

                eval('(' + function() {
                    console.groupCollapsed('%c' + msg, 'color:#777;font-weight:normal;');
                    if (typeof requests[data.id].data[0] === 'number') {
                        VWOEditor.frame.logId(requests[data.id].data[0]);
                    }
                    console.log('%crequest data: %O', 'color:#777;', requests[data.id].data);
                    if (requests[data.id].requestStack) {
                        console.groupCollapsed('%crequest stack:', 'color:#777;font-weight:normal;');
                        console.log(requests[data.id].requestStack);
                        console.groupEnd();
                    }
                    console.log('%cresponse data: %O', 'color:#777;', data.data);
                    console.groupEnd();
                }
                .toString() + ')()');
            }

            if (requests[data.id]) {
                requests[data.id].resolve(data.data);
                delete requests[data.id];
            }

        }

    }

    function _sendMessage(message) {
        // log (message);
        if (window.VWOEditor && window.Designer && window.VWOEditor instanceof window.Designer) {
            //Current frame is parent frame - containing the Designer object

            if (message.name.indexOf("topFrameInjected") > -1) {
                window.top.postMessage(stringify(message), '*');
            } else {
                if (window.VWOEditor.frame) {
                    //console.log("Sending message to main website");
                    window.VWOEditor.frame.postMessage(stringify(message), '*');
                }
            }
        } else /*if (window.top !== window)*/
        {
            //window.top.postMessage(stringify(message), '*');
            //console.log("Sending message to editor container");
            if (window.vwoLoadingMode === 'desktop') {
                $('#test_page').get(0).contentWindow.postMessage(stringify(message), '*');
            } else {
                if (message.name.indexOf("topFrameInjected") > -1) {
                    window.top.postMessage(stringify(message), '*');
                } else {
                    window.parent.frames[0].postMessage(stringify(message), '*');
                }

            }

        }
    }

    function Request(name) {
        this.init.apply(this, [].slice.call(arguments));
    }

    function Response(req) {
        this.init(req);
    }
    if (window.vwoe_$ && window.vwoe_$.Deferred) {
        //FIXME: This code is shared as of now with overrides.js.
        window.request = function(name) {
            var req = new Request(name);
            req.data = [].slice.call(arguments, 1);
            req.send();
            return req;
        }
    }

    function uniqueId() {
        return uniqueId.id = ++uniqueId.id || 0;
    }

    Request.prototype = {
        init: function(name) {
            $.extend(this, $.Deferred());

            this.id = uniqueId();
            this.name = name;
            this.data = [].slice.call(arguments, 1);

            requests[this.id] = this;
        },
        send: function() {
            _sendMessage(this);
        },
        perform: function() {
            try {
                var arr = this.name.split('.'), context, func = context = window;
                arr.forEach(function(item, i) {
                    if (i === arr.length - 1) {
                        context = func;
                    }
                    func = func[item];
                });
                return func.apply(context, this.data);
            } catch (e) {
                errorReport(e, printStackTrace(), 'Request.perform:214');
            }
        },
        toJSON: function() {
            return {
                id: this.id,
                name: this.name,
                type: 'request',
                data: this.data
            };
        }
    };

    Request.create = function(obj) {
        return $.extend(new Request(), obj);
    }

    Response.prototype = {
        init: function(req) {
            if (!req) {
                return;
            }
            this.id = req.id;
            this.name = req.name;
            this.data = Request.create(req).perform();

            //Hack - to facilitate 2 way communication from top window frame to vwo iframe
            this.name = this.name.replace("topFrameInjected.", "");
        },
        send: function() {
            _sendMessage(this);
        },
        toJSON: function() {
            return {
                id: this.id,
                name: this.name,
                type: 'response',
                data: this.data
            }
        }
    }

    function init() {
        window.removeEventListener("message", window.request && request.onMessage && window.customMessageHandler);
        window.addEventListener("message", onMessage, false);
    }

    function destroy() {
        window.removeEventListener("message", window.request && request.onMessage);
    }

    request.init = init;
    request.destroy = destroy;

    if (window.vwoLoadingMode === "mobile" && window === top) {

        window.topFrameInjected = window.topFrameInjected || {};

        //For child frame set listeners straightaway
        request.init();

        vwoe_$.extend(topFrameInjected, {
            request: request,
            Request: Request,
            Response: Response,
            getProperty: getProperty,
            setProperty: setProperty
        });
    } else if (window.vwoe_$ && window.vwoe_$.Deferred) {
        window.VWOInjected = window.VWOInjected || {};

        //For child frame set listeners straightaway
        request.init();

        vwoe_$.extend(VWOInjected, {
            request: request,
            Request: Request,
            Response: Response,
            getProperty: getProperty,
            setProperty: setProperty
        });
    } else {
        request.onMessage = onMessage;
        $.extend(window, {
            request: request,
            Request: Request,
            Response: Response,
            getProperty: getProperty,
            setProperty: setProperty
        });
    }

}
)();

define("designer/postmessage", ["designer/designer-common"], (function(global) {
    return function() {
        var ret, fn;
        return ret || global.Postmessage;
    }
    ;
}(this)));

window.VWOInjected = window.VWOInjected || {};
VWOInjected.highlighted = null;
VWOInjected.store = {};
VWOInjected.coalClassPrefix = '_vwo_coal_';

// TODO: remove
var logId = function(id) {
    eval('(' + function() {
        console.groupCollapsed('%cvwoe_$::' + id + ' is ' + VWOInjected.store[id].attr('nodeName'), 'color:#7aa;font-weight:normal;');
        console.log.apply(console, VWOInjected.store[id]);
        console.groupEnd();
    }
    .toString() + ')()');
};

(function() {

    var store = VWOInjected.store
      , request = VWOInjected.request
      , getProperty = VWOInjected.getProperty
      , setProperty = VWOInjected.setProperty
      , errorReport = function(err, stack, reference, arg) {
        if (typeof request === 'function') {
            request('errorReport', err, stack, reference, arg);
        }
    };

    if (document.readyState === 'interactive') {//request('VWOEditor.notifyDocumentInteractive');
    }

    window.addEventListener('beforeunload', function() {// request('VWOEditor.switchToBrowseMode');
    });

    VWOInjected.jQueryPostMessagePromiseId = function(selector) {
        try {

            // TODO: postmesssage: this is a memory optimization. Will see it later.
            // Needs some thoughts.
            /*if (selector instanceof jQuery) selector = selector.XPath();
	for (var i in store) {
		if (store.hasOwnProperty(i) && store[i].is(selector) && store[i].length === 1) {
			return parseInt(i);
		}
	}*/

            var id = +new Date;
            while (id === +new Date)
                ;
            id = +new Date;

            store[id] = vwoe_$(selector);

            return id;

        } catch (e) {
            errorReport(e, printStackTrace(), 'postmessage-inject::VWOInjected.jQueryPostMessagePromiseId', arguments);
        }
    }
    ;
    /* To do :- Remove me, I am here just to cause bugs, but be sure 3:)
	I was being used in init re-arrange where we were passing functions in a string
	It seems there is no such use case, so I should be killed.
*/
    function mapObjectStringsToFunctions(obj) {
        try {
            for (var i in obj) {
                if (typeof obj[i] === 'string' && obj[i].indexOf('function') !== -1) {
                    try {
                        var fn;
                        eval('fn = ' + obj[i]);
                        if (typeof fn === 'function') {
                            obj[i] = fn;
                        }
                    } catch (e) {}
                }
            }
        } catch (e) {
            errorReport(e, printStackTrace(), 'postmessage-inject::mapObjectStringsToFunctions', arguments);
        }
    }

    VWOInjected.jQueryPostMessagePromiseFunction = function(parentReq, funcName) {
        try {

            var promiseId = __responses[parentReq.id];
            if (!store[promiseId])
                return null;

            var args = [].slice.call(arguments, 2);
            for (var i = 0; i < args.length; i++) {
                args[i] = (function(arg) {
                    if (typeof arg === 'string')
                        try {
                            var fn;
                            eval('fn = ' + arg);
                            if (typeof fn === 'function') {
                                return fn;
                            }
                            return arg;
                        } catch (e) {
                            return arg;
                        }
                    if (typeof arg === 'object') {
                        mapObjectStringsToFunctions(arg);
                    }
                    return arg;
                }
                )(args[i]);
            }

            var jq;
            if (funcName === 'length') {
                jq = store[promiseId].length;
            } else {
                jq = store[promiseId][funcName].apply(store[promiseId], args);
            }

            try {
                // check if object is serializable
                var jq_array = jq instanceof vwoe_$ ? jq.toArray() : jq;
                // firefox happens to serialize Nodes somehow, check and throw if so
                if (jq_array && jq_array.length && jq_array[0].nodeName)
                    throw '';
                vwoe_$.toJSON(jq_array);
                return jq_array;
            } catch (e) {
                return VWOInjected.jQueryPostMessagePromiseId(jq);
            }

        } catch (e) {
            errorReport(e, printStackTrace(), 'postmessage-inject::VWOInjected.jQueryPostMessagePromiseFunction', arguments);
        }
    }
    ;

    function applyOp_rearrange(jqid, props) {
        try {

            var jq = store[jqid]
              , me = jq.get(0)
              , current = jq.parent().children().index(me)
              , node = jq.parent().children().eq(props.index).get(0);
            if (props.index < current)
                node.parentNode.insertBefore(me, node);
            else if (props.index > current)
                node.parentNode.insertBefore(me, node.nextSibling);
            // this hack forces chrome to redraw tables. Chrome distorts tables without this
            vwoe_$(me).parent().fadeOut(1, function() {
                vwoe_$(this).show()
            });

        } catch (e) {
            errorReport(e, printStackTrace(), 'postmessage-inject::applyOp_rearrange', arguments);
        }
    }

    function enableMagicScroll() {
        try {

            vwoe_$().magicScroll();

        } catch (e) {
            errorReport(e, printStackTrace(), 'postmessage-inject::enableMagicScroll', arguments);
        }
    }

    function disableMagicScroll() {
        try {

            vwoe_$().magicScroll({
                stop: true
            });

        } catch (e) {
            errorReport(e, printStackTrace(), 'postmessage-inject::disableMagicScroll', arguments);
        }
    }

    vwoe_$.extend(VWOInjected, {
        disableMagicScroll: disableMagicScroll,
        enableMagicScroll: enableMagicScroll,
        applyOp_rearrange: applyOp_rearrange
    });

}
)();

define("designer/inject/postmessage-inject", function() {});

define('designer/inject/inject-jquery-utils', ['designer/ElementMetadata', 'designer/ComputedStyleTree', 'designer/ElementManager', 'designer/SelectorPathGenerator', 'designer/inject/utils'], function(ElementMetadata, ComputedStyleTree, elementManager, selectorPathGenerator, utils) {

    var VWOInjected = window.VWOInjected || {};
    var vwoe_$ = window.vwoe_$ && window.vwoe_$.fn ? window.vwoe_$ : window.$;

    var errorReport = VWOInjected.errorReport;
    var printStackTrace = VWOInjected.printStackTrace || window.printStackTrace;

    function addGlass() {
        // Shims
        if (!vwoe_$('._vwo_glass').length) {
            vwoe_$('body').append('<div id="_vwo_top" class="_vwo_glass"></div>' + '<div id="_vwo_right" class="_vwo_glass"></div>' + '<div id="_vwo_bottom" class="_vwo_glass"></div>' + '<div id="_vwo_left" class="_vwo_glass"></div>' + '<div id="_vwo_glass" class="_vwo_glass trans"></div>');
            // Hides Shim
            vwoe_$('._vwo_glass').hide();
        }
    }

    function htmlSpecialChars(html) {
        return html.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }

    /**
 * This function is used to adjust the offset of an element from the body.
 * Except when the body is 'static' this manipulation needs to be done for correct placement of borderify and shimmy
 * @param offset - the offset of the element
 */
    function adjustOffset(offset) {
        if (window.getComputedStyle(document.body).getPropertyValue('position') !== 'static') {
            offset.left -= (vwoe_$('body')[0].getBoundingClientRect().left + vwoe_$(document).scrollLeft());
            offset.top -= (vwoe_$('body')[0].getBoundingClientRect().top + vwoe_$(document).scrollTop());
        } else {
            offset.left += parseInt(window.getComputedStyle(document.getElementsByTagName('body')[0]).getPropertyValue('border-left-width').replace('px', ''), 10);
            offset.top += parseInt(window.getComputedStyle(document.getElementsByTagName('body')[0]).getPropertyValue('border-top-width').replace('px', ''), 10);
        }
    }

    /**
 * This function gives the offset displacement that needs to be applied when the shimmy is applied
 * @returns an object with keys { left, top }
 */
    function getOffsetDelta() {
        if (window.getComputedStyle(document.body).getPropertyValue('position') !== 'static') {
            return {
                left: vwoe_$('body')[0].getBoundingClientRect().left + vwoe_$(document).scrollLeft(),
                top: vwoe_$('body')[0].getBoundingClientRect().top + vwoe_$(document).scrollTop()
            };
        } else {
            return {
                left: parseInt(window.getComputedStyle(document.getElementsByTagName('body')[0]).getPropertyValue('border-left-width').replace('px', ''), 10),
                top: parseInt(window.getComputedStyle(document.getElementsByTagName('body')[0]).getPropertyValue('border-top-width').replace('px', ''), 10)
            }
        }
    }

    /**
 * Helper to check if the element is in the DOM
 */

    vwoe_$.fn.isOnPage = function() {
        try {
            if (!this || !this.length)
                return false;
            var foundDettached = false;
            this.each(function() {
                var element = this;
                if (!element) {
                    foundDettached = true;
                    return false;
                }
                while (element.parentNode) {
                    element = element.parentNode;
                }
                if (!element || element !== window.document) {
                    foundDettached = true;
                    return false;
                }
            });
            return !foundDettached;
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::vwoe_$.fn.isOnPage', arguments);
        }
    }
    ;

    vwoe_$.fn.getStyle = function() {
        try {

            if (!this || !this.length)
                return false;

            return this.get(0).style;

        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::vwoe_$.fn.getStyle', arguments);
        }
    }
    ;

    /**
 * Polyfill for $.css(propertyArray) for jQuery < 1.9
 * @param  {Array} props List of CSS properties
 * @return {Array}       List of values for passed properties
 */
    vwoe_$.fn.getStyleValues = function(props) {
        try {

            var retVal = {}
              , length = props.length;

            while (length--) {
                retVal[props[length]] = this.css(props[length]);
            }

            return retVal;

        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::vwoe_$.fn.getStyleValues', arguments);
        }
    }
    ;

    /**
 * Helper to check if the element is in the viewport
 */

    vwoe_$.fn.showInWindow = function() {
        try {
            if (!this || !this.length)
                return this;
            if (window.pageYOffset > this.offset().top)
                vwoe_$('html,body').animate({
                    scrollTop: this.offset().top - 10
                }, 200);
            else if (window.pageYOffset + window.innerHeight < this.offset().top + this.outerHeight())
                vwoe_$('html,body').animate({
                    scrollTop: this.offset().top + this.outerHeight() - window.innerHeight + 10
                }, 200);
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::vwoe_$.fn.showInWindow', arguments);
        }
    }

    vwoe_$.fn.renameAttribute = function(oldName, newName) {
        this.each(function(index, elem) {
            elem.setAttribute(newName, elem.getAttribute(oldName));
            elem.removeAttribute(oldName);
        });
    }
    ;

    /**
 * Draw a border around the element using 4 divs.
 * @param elColor Color of the border.Can be color code/name or evaluate to false for blue and has a value true for green.(Backward compatibility)
 * @param elem If the element to broderify is not the jquery object
 * @param identifier Unique identifier to identify the border for specific element which is to be bordered
 */

    vwoe_$.fn.borderify = function(elColor, elem, identifier) {
        try {
            if (!this || !this.length || vwoe_$(this).css('display') === "none" || vwoe_$(this).css('visibility') === "hidden" || vwoe_$(this).css('opacity') == 0) {
                if (identifier && this && !this.length) {
                    vwoe_$('body').unborderify(false, identifier);
                    //Remove old highlights.
                }
                return this;
            }
            var color, colorSuffix, borderOffset, isHighlightAll = false;
            if (!elColor) {
                //Blue
                color = '#5D83C0';
                colorSuffix = '';
                borderOffset = 0;
                vwoe_$('body').unborderify();
            } else if (elColor === true) {
                //Green
                color = '#00AF33';
                colorSuffix = '_green';
                borderOffset = 5;
            } else {
                color = elColor;
                colorSuffix = "_class_" + identifier;
                borderOffset = 0;
                isHighlightAll = true;
                vwoe_$('body').unborderify(false, identifier);
                //Remove old goal highlights for this identifier and thus removing any stale highlight.
            }

            if (!vwoe_$.isEmptyObject(this)) {
                var elements = vwoe_$(this);
                addGlass();
                elements.each(function(index) {

                    var el = vwoe_$(this)
                      , offset = el.offset()
                      , borderWidth = 2
                      , height = el.outerHeight()
                      , width = el.outerWidth()
                      , individualColorSuffix = colorSuffix + "_" + index;

                    adjustOffset(offset);

                    if (elem) {
                        var off = elem.offset();
                        if (offset.left > off.left)
                            offset.left = off.left;
                        if (offset.top > off.top)
                            offset.top = off.top;
                        if (elem.outerHeight() > height)
                            height = elem.outerHeight()
                        if (elem.outerWidth() > width)
                            width = elem.outerWidth()
                    }
                    // Append the blue borders to the page.
                    vwoe_$(["_vwo_outline_top", "_vwo_outline_bottom", "_vwo_outline_left", "_vwo_outline_right"]).each(function(i, v) {
                        vwoe_$('body').append('<div class="_vwo_outline_border' + colorSuffix + " " + v + individualColorSuffix + '"></div>');
                    })
                    try {
                        vwoe_$('._vwo_outline_border' + colorSuffix).hide();
                    } catch (e) {
                        window.top.errorReport(e, printStackTrace(), 'inject::documentLoad:1');
                    }

                    if (vwoe_$('html').get(0).getAttribute('_vwo_parallax') === 'true') {
                        var elRect = vwoe_$.extend({}, el.get(0).getBoundingClientRect());
                        var bodyRect = vwoe_$.extend({}, vwoe_$('body').get(0).getBoundingClientRect());

                        bodyRect.left -= parseFloat(vwoe_$('body').css('margin-left').replace('px', ''));
                        bodyRect.right -= parseFloat(vwoe_$('body').css('border-right').replace('px', ''));
                        bodyRect.top -= parseFloat(vwoe_$('body').css('margin-top').replace('px', ''));
                        bodyRect.bottom -= (parseFloat(vwoe_$('body').css('border-bottom').replace('px', '')) + parseFloat(vwoe_$('body').css('border-bottom').replace('px', '')));

                        vwoe_$('._vwo_outline_left' + individualColorSuffix).css({
                            left: elRect.left - borderOffset - bodyRect.left,
                            top: elRect.top - borderOffset - bodyRect.top,
                            height: height + 2 * borderOffset
                        });

                        vwoe_$('._vwo_outline_right' + individualColorSuffix).css({
                            left: elRect.left + width - borderWidth + borderOffset - bodyRect.left,
                            top: elRect.top - borderOffset - bodyRect.top,
                            height: height + 2 * borderOffset
                        });

                        vwoe_$('._vwo_outline_top' + individualColorSuffix).css({
                            left: elRect.left - borderOffset - bodyRect.left,
                            top: elRect.top - borderOffset - bodyRect.top,
                            width: width + 2 * borderOffset
                        });

                        vwoe_$('._vwo_outline_bottom' + individualColorSuffix).css({
                            left: elRect.left - borderOffset - bodyRect.left,
                            top: elRect.top + height - borderWidth + borderOffset - bodyRect.top,
                            width: width + 2 * borderOffset
                        });
                    } else {
                        vwoe_$('._vwo_outline_left' + individualColorSuffix).css({
                            left: offset.left - borderOffset,
                            top: offset.top - borderOffset,
                            height: height + 2 * borderOffset
                        });
                        vwoe_$('._vwo_outline_right' + individualColorSuffix).css({
                            left: offset.left + width - borderWidth + borderOffset,
                            top: offset.top - borderOffset,
                            height: height + 2 * borderOffset
                        });
                        vwoe_$('._vwo_outline_top' + individualColorSuffix).css({
                            left: offset.left - borderOffset,
                            top: offset.top - borderOffset,
                            width: width + 2 * borderOffset
                        });
                        vwoe_$('._vwo_outline_bottom' + individualColorSuffix).css({
                            left: offset.left - borderOffset,
                            top: offset.top + height - borderWidth + borderOffset,
                            width: width + 2 * borderOffset
                        });
                    }

                    vwoe_$("._vwo_outline_border" + colorSuffix).css('background-color', color).show();

                    var $this = vwoe_$(this);
                    $this = $this.hasClass('_vwo_iframe_glass') ? vwoe_$($this.attr('data-xpath')) : $this;
                    // show an identifier along with the borders
                    var metadata = new ElementMetadata($this);
                    var identifier = metadata.tagName + metadata.identifierSelector;
                    vwoe_$('.identifier').removeClass('identifier  identifier--bottom');
                    // if there is space at the top, show it on the top
                    if (offset.top - borderOffset - window.scrollY <= 20) {
                        // 20 = min space needed ot show an identifier
                        vwoe_$('._vwo_outline_bottom' + individualColorSuffix).addClass('identifier  identifier--bottom').attr('data-identifier', identifier);
                    } else {
                        // else show it at the bottom
                        vwoe_$('._vwo_outline_top' + individualColorSuffix).addClass('identifier').attr('data-identifier', identifier);
                    }
                    // hack: cant get width of pseudo elements so assume 200 min width
                    if (offset.left + 200 >= vwoe_$(document).width()) {
                        vwoe_$('.identifier').addClass('identifier--right');
                    }
                    if (!isHighlightAll) {
                        return false;
                    }
                });
            }
            return this;
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::vwoe_$.fn.borderify', arguments);
        }
    }

    /**
 * Hide all glasses that prevent interaction with elements
 */

    vwoe_$.fn.unshimmy = function() {
        try {
            vwoe_$("._vwo_outline_border").removeClass('_vwo_selected');
            vwoe_$('._vwo_glass').hide();
            return this;
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::vwoe_$.fn.unshimmy', arguments);
        }
    }

    /**
 * Put a glass on all sides of the element
 * @param elGlass If the glass should cover the selected element
 * @param elem This prevents the improper cover of floating elements
 */

    vwoe_$.fn.shimmy = function(elGlass, elem) {
        try {
            if (typeof elem === 'number')
                elem = store[elem];
            if (!this || !this.length)
                return this;
            var el = this
              , offset = el.offset()
              , docH = vwoe_$(window.document).height()
              , docW = vwoe_$(window.document).width();
            var height = el.outerHeight()
            if (elem && el.outerHeight() < elem.outerHeight()) {
                height = elem.outerHeight();
            }

            addGlass();
            adjustOffset(offset);

            var offsetDelta = getOffsetDelta();

            if (vwoe_$('html').get(0).getAttribute('_vwo_parallax') === 'true') {
                var elRect = vwoe_$.extend({}, el.get(0).getBoundingClientRect());
                var bodyRect = vwoe_$.extend({}, vwoe_$('body').get(0).getBoundingClientRect());

                bodyRect.left -= parseFloat(vwoe_$('body').css('margin-left').replace('px', ''));
                bodyRect.right -= parseFloat(vwoe_$('body').css('border-right').replace('px', ''));
                bodyRect.top -= parseFloat(vwoe_$('body').css('margin-top').replace('px', ''));
                bodyRect.bottom -= (parseFloat(vwoe_$('body').css('border-bottom').replace('px', '')) + parseFloat(vwoe_$('body').css('border-bottom').replace('px', '')));

                vwoe_$('#_vwo_top').css({
                    left: 0,
                    top: 0,
                    height: elRect.top - bodyRect.top,
                    width: docW
                });

                vwoe_$('#_vwo_left').css({
                    left: 0,
                    top: elRect.top - bodyRect.top,
                    height: height,
                    width: elRect.left + bodyRect.left
                });

                vwoe_$('#_vwo_right').css({
                    left: elRect.width + elRect.left,
                    top: elRect.top - bodyRect.top,
                    height: height,
                    width: docW - (elRect.left + bodyRect.left + elRect.width)
                });

                vwoe_$('#_vwo_bottom').css({
                    left: 0,
                    top: elRect.top + elRect.height - bodyRect.top,
                    height: docH - (elRect.top - bodyRect.top + elRect.height),
                    width: docW
                });
            } else {
                vwoe_$('#_vwo_top').css({
                    top: 0 - offsetDelta.top,
                    left: 0 - offsetDelta.left,
                    height: offset.top + offsetDelta.top,
                    width: docW
                })
                vwoe_$('#_vwo_left').css({
                    top: offset.top,
                    left: 0 - offsetDelta.left,
                    height: height,
                    width: offset.left + offsetDelta.left
                })
                vwoe_$('#_vwo_bottom').css({
                    top: offset.top + height,
                    left: 0 - offsetDelta.left,
                    width: docW,
                    height: (docH - offset.top - height)
                })
                vwoe_$('#_vwo_right').css({
                    top: offset.top,
                    left: offset.left + el.outerWidth(),
                    height: height,
                    width: (docW - offset.left - el.outerWidth() - offsetDelta.left)
                })
            }

            vwoe_$("._vwo_outline_border").addClass('_vwo_selected');
            if (elGlass !== true) {
                vwoe_$('#_vwo_glass').css({
                    top: offset.top,
                    left: offset.left,
                    height: el.outerHeight(),
                    width: el.outerWidth()
                }).show();
            }
            vwoe_$('._vwo_glass:not(#_vwo_glass)').fadeIn(100);
            return this;
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::vwoe_$.fn.shimmy', arguments);
        }
    }

    /**
 * Removes borders depending upon arguments given.
 * @param shouldRemoveAll If true removes all borders including borders for Elements tracked under COAL
 * @param identifier Its an identifier which identifies the border for specific Element(used for COAL) for specific goal. If
 * shouldRemoveAll is false and identifier has some value, then only specific borders are removed.
 * @return {Object}
 */

    vwoe_$.fn.unborderify = function(shouldRemoveAllCoalBorders, identifier) {
        try {
            if (shouldRemoveAllCoalBorders) {
                vwoe_$("div[class*=_vwo_outline_border_class_]").remove();
            }

            if (identifier) {
                vwoe_$("._vwo_outline_border_class_" + identifier).remove();
            } else {
                vwoe_$("._vwo_outline_border").remove();
                vwoe_$("._vwo_outline_border_green").remove();
            }
            return this;

        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::vwoe_$.fn.unborderify', arguments);
        }
    }

    /**
 * Get the index of the selected element in its parent
 */

    vwoe_$.fn.prevNextAppend = function() {
        try {
            return {
                index: this.parent().children().index(this.get(0))
            }
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::vwoe_$.fn.prevNextAppend', arguments);
        }
    }

    var recursivelyUpdateAttributes = function(element) {
        try {
            if (element) {
                for (var i = 0; i < element.attributes.length; i++) {
                    var attributeKey = element.attributes[i].name;
                    var attributeValue = element.attributes[i].value;
                    if (attributeValue && attributeValue.indexOf('editorProxy') !== -1) {
                        element.setAttribute(attributeKey, utils.getOriginalUrlFromProxyUrl(attributeValue));
                    }
                }

                for (var i = 0; i <= element.childElementCount; i++) {
                    recursivelyUpdateAttributes(element.children[i]);
                }
            }
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::recursivelyUpdateAttributes', arguments);
        }
    };

    /**
 * Helper to get/set the outer HTML of the selected element.
 * @param html The HTML content to set. If not passed the outer HTML will be returned
 */

    vwoe_$.fn.outerHTML = function(html) {
        try {
            if (vwoe_$.isEmptyObject(this))
                return '';
            if (html === undefined) {
                var str = "";
                this.each(function() {
                    if (this.outerHTML !== undefined) {
                        if (_isLoadedViaProxy) {
                            //Recursively loop over all attributes of element and replace editorProxy path with original path
                            recursivelyUpdateAttributes(this);
                        }
                        str += this.outerHTML;

                        //if website is loaded using proxy and the outer HTML still contains editorProxy, run a regex to replace the urls
                        if (_isLoadedViaProxy && str.indexOf('editorProxy') > -1) {
                            var proxyUrlRegex = /((http:|https:)*(\/\/)*(app\.vwo\.com)*\/editorProxy\/.*?\/)/g;
                            str = str.replace(proxyUrlRegex, function(match) {
                                return utils.getOriginalUrlFromProxyUrl(match);
                            });
                        }
                    } else {
                        str += vwoe_$('<div></div>').append(this.cloneNode(true)).html();
                    }
                });
                return str;
            } else {
                if (this.get(0).outerHTML !== undefined)
                    this.get(0).outerHTML = html;
                else
                    this.replaceWith(html);
                return this;
            }
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::vwoe_$.fn.outerHTML', arguments);
        }
    }
    ;

    vwoe_$.fn.getBoundingCoordinates = function() {
        try {
            var offset = this.offset();
            var scrollTop = vwoe_$(document).scrollTop();
            return {
                x1: offset.left,
                x2: offset.left + this.outerWidth(),
                y1: offset.top - scrollTop,
                y2: offset.top + this.outerHeight() - scrollTop
            }
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::vwoe_$.fn.getBoundingCoordinates', arguments);
        }
    }
    ;

    /**
 * Find the CSS path of the current Element. Use ID's if there is only one occurence of the ID. If the tag Name does not match the proper tag name a browser supports, then use *
 */
    // This is actually the selector path of the element, thus add an alias for this function.
    vwoe_$.fn.selectorPath = vwoe_$.fn.XPath = function() {
        try {
            return selectorPathGenerator.generateFullPath(this.get(0));
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::vwoe_$.fn.XPath', arguments);
        }
    }

    vwoe_$.fn.shortSelectorPath = function(cacheMode) {
        try {
            if (!cacheMode) {
                return selectorPathGenerator.generateShortPath(this.get(0));
            } else {
                return selectorPathGenerator.generateCachedShortPath(this.get(0));
            }
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::vwoe_$.fn.XPath', arguments);
        }
    }
    ;

    /**
 * Remove classes and other things injected by us
 *
 * @param content The HTML
 */
    vwoe_$.fn.cleanContent = function(elClass, content) {
        try {
            content = content || this.get(0).outerHTML;

            var node = document.createElement((this.get(0).tagName == 'HEAD') ? 'DIV' : this.parent().get(0).tagName);

            node.innerHTML = content;
            for (var i = 0; i < node.childNodes.length; i++) {
                if (typeof node.childNodes[i].className === 'string') {
                    node.childNodes[i].className = node.childNodes[i].className.replace(elClass, '').replace(/vwo_(group_)+[\d]{13}_[\d]+/g, '').replace(/_vwo_coal_+[\d]{13}_[\d]+/g, '').replace(/  +/g, ' ').replace(/\s+$/, '');
                    if (node.childNodes[i].className == '') {
                        node.childNodes[i].removeAttribute('class');
                    }
                }
            }
            return node.innerHTML;
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::vwoe_$.fn.cleanContent', arguments);
        }
    }
    ;

    /**
 * Detects and returns if there is any vwo_group_* class
 * on the element.
 * @return {string} The vwo_group_* class or null otherwise
 */
    vwoe_$.fn.getEditGroupClass = function() {
        try {
            if (!this || !this.length)
                return null;
            var className = this.get(0).className;

            if (/vwo_(group_)+[\d]{13}/.test(className)) {
                return className.match(/vwo_(group_)+[\d]{13}_[\d]+/)[0];
            }

            return null;
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::vwoe_$.fn.hasEditGroupClass', arguments);
        }
    }
    ;

    /**
 * Removes all vwo* classes and adds the required one after that.
 * @param  {string} elClass vwo_* class to add
 */
    vwoe_$.fn.cleanAndReapplyClass = function(elClass) {
        try {
            if (!this || !this.length)
                return null;

            this.removeClass(elClass);
            if (typeof this.get(0).className === 'string') {
                this.get(0).className = this.get(0).className.replace(/vwo_([\d]{13})/g, '');
            }
            this.addClass(elClass);

            return this;
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::vwoe_$.fn.cleanAndReapplyClass', arguments);
        }
    }

    /**
 * Detect if DOM changed around this element or not
 */
    vwoe_$.fn.didDOMChange = function() {
        try {
            if (!this || !this.length)
                return false;

            var domChanged = false;

            this.parent().children().each(function() {
                if (vwoe_$(this).data('_vwo_xpath') !== undefined && vwoe_$(this).data('_vwo_xpath') !== vwoe_$(this).XPath()) {
                    domChanged = true;
                    return false;
                }
            });

            return domChanged;
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::vwoe_$.fn.didDOMChange', arguments);
        }
    }
    ;

    vwoe_$.fn.addVWOClass = function() {
        if (this.hasVWOClass())
            return;

        this.addClass('vwo_' + VWOInjected.getTimeStamp());
    }
    ;

    vwoe_$.fn.getVWOClass = function() {
        if (typeof this.get(0).className !== 'string')
            return '';
        var match = this.get(0).className.match(/vwo_[0-9]{13}/);
        return String(match && match[0] || '');
    }
    ;

    vwoe_$.fn.hasVWOClass = function() {
        return !!this.getVWOClass();
    }
    ;

    vwoe_$.fn.metadata = function() {
        return new ElementMetadata(this);
    }
    ;

    vwoe_$.fn.computedStyleTree = function() {
        return new ComputedStyleTree(this.get(0));
    }
    ;

    /**
 * Shows a placeholder during a rearrange operation for a given element.
 * @param  {object} mousePosition Mouse potions : { top: 32, left: 43 }
 * @return {object}               `changes` object for the caller to use.
 */
    vwoe_$.fn.showRearrangePlaceholder = function(mousePosition) {
        if (!this.length) {
            return;
        }

        var $targetElement = this, insertPosition, $rearrangeGlass = vwoe_$('#_vwo_glass_rearrange');

        if (!$rearrangeGlass.length) {
            $rearrangeGlass = vwoe_$('<div id="_vwo_glass_rearrange"></div>').appendTo(document.body);
        }

        if ($targetElement.css('display') === 'inline' || $targetElement.css('display') === 'inline-block' || $targetElement.css('display') === 'table-cell' || $targetElement.css('float') === 'left' || $targetElement.css('float') === 'right') {
            insertPosition = mousePosition.left - $targetElement.offset().left < $targetElement.outerWidth() / 2 ? 'before' : 'after';
            if ($targetElement.css('float') === 'right') {
                insertPosition = insertPosition === 'before' ? 'after' : 'before';
            }
            $rearrangeGlass.css({
                top: $targetElement.offset().top,
                left: $targetElement.offset().left + (insertPosition === 'after' ? $targetElement.outerWidth() : 0),
                height: $targetElement.outerHeight(),
                width: 0
            });
        } else {
            insertPosition = mousePosition.top - $targetElement.offset().top < $targetElement.height() / 2 ? 'before' : 'after';
            $rearrangeGlass.css({
                top: $targetElement.offset().top + (insertPosition === 'after' ? $targetElement.outerHeight() : 0),
                left: $targetElement.offset().left,
                width: $targetElement.outerWidth(),
                height: 0
            });
        }

        return insertPosition;
    }
    ;

    function overrideForSVG(fnName, prop) {
        var originalFn = vwoe_$.fn[fnName];
        vwoe_$.fn[fnName] = function() {
            if (this[0] && typeof this[0].getBBox === 'function') {
                return this[0].getBBox()[prop];
            }
            return originalFn.apply(this, [].slice.call(arguments));
        }
        ;
    }

    overrideForSVG('outerHeight', 'height');
    overrideForSVG('outerWidth', 'width');
    overrideForSVG('innerHeight', 'height');
    overrideForSVG('innerWidth', 'width');
    overrideForSVG('height', 'height');
    overrideForSVG('width', 'width');

    /**
 * Alternative for jQuery.contents() when you don't want the empty text nodes.
 * This is useful when you want consistent behavior on IE as well because IE removes all
 * whitespace only text nodes.
 *
 * @return {jQuery} jQuery collection of non-empty child nodes.
 */
    vwoe_$.fn.nonEmptyContents = function() {
        // If this is an undefined node, return an empty jQuery obj using this.contents();
        if (!this || !this.length)
            return this.contents();
        var els = this.contents(), child;
        for (var i = els.length; i--; ) {
            child = els.get(i);
            if (child.nodeType === 3 && !/\S/.test(child.nodeValue))
                els.splice(i, 1);
        }
        return els;
    }
    ;

    /**
 * Returns length of elements
 */
    vwoe_$.fn.getLength = function() {
        return this.length
    }
    ;

    vwoe_$.fn.highlight = function() {
        elementManager.highlightElement(this);
        return this;
    }
    ;

    vwoe_$.fn.select = function() {
        elementManager.selectElement(this);
        return this;
    }
    ;

    //Override jquery's getScript by enabling cache for it so that scripts or not fetched again n again
    vwoe_$.getScript = function(url, callback) {
        var options = vwoe_$.extend({}, {
            dataType: 'script',
            cache: true,
            url: url
        });

        //Save all scripts to be run and run them only once after the last applyVariation called in inject.js
        window.VWOInjected.deferredScripts = window.VWOInjected.deferredScripts || {};

        if (!window.VWOInjected.deferredScripts[url]) {
            window.VWOInjected.deferredScripts[url] = function getScript() {
                vwoe_$.ajax(options).done(function(data, textStatus, jqXHR) {
                    callback.apply(null, arguments);
                }).complete(function() {
                    delete window.VWOInjected.deferredScripts[url];
                });
            }
            ;
        }
    }
    ;

    /**
 * This method replaces the tag of the current tag with the specified parameter.
 * @param tagName
 * @returns replaced Tag El
 */
    vwoe_$.fn.replaceTag = function(tagName) {
        var i;

        if (this.length > 1) {
            for (i = 0; i < this.length; i++) {
                this.eq(i).replaceTag(tagName);
            }
            return this;
        }

        if (!this.length) {
            return;
        }

        var newElement = vwoe_$('<' + tagName + ' ' + this.attributesString() + '></' + tagName + '>');
        var oldContents = this.contents();
        this.replaceWith(newElement);
        newElement.append(oldContents);
        return newElement;
    }
    ;

    vwoe_$.fn.attributesString = function() {
        if (!this.length) {
            return;
        }

        var attrString = ''
          , attributes = this[0].attributes;
        for (var i = 0; i < attributes.length; i++) {
            attrString += ' ' + attributes[i].name + '=' + JSON.stringify(htmlSpecialChars(this[0].getAttribute(attributes[i].name)));
        }
        return attrString.trim();
    }

    vwoe_$.fn.openingTagHTML = function() {
        return '<' + this.get(0).tagName.toLowerCase() + ' ' + this.attributesString() + '>';
    }
    ;

    vwoe_$.fn.closingTagHTML = function() {
        return '</' + this.get(0).tagName.toLowerCase() + '>';
    }
    ;

    /**
 * Override the jQuery CSS method to support !important attribute.
 * The method calls the original CSS method if the style values does not have !important attribute.
 */
    var _applyImportantStyle = function(element, styleKey, styleValue) {
        element.style.setProperty(styleKey, styleValue.replace('!important', ''), 'important');
    };
    vwoe_$.fn.vwoCss = function() {
        var styleValue;

        //Case of single argument - When this method is used to get the css property on an element OR an array of properties
        //e.g. $('div').vwoCss('background');
        //e.g. $('div').vwoCss({'background': 'red', 'color': 'white'});
        if (arguments.length === 1) {
            if (typeof arguments[0] === 'string') {
                //Case of getting the css value
                return this.css(arguments[0]);
            } else {
                //Case of setting css through object of properties
                for (var i in arguments[0]) {
                    if (arguments[0].hasOwnProperty(i)) {
                        styleValue = arguments[0][i].toString();
                        if (styleValue.indexOf('important') > -1) {
                            /* jshint loopfunc: true */
                            this.each(function() {
                                _applyImportantStyle(this, i, styleValue);
                            });
                        } else {
                            this.css(arguments[0]);
                        }
                    }
                }
            }
        } else if (arguments.length === 2) {
            //When style value is being set for a single property
            //e.g. - $('div').vwoCss('background', 'red');
            var styleKey = arguments[0].toString();
            styleValue = arguments[1] ? arguments[1].toString() : null;
            if (styleValue && styleValue.indexOf('important') > -1) {
                /* jshint loopfunc: true */
                this.each(function() {
                    _applyImportantStyle(this, styleKey, styleValue);
                });
            } else {
                this.css(styleKey, styleValue);
            }
        } else {
            //For all other cases, default to original css method
            vwoe_$.fn.css.apply(this, arguments);
        }
        return this;
    }
    ;

});

define('designer/ModeSwitcher', ['designer/FrameContext'], function(frameContext) {
    'use strict';

    /* eslint camelcase: "off" */
    var $ = frameContext.isChildFrame(true) ? window.vwoe_$ : window.$;

    var modeSwitcher = {
        parentFrame: {
            switchToBrowseMode: function(isInitialSwitch) {
                var self = VWOEditor;
                if (self.type === 'browse') {
                    return;
                }

                self.type = self.angularScope.editor.mode = 'browse';
                if (self.angularScope.$$phase !== '$apply' && self.angularScope.$$phase !== '$digest') {
                    self.angularScope.$digest();
                }

                if (!isInitialSwitch) {
                    //Save states with parent tab - to be used when user will switch back to DESIGN mode
                    self.saveStatesWithParent();
                }

                // set editor cookie
                window.setEditorCookie();
                window.editorCookieInterval = setInterval(window.setEditorCookie, 60000);
                this.childFrame.toggleInteractionMode(self.type);
                if (self.isUsingProxy) {
                    this.childFrame.changeUrlsToRelative();
                }
                self.hideGoalHighlights(self.currentGoalId);
                self.resetEditorFlags();

                // minimise the var n goal green menu and hide settings box
                window.toggleVarBox(false);
                window.hideSettingsBox(true);
                this.childFrame.removeDangerousAttributes();

                // HACK: Show message only when editor is opened, detected using location.href
                if (!isInitialSwitch && window.location.href.indexOf('editor') !== -1) {
                    setTimeout(function() {
                        window.editor.notifier.notify(window.editor.translator.iT('Navigation mode enabled on the original {{1}}', (self.isMobileApp ? 'app' : 'website')), 3000);
                    });
                }
                // set a flag that browse was clicked. This flag will be set to TRUE in init() if we actually
                // browse. We require this to know if user actually navigated to another page in which
                // case we don't need to apply control on switching to design mode
                self.didBrowse = false;

                // cancel any operation
                self.cancel();

                if (self.test === 'mvt') {
                    self.applyAllSections(1);
                }

                window.sessionStorage.setItem('mode', 'browse');
                var message = {
                    name: 'updateEditorMode',
                    mode: 'browse'
                };
                window.sendPostMessageToParent(message);

                if (!isInitialSwitch) {
                    //Reset the editor frame for browse mode
                    frameContext.services.elementManager.childFrame.resetEditor();
                }

                //Hide the Edit Code button if enabled
                frameContext.services.topFrameManager.childFrame.hideEditCodeButton();

                setTimeout(function() {
                    self.controllerScope.closeVariationDropdown(true);
                })
            },

            switchToDesignMode: function(isInitialSwitch) {
                var self = VWOEditor;
                if (self.type === 'design') {
                    return;
                }

                self.type = self.angularScope.editor.mode = 'design';

                if (!isInitialSwitch) {
                    //apply any unsaved states created before going to browse mode
                    self.getStatesFromParent();
                }

                // clear editor cookie
                clearTimeout(window.editorCookieInterval);
                window.unsetEditorCookie();
                this.childFrame.toggleInteractionMode(self.type);
                if (self.isUsingProxy) {
                    this.childFrame.changeUrlsToOriginal();
                }
                //Apply Coal Classes.
                self.applyCoalGoals({
                    1: 1
                });
                //At this point Control DOM exists in editor even though designer may say its variation.

                self.type = 'design';
                this.childFrame.restoreDangerousAttributes();
                window.toggleVarBox(null);
                // HACK: Show message only when editor is opened, detected using location.href
                if (!isInitialSwitch && window.location.href.indexOf('editor') !== -1) {
                    setTimeout(function() {
                        window.editor.notifier.notify(window.editor.translator.t('Design mode enabled'), 3000);
                    });
                }

                // We do not need to apply control on a freshly loaded page- one having {didBrowse} as TRUE. 'shouldApplyControl' keeps track of when to apply
                self.shouldApplyControl = !self.didBrowse;

                // apply all seleceted variations on switching to design mode
                self.applyAllSections(undefined, true);

                self.shouldApplyControl = true;

                // cancel any operation
                self.cancel();

                if (self.angularScope.$$phase !== '$apply' && self.angularScope.$$phase !== '$digest') {
                    self.angularScope.$digest();
                }

                window.sessionStorage.removeItem('mode');
                var message = {
                    name: 'updateEditorMode',
                    mode: 'design'
                };
                window.sendPostMessageToParent(message);

                frameContext.services.elementManager.childFrame.expandToFullHeight();

                //Show the Edit Code button if enabled
                frameContext.services.topFrameManager.childFrame.showEditCodeButton();
            }
        },
        childFrame: {
            removeDangerousAttributes: function() {
                $('[target="_top"], [target="_parent"]').renameAttribute('target', 'forbidden-target');
            },

            restoreDangerousAttributes: function() {
                $('[forbidden-target="_top"], [forbidden-target="_parent"]').renameAttribute('forbidden-target', 'target');
            },

            changeUrlsToRelative: function() {
                window.change_all_urls_to_relative();
            },

            changeUrlsToOriginal: function() {
                window.change_all_urls_to_original();
            },

            toggleInteractionMode: function(mode) {
                window.VWOInjected.interactionMode = mode;

                if (mode === 'browse') {
                    window.VWOInjected.applyControl();
                    $('body').unborderify();
                    if (window._isLoadedViaProxy) {
                        this.changeUrlsToRelative();
                    }
                    $('._vwo_iframe_glass').hide();
                } else if (mode === 'design') {
                    $('._vwo_iframe_glass').show();
                    if (window._isLoadedViaProxy) {
                        this.changeUrlsToOriginal();
                    }
                    window.VWOInjected.getFullBodyControl(true);
                    // forced capture
                }
            }
        }
    };

    modeSwitcher = frameContext.registerService('modeSwitcher', modeSwitcher);

    return modeSwitcher;
});

define('designer/TopFrameManager', ['designer/FrameContext', 'jQuery-1-6-4', 'designer/inject/utils'], function(frameContext, $, utils) {
    'use strict';

    /* eslint camelcase: "off" */
    var vwoe_$ = frameContext.isParentFrame() && window.vwoe_$;

    var topFrameManager = {
        parentFrame: {
            showCodeEditor: function() {
                VWOEditor.angularScope.codeEditor.openGlobalCode();
            },

            toggleMobileOrientation: function() {
                VWOEditor.toggleOrientation();
                this.topWindowFrame.toggleOrientation();
            },
            hideNotification: function() {
                window.editor.notifier.clear(undefined, true)
            },

            setPointerEventsAllowed: function() {
                VWOEditor.pointerEventsAllowed = true;
            },

            removePointerEventsAllowed: function() {
                VWOEditor.pointerEventsAllowed = false;
            },

            hideVariationsAndGoalsMenu: function() {
                window.angular.element('.variations-menu.open').removeClass('open');
                window.angular.element('.goals-menu.open').removeClass('open');
            },
            updateMobileFrameRect: function() {
                VWOEditor.updateMobileFrameRect();
            },

            setEditorCookie: function() {
                window.setEditorCookie();
            },

            handleUserUploadEvent: function(eventData) {
                var data;
                try {
                    data = JSON.parse(eventData);

                    //Fix for https://jira.wingify.com/browse/QF-5739
                    //escape() will not encode: @*/+
                    //encodeURI() will not encode: ~!@#$&*()=:/,;?+'
                    //encodeURIComponent() will not encode: ~!*()'
                    data.link = escape(data.link);

                    if (data.index !== '') {
                        VWOEditor.uploadComplete(data.link, data.index);
                    } else {
                        VWOEditor.uploadComplete(data.link);
                    }
                } catch (error) {
                    data = eventData;
                    printStackTrace(error);
                } finally {
                    if (typeof data !== 'object') {
                        if (data === 'submitUploadForm') {
                            submitUploadForm();
                        } else if (data.indexOf('submitUploadForm') === 0) {
                            submitUploadForm(data.split(',')[1]);
                        } else {
                            VWOEditor.uploadComplete(data);
                        }
                    }
                }
            },

            setSmallContentWebsite: function(websiteHeight, $codeEditorBtnOuterRect) {
                //This flag will be used in the Editor frame to take decisions based on websites having small height
                VWOEditor.smallContentWebsite = true;
                VWOEditor.smallContentWebsiteHeight = websiteHeight;
                VWOEditor.$codeEditorBtnOuterRect = $codeEditorBtnOuterRect;
            },

            saveEditorChanges: function() {
                //Save the editor unsaved changes if there are any.
                if (VWOEditor.controllerScope.hasUnsavedChanges) {
                    VWOEditor.controllerScope.saveToCampaign(false);
                }
            }
        },
        topWindowFrame: {
            toggleOrientation: function() {
                var self = this;
                $('.js-device-orientation-button').toggleClass('landscape');
                $('#device-skin').stop(true, true).fadeOut(150, function() {
                    $(this).toggleClass('landscape').fadeIn(250);
                });
                setTimeout(function() {
                    self.parentFrame.updateMobileFrameRect();
                });
            },

            showNotification: function(message) {
                setTimeout(function() {
                    $('.vwo-editor-element.notification-bar').css('display', 'block').find('span').html(message);
                });
            },

            hideNotification: function() {
                setTimeout(function() {
                    $('.vwo-editor-element.notification-bar').css('display', 'none').find('span').html('');
                });
            },

            hideEditCodeButton: function() {
                setTimeout(function() {
                    $('#vwo-js-global-code.vwo-editor-element').css('display', 'none');
                });
            },

            showEditCodeButton: function() {
                setTimeout(function() {
                    $('#vwo-js-global-code.vwo-editor-element').css('display', 'block');
                });
            },

            allowPointerEventsThroughEditorFrame: function(leftCutoff, rightCutoff, topCutoff, menubarOffset) {

                var self = this;

                this.mouseMoveListener = function(e) {
                    if (e.clientY >= menubarOffset.top || (e.clientX > leftCutoff && e.clientX < rightCutoff && e.clientY > topCutoff)) {
                        self.blockPointerEventsThroughEditorFrame();
                    }
                }
                ;

                document.body.removeEventListener('mousemove', this.mouseMoveListener, true);
                document.body.addEventListener('mousemove', this.mouseMoveListener, true);

                var $frame = $('iframe#test_page');
                if (!$frame.hasClass('pointer-events-none')) {
                    $frame.addClass('pointer-events-none');
                }
            },

            blockPointerEventsThroughEditorFrame: function() {
                var $frame = $('iframe#test_page');
                if ($frame.hasClass('pointer-events-none')) {
                    $frame.removeClass('pointer-events-none');
                }
            },

            markUnsavedChanges: function() {
                window.topFrameInjected.hasUnsavedChanges = true;
            },

            resetUnsavedChanges: function() {
                window.topFrameInjected.hasUnsavedChanges = false;
            },

            closeEditorWindow: function() {
                window.close();
            }
        },
        childFrame: {
            showNotification: function(message) {
                if (window.vwoLoadingMode === 'mobile') {
                    this.topWindowFrame.showNotification(message);
                } else {
                    setTimeout(function() {
                        $('.vwo-editor-element.notification-bar').css('display', 'block').find('span').html(message);
                    });
                }
            },

            hideNotification: function() {
                if (window.vwoLoadingMode === 'mobile') {
                    this.topWindowFrame.hideNotification();
                } else {
                    setTimeout(function() {
                        $('.vwo-editor-element.notification-bar').css('display', 'none').find('span').html('');
                    });
                }
            },

            showEditCodeButton: function() {
                if (window.vwoLoadingMode === 'mobile') {
                    this.topWindowFrame.showEditCodeButton();
                } else {
                    setTimeout(function() {
                        $('#vwo-js-global-code.vwo-editor-element').css('display', 'block');
                    });
                }
            },

            hideEditCodeButton: function() {
                if (window.vwoLoadingMode === 'mobile') {
                    this.topWindowFrame.hideEditCodeButton();
                } else {
                    setTimeout(function() {
                        $('#vwo-js-global-code.vwo-editor-element').css('display', 'none');
                    });
                }
            },

            blockPointerEventsThroughEditorFrame: function() {

                this.parentFrame.removePointerEventsAllowed();

                if (window.vwoLoadingMode === 'mobile') {
                    this.topWindowFrame.blockPointerEventsThroughEditorFrame();
                } else {
                    var $frame = $('iframe#test_page');
                    if ($frame.hasClass('pointer-events-none')) {
                        $frame.removeClass('pointer-events-none');
                    }
                }

                document.body.removeEventListener('mousemove', this.mouseMoveListener, true);
            },

            allowPointerEventsThroughEditorFrame: function(leftCutoff, rightCutoff, topCutoff, menubarOffset) {

                this.parentFrame.setPointerEventsAllowed();

                if (window.vwoLoadingMode === 'mobile') {
                    this.topWindowFrame.allowPointerEventsThroughEditorFrame(leftCutoff, rightCutoff, topCutoff, menubarOffset);
                } else {

                    var self = this;

                    var $codeEditorBtn = $('#vwo-js-global-code.vwo-editor-element');
                    var $codeEditorBtnOuterRect;
                    if ($codeEditorBtn.length > 0) {
                        var $codeEditorBtnOffset = $codeEditorBtn.offset();
                        $codeEditorBtnOuterRect = {
                            top: $codeEditorBtnOffset.top,
                            left: $codeEditorBtnOffset.left,
                            right: $codeEditorBtnOffset.left + $codeEditorBtn.outerWidth(),
                            bottom: $codeEditorBtnOffset.top + $codeEditorBtn.outerHeight()
                        };
                    }

                    if (!window._vwo_skipHeightCheck && utils.getDocHeight() <= document.documentElement.clientHeight) {
                        //If website height is small, update the menubar offset and topcutoff for calculations
                        //60px is the height of the extra div which we add on the user website along with the iframe
                        this.parentFrame.setSmallContentWebsite(document.body.scrollHeight, $codeEditorBtnOuterRect);
                        if (document.body.scrollHeight < topCutoff) {
                            topCutoff = document.body.scrollHeight - 60;
                            menubarOffset.top = document.body.scrollHeight - 60;
                        } else {
                            menubarOffset.top = menubarOffset.top - 60;
                        }
                        this.smallHeightWebsite = true;
                    } else {
                        this.smallHeightWebsite = false;
                    }

                    this.mouseMoveListener = function(e) {
                        if (e.clientY > menubarOffset.top || (e.clientX > leftCutoff && e.clientX < rightCutoff && e.clientY > topCutoff)) {
                            if (!self.smallHeightWebsite || !$codeEditorBtnOuterRect) {
                                self.blockPointerEventsThroughEditorFrame();
                            } else {
                                //For small height websites, block the pointer events only if mouse position is outside the code editor button area
                                if (e.clientX < $codeEditorBtnOuterRect.left || e.clientX > $codeEditorBtnOuterRect.right || e.clientY < $codeEditorBtnOuterRect.top || e.clientY > $codeEditorBtnOuterRect.bottom) {
                                    self.blockPointerEventsThroughEditorFrame();
                                }
                            }
                        }
                    }
                    ;

                    document.body.removeEventListener('mousemove', this.mouseMoveListener, true);
                    document.body.addEventListener('mousemove', this.mouseMoveListener, true);

                    var $frame = $('iframe#test_page');
                    if (!$frame.hasClass('pointer-events-none')) {
                        $frame.addClass('pointer-events-none');
                    }
                }
            },

            markUnsavedChanges: function() {
                if (window.vwoLoadingMode === 'mobile') {
                    this.topWindowFrame.markUnsavedChanges();
                } else {
                    window.VWOInjected.hasUnsavedChanges = true;
                }
            },

            resetUnsavedChanges: function() {
                if (window.vwoLoadingMode === 'mobile') {
                    this.topWindowFrame.resetUnsavedChanges();
                } else {
                    window.VWOInjected.hasUnsavedChanges = false;
                }
            },

            closeEditorWindow: function() {
                if (window.vwoLoadingMode === 'mobile') {
                    this.topWindowFrame.closeEditorWindow();
                } else {
                    window.close();
                }
            }
        }
    };

    topFrameManager = frameContext.registerService('topFrameManager', topFrameManager);
    return topFrameManager;
});

define('designer/inject/main', ['designer/OperationManager', 'designer/DOMFootprint', 'designer/ElementManager', 'designer/IframeNavigator', 'designer/inject/utils', 'designer/MarkupCleaner', 'designer/ChangeApplier', 'redactor', //Redactor jquery instance
'designer/designer-common', 'designer/postmessage', 'designer/inject/postmessage-inject', 'designer/inject/inject-jquery-utils', 'designer/ModeSwitcher', 'designer/TopFrameManager'], function(operationManager, DOMFootprint, elementManager, iframeNavigator, utils, markupCleaner, changeApplier, redactor_$) {

    //Add vwoLoadingMode - desktop or mobile - to be used later in the application
    window.vwoLoadingMode = vwoe_$("iframe#test_page").length > 0 ? 'desktop' : 'mobile';

    window.VWOInjected = window.VWOInjected || {};

    window.VWOInjected.redactor_$ = redactor_$;

    utils.addEditorElementsOnWebsite('desktop', window.isCodeEditorEnabled);
    utils.registerUnloadHandler(window.vwoLoadingMode, window.accountId, window.loadingAppName);
    utils.registerUserUploadsHandler(window.vwoLoadingMode);

    VWOInjected.highlighted = null,
    VWOInjected.selecting = true,
    VWOInjected.interactionMode = 'design';
    VWOInjected.deferredScripts = {};

    var request = VWOInjected.request, getProperty = VWOInjected.getProperty, setProperty = VWOInjected.setProperty, errorReport = VWOInjected.errorReport, controlFootprint;

    // Get current mode
    request('getProperty', 'VWOEditor.type').then(function(currentMode) {
        // Fallback to design incase type is not set.
        VWOInjected.interactionMode = currentMode || 'design';
    });

    try {
        var _vwo_api_section_callback = {}
          , VWO_SECTION_ID = 1
          , _VWO_domReady = false;
        if (_isLoadedViaProxy) {
            document.domain = 'vwo.com';
        }

        // if page is loaded via proxy, we dont want to inject our code
        // in iframes contained on the test_page
        // in those cases, set _VWO_domReady = true which makes our code a no-op
        if (!_isLoadedViaProxy || (window.vwoLoadingMode === 'desktop' && window === window.top) || (window.vwoLoadingMode === 'mobile' && window.parent === window.top)) {
            VWOInjected.request('VWOEditor.showTestPage');
            VWOInjected.request('VWOEditor.updateLoadingMessage', 'fetchResources');
        } else {
            _VWO_domReady = true;
        }

        vwoe_$(window).bind('unload', function() {
            // on unload, show hamster in parent
            VWOInjected.request('VWOEditor.updateLoadingMessage', 'fetchPage');
            VWOInjected.request('VWOEditor.resetEditorFlags');
            VWOInjected.request('setEditorCookie');
        });

    } catch (e) {
        errorReport(e, printStackTrace(), 'to_inject_head:1');
    }

    // Simple hash function which returns positive integers for a given string
    function getHash(str) {
        var hash = 0, i, chr;
        if (str.length === 0)
            return hash;
        for (i = 0; i < str.length; i++) {
            chr = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + chr;
            hash |= 0;
            // Convert to 32bit integer
        }
        return hash + 2147483648;
    }

    // Element IDs are created using shortSelectorPath
    // This ensures that most of the ids will stay the same even if user changes parts of control outside of editor
    function getElementID(el, elCount) {
        var baseID = ('' + getHash(vwoe_$(el).shortSelectorPath(true)));
        elCount[baseID] = elCount[baseID] || 0;
        return baseID + (elCount[baseID]++);
    }

    /**
 * This method is used to adjust styles on user website
 * 1. If user website elements have z-index greater than editor iframe, set a lower z-index value
 * 2. If user website has an element which has position fixed and bottom 0 => sticky bars at bottom, set bottom as 60px to position the element just above the editor menubar
 */
    VWOInjected.adjustStyles = function() {
        try {
            //Need to run this function only for desktop mode as in mobile mode, the website is loaded inside the frame which does not cause style issues
            if (window.vwoLoadingMode === 'desktop') {
                var els = document.getElementsByTagName('*');
                var elementCount = els.length;

                var tagsToIgnore = ['SCRIPT', 'NOSCRIPT', 'LINK'];

                var cssText = '';
                for (var i = 0; i < elementCount; i++) {
                    var el = els[i];
                    if (el && (el.tagName !== 'IFRAME' || el.id !== 'test_page') && tagsToIgnore.indexOf(el.tagName) < 0) {
                        var cssRules = [];
                        var elementStyles = window.getComputedStyle(el);
                        if (elementStyles.zIndex > 2147483001) {
                            cssRules.push('z-index: 2147483001 !important');
                        }
                        if ((elementStyles.position === 'fixed' || elementStyles.position === 'sticky') && elementStyles.bottom && +(elementStyles.bottom.replace(/px/g, '')) < 60) {
                            cssRules.push('bottom: 60px !important');
                        }

                        if (cssRules.length > 0) {
                            var elementSelectorPath = vwoe_$(el).shortSelectorPath(true);
                            cssText += elementSelectorPath + ' { ' + cssRules.join(';') + ' } \n';
                        }
                    }
                }

                if (cssText !== '') {
                    var head = document.getElementsByTagName('head')[0];
                    var styleElement = document.createElement('style');
                    styleElement.type = 'text/css';
                    styleElement.appendChild(document.createTextNode(cssText));
                    head.appendChild(styleElement);
                }
            }
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::adjustStyles');
        }
    }
    ;

    VWOInjected.assignIDs = function() {
        var els = document.getElementsByTagName('*')
          , elCount = {};
        // shared object for keeping track of hash collisions

        var elementsCount = els.length;

        // Benchmark this number using data from sentry
        // 25000 is based on our understanding of complex DOM structures. We are doing this to prevent as minimal document.querySelectorAll look ups for such big trees.
        if (elementsCount > 25000) {
            window._vwo_noIdMode = true;
            errorReport(new Error('Elements exceeded 25000 on user website'), null, null, [{
                url: window.location.href,
                elements: els.length
            }]);
        }

        for (var i = 0; i < elementsCount; i++) {
            els[i].setAttribute('vwo-el-id', getElementID(els[i], elCount));
        }
    }
    ;
    /**
 *
 * We need to insert glasses, attach handlers
 */
    function performInitialDomManipulations() {
        if (!vwoe_$('._vwo_full_page_glass').length) {
            vwoe_$('body').append('<div class="_vwo_full_page_glass"></div>');
        }

        resizeFullPageGlass();

        vwoe_$('._vwo_full_page_glass').unbind('click').bind('click', function() {
            request('VWOEditor.onGlassClick');
        }).hide();

        // cover all iframe with a div to prevent elements inside the iframe from being clicked
        changeApplier.putGlassOnEachIframe();

        // flash hacks
        vwoe_$("embed").attr("allowscriptaccess", "never");
        vwoe_$("param[name=allowscriptaccess]").attr("value", "never");
    }

    vwoe_$(function() {
        try {
            if (_VWO_domReady)
                return;
            _VWO_domReady = true;
            window.document.write = function() {}
            ;

            window.document.writeln = function() {}
            ;

            request('VWOEditor.notifyDomReady');

            //Insert Glass if not inserted already by applyControl
            performInitialDomManipulations();

            elementManager.initialize();
            iframeNavigator.initialize();

            // flash hacks
            vwoe_$("embed").attr("wmode", "transparent").wrap('<div>');

        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::documentLoad', arguments);
        }
    });

    // helper to prevent clicks when rearranging elements with a A in it.
    window.VWO_false = function() {
        return false;
    }

    // set full page glass to complete
    function resizeFullPageGlass() {
        try {

            var D = window.document;
            var offsetDelta = utils.getBodyOffset();
            vwoe_$('._vwo_full_page_glass').css({
                height: Math.max(D.body.scrollHeight, D.body.offsetHeight),
                width: Math.max(D.body.scrollWidth, D.body.offsetWidth),
                top: 0 - offsetDelta.top,
                left: 0 - offsetDelta.left
            });

        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::vwoe_$.fn.resizeFullPageGlass', arguments);
        }
    }

    function reloadPage(url) {
        try {

            if (typeof url === 'string') {
                location.href = url;
            } else {
                location.reload();
            }

        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::reloadPage', arguments);
        }
    }

    function initRearrange(elClass, hasVariation) {
        try {

            var jq = vwoe_$('.' + elClass);

            // if this element is the only child of its parent, go up in the DOM tree till we find
            // an element which has some siblings and isn't <BODY>
            if (jq.parent().children().length == 1) {
                var $parentWithSiblings = jq.parent();
                if (!$parentWithSiblings || !$parentWithSiblings.length)
                    return;
                while ($parentWithSiblings.parent().children().length <= 1 || $parentWithSiblings.get(0).tagName.toLowerCase() === 'body') {
                    $parentWithSiblings = $parentWithSiblings.parent();
                }

                VWOInjected.selecting = true;
                request('setProperty', 'VWOEditor.selecting', true);
                if (!hasVariation) {
                    jq.removeClass(elClass);
                }

                VWOInjected.highlighted = $parentWithSiblings.get(0);
                elementManager.selectElement($parentWithSiblings, true);

                return;
            }

            request('VWOEditor.el.getControl', 'rearrange');
            vwoe_$('#_vwo_glass').hide();
            var el;
            jq.css('cursor', 'move').unshimmy().borderify().parent().shimmy(true, jq).borderify(true, jq).sortable({
                create: function() {
                    vwoe_$(this).children().each(function() {
                        vwoe_$(this).data('vwo_xpath', vwoe_$(this).XPath());
                        var onclick = (this.getAttribute('onclick') || '');
                        onclick = 'return VWO_false();' + onclick;
                        this.setAttribute('onclick', onclick);
                    });
                },
                start: function(e) {
                    el = jq.get(0);
                },
                helper: function() {
                    var div = document.createElement('div');
                    div.style.background = 'rgba(200,200,200,0.3)';
                    div.style.border = "2px dashed #888";
                    div.style.cursor = "move";
                    document.body.appendChild(div);
                    return div;
                },
                tolerance: 'pointer',
                cancel: jq.parent().XPath() + '>' + ':not(".' + elClass + '")',
                update: function(e, ui) {
                    request('setProperty', 'VWOEditor.el.jq', ('vwoe_$(".' + elClass + '")').eval());
                    jq = vwoe_$('.' + elClass);
                    jq.parent().shimmy(true, jq).borderify(true, jq);
                },
                stop: function(e, ui) {
                    var param = ui.item.prevNextAppend();
                    request('VWOEditor.el.update', param, false, false);
                },
                sort: function(e, ui) {
                    ui.item.insertAfter(vwoe_$('.ui-sortable-placeholder').hide().removeClass(elClass).XPath());
                    request('setProperty', 'VWOEditor.el.jq', ('vwoe_$(".' + elClass + '")').eval());
                    vwoe_$('.' + elClass).borderify().show().parent().fadeOut(1, function() {
                        vwoe_$(this).show()
                    });
                }
            }).disableSelection();

        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::initRearrange', arguments);
        }
    }

    function applyEditHTML(cleanedHTML, elClass) {
        try {

            var $node = vwoe_$('.' + elClass);

            var parentTagName = ($node.get(0).tagName == 'HEAD') ? 'DIV' : $node.parent().get(0).tagName;

            var s = document.createElement(parentTagName);
            s.innerHTML = markupCleaner.formatContent(cleanedHTML, elClass, parentTagName);

            // remove all elements that were created with the target element
            vwoe_$('[class*=vwo_group_' + elClass.replace(/vwo_/, '') + ']').remove();

            for (var i = 0; i < s.childNodes.length; i++) {
                if (s.childNodes[i].tagName === 'SCRIPT') {
                    var script = document.createElement('script')
                      , elem = s.childNodes[i]
                      , head = document.getElementsByTagName("head")[0] || document.documentElement
                      , data = (elem.text || elem.textContent || elem.innerHTML || "");
                    script.type = "text/javascript";
                    try {
                        script.appendChild(document.createTextNode(data));
                    } catch (e) {
                        script.text = data;
                    }
                    head.insertBefore(script, head.firstChild);
                    head.removeChild(script);
                }
            }
            $node.each(function() {
                this.parentNode.replaceChild(s.childNodes[0].cloneNode(true), this);
            });

            s.removeChild(s.childNodes[0]);

            // update the node
            $node = vwoe_$('.' + elClass);

            for (var i = s.childNodes.length - 1; i >= 0; i--) {
                $node.each(function() {
                    this.parentNode.insertBefore(s.childNodes[i].cloneNode(true), this.nextSibling);
                });
            }

        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::applyEditHTML', arguments);
        }
    }

    function getControl(el, operation, propList) {
        try {
            var jq = vwoe_$('.' + el.elClass);

            if (!jq.length) {
                jq = vwoe_$(el.shortSelectorPath || el.XPath);
            }

            if (jq.length === 0) {
                return el;
            }

            el.currentOp = operation;

            var operationService = operationManager.getOperationByName(operation);
            return operationService.saveControl(el, propList);
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::getControl', arguments);
        }
    }

    function applyOp(el, op, props, xpath, shortSelectorPath, isControl) {
        try {
            return changeApplier.applyOp(el, op, props, xpath, shortSelectorPath, isControl);
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::applyOp', arguments);
        }
    }

    function applyControlForOp(el, op, xpath, shortSelectorPath) {
        try {
            return changeApplier.applyControlForOp(el, op, xpath, shortSelectorPath);
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::applyControlForOp', arguments);
        }
    }

    function applyControl() {
        changeApplier.applyControl();
    }

    /**
 * Captures control if not already captured unless we tell it to force capture.
 * @param  {boolean} forcedCapture Should capture forcibly.
 */
    function getFullBodyControl(forcedCapture) {
        changeApplier.getFullBodyControl(forcedCapture);
    }

    VWOInjected.getFullBodyControl = getFullBodyControl;

    function putGlassOnEachIframe() {
        var $glasses = vwoe_$('._vwo_iframe_glass');
        var $visibleIframes = vwoe_$('iframe:visible');

        $visibleIframes.each(function(i, v) {
            var iframeXPath = window.processXpath(vwoe_$(v).XPath());
            var $currentGlass = $glasses.eq(i);

            // If already glasses are present, reuse them
            if ($currentGlass.length) {
                $currentGlass.attr('data-xpath', iframeXPath);
            } else {
                // Add new glasses
                $currentGlass = vwoe_$('<div class="_vwo_iframe_glass" data-xpath="' + iframeXPath + '"></div>').appendTo('body');
            }

            $currentGlass.css({
                height: vwoe_$(v).outerHeight(),
                width: vwoe_$(v).outerWidth(),
                top: vwoe_$(v).offset().top,
                left: vwoe_$(v).offset().left,
                position: 'absolute',
                zIndex: 2500001
            });
        });

        // Remove Extra Glasses
        if ($glasses.length > $visibleIframes.length) {
            for (var j = $glasses.length - 1; j >= $visibleIframes.length; j--) {
                $glasses.eq(j).remove();
            }
        }
    }

    function applyVariations(variations, selector, globalCode) {
        try {
            return changeApplier.applyVariations(variations, selector, globalCode);
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::applyVariation', arguments);
        }
    }

    // execute deferred scripts after the last apply operation to avoid duplicacy
    function executeDeferedScripts() {
        try {
            for (var key in window.VWOInjected.deferredScripts) {
                var action = window.VWOInjected.deferredScripts[key];
                if (action && typeof action === 'function') {
                    action();
                }
            }
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::executeDeferedActions', arguments);
        }
    }

    function applyVariation(state, globalCode) {
        try {
            return changeApplier.applyVariation(state, globalCode);
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::.applyVariation', arguments);
        }
    }

    function unapplyVariation(state) {
        try {

            var stack = state.stack
              , elements = state.elements;

            for (var i = stack.length - 1; i >= 0; i--) {
                applyControlForOp(elements[stack[i].el], stack[i].op, stack[i].XPath, stack[i].shortSelectorPath);
            }
            return state;
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::.unapplyVariation', arguments);
        }
    }

    /**
 * Run code by inserting code in script tags and appending to head and return the next element data
 * @param  {string} code the code to run
 * @param  {string} selector the next element selector
 */
    function executeCodeAndGetElementData(code, selector, referenceSelector) {
        try {
            if (code) {
                eval(code);
                vwo_$('.vwo-execute-code').remove();
            }
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::.executeCodeAndGetElementData', arguments);
        } finally {
            return {
                length: vwo_$(selector).getLength(),
                fullSelectorPath: vwo_$(selector).selectorPath(),
                originalSelector: selector,
                fullReferenceSelectorPath: referenceSelector && vwo_$(referenceSelector).selectorPath()
            };
        }
    }

    function populate(data, testType) {
        try {
            VWOInjected.testType = testType;

            for (var i = 0; i < data.length; i++) {
                var section = data[i];
                for (var j = 0; j < section.variations.length; j++) {
                    var variation = section.variations[j];
                    // if this is the control
                    if (variation.variation_id == 1) {
                        // add an element in control
                        // get xpath from section which will be only in case of MVT
                        var xpath = section.xpath || section.section_path;
                        if (xpath) {
                            // if ._vwo_sec class is present in MVT, the path is invalid for use in MVT
                            // so use element's path instead
                            if (xpath.indexOf('._vwo_sec') >= 0) {
                                var filterVariations = section.variations.filter(function(v) {
                                    return v.stack && v.stack.length;
                                });
                                if (filterVariations.length) {
                                    xpath = filterVariations[0].stack[0].XPath;
                                }
                            }
                            var editGroupClass = vwoe_$(xpath).getEditGroupClass()
                              , parentTagName = vwoe_$(xpath).parent().attr('tagName');
                            // create VWOElement
                            var el = new VWOElement(xpath,undefined,undefined,undefined,editGroupClass,parentTagName);

                            el.variation = 1;
                            el.changes = {};
                            addElement(variation, el);
                        }
                    } else {
                        if (!variation.stack || !variation.stack.length)
                            continue;

                        populateStack(variation, section, testType, data);
                        unapplyVariation({
                            elements: variation.elements,
                            stack: variation.stack
                        });
                        // Above unapplication of variation wont remove JS changes, so do the new control apply.
                        applyControl();
                    }
                }
            }

            return data;

        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::.populate', arguments);
        }
    }

    function populateStack(variation, section, testType, sections) {
        try {

            var stackEntry, data = variation, isPseudoCoalOperation = false;

            for (var i = 0; i < data.stack.length; i++) {
                stackEntry = data.stack[i];
                isPseudoCoalOperation = stackEntry.op.opName == "_clickElement" ? true : false;
                if (stackEntry.modified) {
                    // if user edited the xpath, make no amends to it
                    section.modified = true;
                }

                var xpath = stackEntry.XPath || variation.xpath;

                xpath = section.modified ? xpath : correctXpath(xpath);

                // For clone element op, above selector correction might get us a wrong selector
                // with ID in it. So we remove the #<ID> part from the last tag.
                // Eg. DIV + DIV#a and first DIV was cloned. Stack entry in this case would be DIV + DIV
                // which would become DIV + DIV#a after correcting - WRONG!
                if (stackEntry.op.opName === 'cloneElement') {
                    xpath = xpath.replace(/(\+\s+\w+)#[^>+]*$/, '$1');
                }

                var shortSelectorPath = stackEntry.shortSelectorPath || vwoe_$(xpath).shortSelectorPath()
                  , element = findElement(vwoe_$(shortSelectorPath), section, variation.variation_id, sections, testType)
                  , editGroupClass = vwoe_$(xpath).getEditGroupClass()
                  , parentTagName = vwoe_$(xpath).parent().attr('tagName');

                //if element does not exist
                if (!element) {
                    element = new VWOElement((section.modified ? xpath : processXpath(xpath)),undefined,undefined,undefined,editGroupClass,parentTagName,shortSelectorPath);
                } else {
                    element = element.copy(parentTagName);
                }

                if (!isPseudoCoalOperation) {
                    // for an 'after' and 'insert' type op, refresh the elClass so that wrong element isn't
                    // touched
                    if (opNames[stackEntry.op.opName][1] === 'after' || opNames[stackEntry.op.opName][1] === 'insert') {
                        element.elClass = 'vwo_' + VWOInjected.getTimeStamp();
                        element.jq = null;
                        element.control = {};
                        element.changes = {};
                    }

                    // For ChangeCSS op, control is required for certain properties only.
                    // Lets make an array of those properties to pass to 'getControl' function
                    if (stackEntry.op.opName === 'changeCSS') {
                        var propList = [];
                        for (var prop in stackEntry.op[opNames[stackEntry.op.opName][1]]) {
                            propList.push(prop);
                        }
                    }

                    // get the control values
                    getControl(element, stackEntry.op.opName, propList);

                    // Add control to stackEntry.op
                    if (stackEntry.op.opName === 'content' && element.jq.length && element.jq.attr('tagName') !== 'HEAD') {
                        stackEntry.op.control = markupCleaner.cleanHTML(element.jq.outerHTML(), element.jq.parent().get(0).nodeName);
                    }

                    applyOp(element, stackEntry.op, null, element.XPath, element.shortSelectorPath);

                    // extend the changes
                    //Support backward compatibility for vwoCss.. If the expected op property is vwoCss and it is not present in the op stack, default to css property
                    var operationProperty = opNames[stackEntry.op.opName][1];
                    if (operationProperty === 'vwoCss' && !stackEntry.op[operationProperty] && stackEntry.op['css']) {
                        operationProperty = 'css';
                    }

                    if (typeof stackEntry.op[operationProperty] === "string")
                        element.changes[stackEntry.op.opName] = stackEntry.op[operationProperty];
                    else
                        element.changes[stackEntry.op.opName] = vwoe_$.extend(true, element.changes[stackEntry.op.opName], stackEntry.op[operationProperty]);

                    if (testType != 'ab') {
                        // if an mvt
                        vwoe_$(element.elClass).addClass('vwo_section').addClass('vwo_section_' + section.section_id);
                    }
                }
                // an element has to be made aware of its section & variation.
                element.section = section.section_id;
                element.variation = variation.variation_id;
                addElement(variation, element);
                var el = element.copy(element.parentTagName);
                el.variation = 1;
                el.changes = {};
                //Add a copy of VWOElement to control too.
                addElement(section.variations[0], el);
                vwoe_$.extend(stackEntry, {
                    el: variation.elements.indexOf(element),
                    XPath: xpath,
                    parentTagName: parentTagName,
                    shortSelectorPath: shortSelectorPath
                });
            }

        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::populateStack', arguments);
        }
    }

    function findElement($el, section, variationId, sections, testType) {
        try {

            function findElementWithJq(variation) {
                if (!variation || !variation.elements)
                    return false;
                for (var i = 0; i < variation.elements.length; i++) {
                    if ($el.hasClass(variation.elements[i].elClass)) {
                        return variation.elements[i];
                    }
                }
            }

            // the logic is to find in current variation, if not found find in control.
            if (testType == 'ab') {
                if (!section)
                    return false;
                var e = findElementWithJq(section.variations[variationId - 1]);
                if (e) {
                    return e;
                } else {
                    var e = findElementWithJq(section.variations[0]);
                    if (e) {
                        return e;
                    }
                }
            } else {
                for (var i = 0; i < sections.length; i++) {
                    var section = sections[i];
                    if (!section || section.deleted == 1)
                        continue;
                    var e = findElementWithJq(section.variations[section.variations.length - 1]);
                    if (e) {
                        return e;
                    } else {
                        var e = findElementWithJq(section.variations[0]);
                        if (e) {
                            return e;
                        }
                    }
                }
            }

            return false;
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::findElement', arguments);
        }
    }

    function addElement(variation, el) {
        try {
            var element = null;

            if (!variation.elements) {
                variation.elements = [];
            }

            for (var i = 0; i < variation.elements.length; i++) {
                if (el.elClass == variation.elements[i].elClass) {
                    element = variation.elements[i];
                    break;
                }
            }

            if (element) {
                // find all props in control and changes, and extend them
                el.changes = vwoe_$.extend(true, element.changes, el.changes);
                el.control = vwoe_$.extend(true, element.control, el.control);
                // remove the existing...
                variation.elements.splice(variation.elements.indexOf(element), 1, el);
                return;
            }
            variation.elements.push(el);
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::addElement', arguments);
        }
    }

    /**
 * The class that relates to DOM elements
 *
 * @param xpath The xpath of the element
 * @param copy if we are copying an element object
 * @param elClass the element class to use
 */

    function VWOElement(xpath, copy, elClass, tagName, editGroupClass, parentTagName, shortSelectorPath) {
        try {
            this.changes = {};
            this.control = {};
            this.tempChanges = {};

            // We use the parent tagName while cleaning in EditHTML op
            this.parentTagName = parentTagName;
            this.currentOp = '';
            elClass = elClass ? '.' + elClass : '';
            this.jq = vwoe_$(elClass || shortSelectorPath || xpath);

            this.XPath = xpath;
            this.shortSelectorPath = shortSelectorPath;
            var that = this;
            if (copy !== true) {
                // does this el have a vwo_group_ts?
                if (editGroupClass) {
                    this.elClass = editGroupClass;
                } else {
                    var time = (new Date()).getTime();
                    while (time == (new Date()).getTime())
                        ;
                    this.elClass = 'vwo_' + (new Date()).getTime();
                }
                this.jq.addClass(this.elClass);
            }
            this.variation = null;

            that.tag = tagName || this.jq.attr('tagName');

        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::VWOElement', arguments);
        }
    }

    /**
 * Copy an VWOelement object
 */

    VWOElement.prototype.copy = function(parentTagName) {
        try {
            // copy this...
            var el = new VWOElement(this.XPath,true,this.elClass,this.tag,'',parentTagName,this.shortSelectorPath);
            el.elClass = this.elClass;
            el.variation = this.variation;
            el.changes = vwoe_$.extend(true, {}, this.changes);
            el.control = vwoe_$.extend(true, {}, this.control);
            el.tempChanges = vwoe_$.extend(true, {}, this.tempChanges);
            return el;
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::VWOElement.prototype.copy', arguments);
        }
    }
    ;

    VWOElement.prototype.toJSON = function() {
        return {
            changes: this.changes,
            control: this.control,
            tempChanges: this.tempChanges,
            currentOp: this.currentOp,
            XPath: this.XPath,
            elClass: this.elClass,
            tag: this.tag,
            parentTagName: this.parentTagName,
            isSectionPathModified: this.variation && this.variation.section && this.variation.section.modified,
            variation: typeof this.variation === 'object' ? this.variation.variation_id : this.variation,
            section: typeof this.section === 'object' ? this.section.section_id : this.section,
            shortSelectorPath: this.shortSelectorPath
        }
    }
    ;

    /**
 * Tries to correct the xpath of an element. If the element cannot be
 * found using the xpath, it tries to get it by using the processed xpath.
 * If successful, it returns the new element's xpath.
 *
 * @param xpath the input xpath string
 * @return a deferred object that resolves to the correct xpath.
 */
    function correctXpath(xpath) {
        try {
            var jq = vwoe_$(xpath);
            if (jq.length === 0) {
                jq = vwoe_$(processXpath(xpath));
                if (jq.length !== 0)
                    return jq.XPath();
            } else
                return jq.XPath();
            return xpath;
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::correctXpath', arguments);
        }
    }
    /**
 * Gives the selector of largest descendant element which is bigger in size than the parent element.
 * Used currently for ON_PAGE goal only.
 * @return {String} Selector String
 */
    function getCorrectSelector(selector, goalType) {
        try {
            var correctSelector = null
              , maxArea = vwoe_$(selector).height() * vwoe_$(selector).width();
            if (goalType == 'ON_PAGE') {
                vwoe_$(selector).find('*').each(function() {
                    var area = vwoe_$(this).height() * vwoe_$(this).width();
                    if (area > maxArea) {
                        correctSelector = vwoe_$(this).XPath();
                        maxArea = area;
                    }
                });
            }
            if (correctSelector) {
                return correctSelector;
            } else {
                return selector;
            }
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::getCorrectSelector', arguments);
        }
    }
    /**
 * [getAllMatchingElementsSelectors description]
 * @param  {String} selector Its the pattern for goalURL
 * @param  {String} goalType
 * @return {String} Combined selector made from the selectors of all the elements which matched the pattern.
 */
    function getAllMatchingElementsSelectors(selector, goalType) {
        try {
            var selectors = [];
            if (goalType == 'ON_PAGE') {
                vwoe_$('a').each(function() {
                    if (_matchWildcard(vwoe_$(this)[0].getAttribute('href'), selector)) {
                        selectors.push(getCorrectSelector(vwoe_$(this).XPath(), goalType));
                    }
                });
            } else if (goalType == 'FORM_SUBMIT') {
                vwoe_$('form').each(function() {
                    if (_matchWildcard(vwoe_$(this)[0].getAttribute('action'), selector)) {
                        selectors.push(vwoe_$(this).XPath());
                    }
                });
            } else {
                selectors.push(selector);
            }
            return selectors.join(',');
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::getAllMatchingElementsSelectors', arguments);
        }
    }

    VWOInjected.updateHighlightsForGoal = function(data) {
        var showData = data.show || []
          , hideData = data.hide || [];
        for (var i = 0; i < hideData.length; i++) {
            if (!hideData[i]) {
                continue;
            }
            var unborderifyArgs = hideData[i].otherArgs;
            vwoe_$(hideData[i].selector).unborderify(unborderifyArgs.shouldRemoveAll, unborderifyArgs.identifier);
        }
        for (var i = 0; i < showData.length; i++) {
            var borderifyArgs = showData[i].otherArgs
              , goalType = showData[i].goalType
              , selectors = getAllMatchingElementsSelectors(showData[i].selector, goalType);
            if (!showData[i]) {
                continue;
            }
            vwoe_$(selectors).borderify(borderifyArgs.elColor, borderifyArgs.elem, borderifyArgs.identifier)
        }
    }

    /**
	*
	* @param selector A selector which decides which elements will have their classes removed
	* @param classRegex A regex string which when matched is removed from the classes list.
	*/
    VWOInjected.removeClasses = function(selector, classRegex) {
        vwoe_$(selector).each(function() {
            vwoe_$(this).attr('class', vwoe_$(this).attr('class').replace(new RegExp(classRegex), ""));
        });
    }

    /**
	* Will add the class only if that class doesn't exist on  any other element.
	* @param xpathClassPairs xpath:className key value pairs
	* @param classes array of classes
	*/
    VWOInjected.addClassesAtXpaths = function(xpathClassPairs) {
        vwoe_$.each(xpathClassPairs, function(xpath, className) {
            if (!vwoe_$('.' + className).length) {
                vwoe_$(xpath).addClass(className);
            }
        });
    }

    VWOInjected.getClasses = function(selector) {
        var $el = vwoe_$(selector).eq(0);
        var classes = {
            itself: '',
            parents: [],
            children: [],
            siblings: []
        };
        function getClassValue(el) {
            var classes = vwoe_$(el).attr('class');
            // For elements like SVG, className is an object.
            if (typeof classes !== 'string') {
                return '';
            }
            return classes;
        }
        classes.itself = getClassValue($el);

        $el.parents().each(function() {
            classes.parents.push(getClassValue(this));
        });

        $el.find('*').each(function() {
            classes.children.push(getClassValue(this));
        });

        $el.siblings().each(function() {
            classes.siblings.push(getClassValue(this));
        });

        return classes;
    }

    VWOInjected.removeFromCoalGoal = function(XPath, goalTimestamp) {
        var coalClassName = this.coalClassPrefix + goalTimestamp
          , classRegex = new RegExp(coalClassName + '_(\\d+)')
          , classes = this.getClasses(XPath);
        vwoe_$(XPath).each(function() {
            //Remove COAL class
            vwoe_$(this).attr('class', vwoe_$(this).attr('class').replace(classRegex, ""));
        });
        return classes;
    }

    VWOInjected.getXPaths = function(selectors) {
        var XPaths = [];
        vwoe_$.each(selectors, function(i, selector) {
            XPaths.push(vwoe_$(selector).XPath());
        })
        return XPaths;
    }

    VWOInjected.getShortSelectorPaths = function(selectors) {
        var selectorPaths = [];
        vwoe_$.each(selectors, function(i, selector) {
            selectorPaths.push(vwoe_$(selector).shortSelectorPath());
        })
        return selectorPaths;
    }

    VWOInjected.applyAllSectionsAndVariations = function(variationsContainer, selector, revertToVariations, shortSelectorMode) {
        try {
            var obj, xpaths = [], shortSelectorPaths = [], statesContainer = [];

            for (var i = 0; i < variationsContainer.length; i++) {
                obj = applyVariations(variationsContainer[i], selector);
                xpaths.push(obj.xpath);
                shortSelectorPaths.push(vwoe_$(selector).shortSelectorPath());
                statesContainer.push(obj.states);
            }

            obj = applyVariations(revertToVariations, selector);
            statesContainer.push(obj.states);
            xpaths.push(obj.xpath);
            shortSelectorPaths.push(vwoe_$(selector).shortSelectorPath());

            return {
                xpaths: xpaths,
                shortSelectorPaths: shortSelectorPaths,
                statesContainer: statesContainer
            }
        } catch (e) {
            errorReport(e, printStackTrace(), 'inject::applyAllSectionsAndVariations', arguments);
        }
    }

    VWOInjected.convertFullSelectorPathToShortSelectorPath = function(xpaths) {
        var shortXPaths = {};

        for (var i = 0; i < xpaths.length; i++) {
            shortXPaths[xpaths[i]] = vwoe_$(xpaths[i]).shortSelectorPath() || xpaths[i];
        }

        return shortXPaths;
    }

    vwoe_$.extend(VWOInjected, {
        unapplyVariation: unapplyVariation,
        applyVariation: applyVariation,
        applyVariations: applyVariations,
        applyControlForOp: applyControlForOp,
        applyOp: applyOp,
        getControl: getControl,
        applyEditHTML: applyEditHTML,
        initRearrange: initRearrange,
        reloadPage: reloadPage,
        resizeFullPageGlass: resizeFullPageGlass,
        populate: populate,
        applyControl: applyControl,
        executeCodeAndGetElementData: executeCodeAndGetElementData
    });

});

define('designer/inject/init', ['designer/inject/main'], function() {
    vwoe_$.each(vwoOriginalDefinitions, function(index, method) {
        'use strict';
        //If overriding wasn't done
        if (method.definition === -1) {
            return;
        }
        var context = method.context, methodNameParts = method.fullName.split('.'), contexts;

        if (context instanceof Array) {
            contexts = context;
        } else {
            contexts = [context];
        }

        contexts.forEach(function(context) {
            methodNameParts.forEach(function(contextName, i) {
                if (i < methodNameParts.length - 1) {
                    context = context[contextName];
                } else {
                    context[contextName] = method.definition;
                }
            });
        });
    });
});

define("editor-inject", function() {});

;require(["designer/inject/init"]);
vwoe_$.noConflict(true);
if (typeof window.jQuery === "undefined") {
    delete window.jQuery;
}
if (typeof window.$ === "undefined") {
    delete window.$;
}
vwoRestoreAMD();
